webpackHotUpdate(5,{

/***/ 1345:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = __webpack_require__(17);
var Component = React.Component;

var PropTypes = __webpack_require__(55);

var _require = __webpack_require__(1346),
    getDeviceId = _require.getDeviceId,
    getFacingModePattern = _require.getFacingModePattern;

var havePropsChanged = __webpack_require__(1348);
var createBlob = __webpack_require__(1349);

// Require adapter to support older browser implementations
__webpack_require__(1350);

// Inline worker.js as a string value of workerBlob.
// eslint-disable-next-line
var workerBlob = createBlob(["!function(o,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.jsQR=e():o.jsQR=e()}(\"undefined\"!=typeof self?self:this,function(){return function(o){function e(t){if(r[t])return r[t].exports;var c=r[t]={i:t,l:!1,exports:{}};return o[t].call(c.exports,c,c.exports,e),c.l=!0,c.exports}var r={};return e.m=o,e.c=r,e.d=function(o,r,t){e.o(o,r)||Object.defineProperty(o,r,{configurable:!1,enumerable:!0,get:t})},e.n=function(o){var r=o&&o.__esModule?function(){return o.default}:function(){return o};return e.d(r,\"a\",r),r},e.o=function(o,e){return Object.prototype.hasOwnProperty.call(o,e)},e.p=\"\",e(e.s=3)}([function(o,e,r){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var t=function(){function o(o,e){this.width=e,this.height=o.length/e,this.data=o}return o.createEmpty=function(e,r){return new o(new Uint8ClampedArray(e*r),e)},o.prototype.get=function(o,e){return!(o<0||o>=this.width||e<0||e>=this.height)&&!!this.data[e*this.width+o]},o.prototype.set=function(o,e,r){this.data[e*this.width+o]=r?1:0},o.prototype.setRegion=function(o,e,r,t,c){for(var s=e;s<e+t;s++)for(var a=o;a<o+r;a++)this.set(a,s,!!c)},o}();e.BitMatrix=t},function(o,e,r){\"use strict\";function t(o,e){return o^e}Object.defineProperty(e,\"__esModule\",{value:!0});var c=r(2);e.addOrSubtractGF=t;var s=function(){function o(o,e,r){this.primitive=o,this.size=e,this.generatorBase=r,this.expTable=new Array(this.size),this.logTable=new Array(this.size);for(var t=1,s=0;s<this.size;s++)this.expTable[s]=t,(t*=2)>=this.size&&(t=(t^this.primitive)&this.size-1);for(var s=0;s<this.size-1;s++)this.logTable[this.expTable[s]]=s;this.zero=new c.default(this,Uint8ClampedArray.from([0])),this.one=new c.default(this,Uint8ClampedArray.from([1]))}return o.prototype.multiply=function(o,e){return 0===o||0===e?0:this.expTable[(this.logTable[o]+this.logTable[e])%(this.size-1)]},o.prototype.inverse=function(o){if(0===o)throw new Error(\"Can't invert 0\");return this.expTable[this.size-this.logTable[o]-1]},o.prototype.buildMonomial=function(o,e){if(o<0)throw new Error(\"Invalid monomial degree less than 0\");if(0===e)return this.zero;var r=new Uint8ClampedArray(o+1);return r[0]=e,new c.default(this,r)},o.prototype.log=function(o){if(0===o)throw new Error(\"Can't take log(0)\");return this.logTable[o]},o.prototype.exp=function(o){return this.expTable[o]},o}();e.default=s},function(o,e,r){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var t=r(1),c=function(){function o(o,e){if(0===e.length)throw new Error(\"No coefficients.\");this.field=o;var r=e.length;if(r>1&&0===e[0]){for(var t=1;t<r&&0===e[t];)t++;if(t===r)this.coefficients=o.zero.coefficients;else{this.coefficients=new Uint8ClampedArray(r-t);for(var c=0;c<this.coefficients.length;c++)this.coefficients[c]=e[t+c]}}else this.coefficients=e}return o.prototype.degree=function(){return this.coefficients.length-1},o.prototype.isZero=function(){return 0===this.coefficients[0]},o.prototype.getCoefficient=function(o){return this.coefficients[this.coefficients.length-1-o]},o.prototype.addOrSubtract=function(e){if(this.isZero())return e;if(e.isZero())return this;var r=this.coefficients,c=e.coefficients;r.length>c.length&&(n=[c,r],r=n[0],c=n[1]);for(var s=new Uint8ClampedArray(c.length),a=c.length-r.length,d=0;d<a;d++)s[d]=c[d];for(var d=a;d<c.length;d++)s[d]=t.addOrSubtractGF(r[d-a],c[d]);return new o(this.field,s);var n},o.prototype.multiply=function(e){if(0===e)return this.field.zero;if(1===e)return this;for(var r=this.coefficients.length,t=new Uint8ClampedArray(r),c=0;c<r;c++)t[c]=this.field.multiply(this.coefficients[c],e);return new o(this.field,t)},o.prototype.multiplyPoly=function(e){if(this.isZero()||e.isZero())return this.field.zero;for(var r=this.coefficients,c=r.length,s=e.coefficients,a=s.length,d=new Uint8ClampedArray(c+a-1),n=0;n<c;n++)for(var l=r[n],i=0;i<a;i++)d[n+i]=t.addOrSubtractGF(d[n+i],this.field.multiply(l,s[i]));return new o(this.field,d)},o.prototype.multiplyByMonomial=function(e,r){if(e<0)throw new Error(\"Invalid degree less than 0\");if(0===r)return this.field.zero;for(var t=this.coefficients.length,c=new Uint8ClampedArray(t+e),s=0;s<t;s++)c[s]=this.field.multiply(this.coefficients[s],r);return new o(this.field,c)},o.prototype.evaluateAt=function(o){var e=0;if(0===o)return this.getCoefficient(0);var r=this.coefficients.length;if(1===o)return this.coefficients.forEach(function(o){e=t.addOrSubtractGF(e,o)}),e;e=this.coefficients[0];for(var c=1;c<r;c++)e=t.addOrSubtractGF(this.field.multiply(o,e),this.coefficients[c]);return e},o}();e.default=c},function(o,e,r){\"use strict\";function t(o){var e=n.locate(o);if(!e)return null;var r=d.extract(o,e),t=a.decode(r.matrix);return t?{binaryData:t.bytes,data:t.text,chunks:t.chunks,location:{topRightCorner:r.mappingFunction(e.dimension,0),topLeftCorner:r.mappingFunction(0,0),bottomRightCorner:r.mappingFunction(e.dimension,e.dimension),bottomLeftCorner:r.mappingFunction(0,e.dimension),topRightFinderPattern:e.topRight,topLeftFinderPattern:e.topLeft,bottomLeftFinderPattern:e.bottomLeft,bottomRightAlignmentPattern:e.alignmentPattern}}:null}function c(o,e,r,c){void 0===c&&(c={});var a=l;Object.keys(a||{}).forEach(function(o){a[o]=c[o]||a[o]});var d=\"attemptBoth\"===a.inversionAttempts||\"invertFirst\"===a.inversionAttempts,n=\"onlyInvert\"===a.inversionAttempts||\"invertFirst\"===a.inversionAttempts,i=s.binarize(o,e,r,d),B=i.binarized,k=i.inverted,u=t(n?k:B);return u||\"attemptBoth\"!==a.inversionAttempts&&\"invertFirst\"!==a.inversionAttempts||(u=t(n?B:k)),u}Object.defineProperty(e,\"__esModule\",{value:!0});var s=r(4),a=r(5),d=r(11),n=r(12),l={inversionAttempts:\"attemptBoth\"};c.default=c,e.default=c},function(o,e,r){\"use strict\";function t(o,e,r){return o<e?e:o>r?r:o}function c(o,e,r,c){if(o.length!==e*r*4)throw new Error(\"Malformed data passed to binarizer.\");for(var l=new n(e,r),i=0;i<e;i++)for(var B=0;B<r;B++){var k=o[4*(B*e+i)+0],u=o[4*(B*e+i)+1],C=o[4*(B*e+i)+2];l.set(i,B,.2126*k+.7152*u+.0722*C)}for(var m=Math.ceil(e/a),f=Math.ceil(r/a),w=new n(m,f),P=0;P<f;P++)for(var v=0;v<m;v++){for(var h=0,p=1/0,y=0,B=0;B<a;B++)for(var i=0;i<a;i++){var b=l.get(v*a+i,P*a+B);h+=b,p=Math.min(p,b),y=Math.max(y,b)}var g=h/Math.pow(a,2);if(y-p<=d&&(g=p/2,P>0&&v>0)){var x=(w.get(v,P-1)+2*w.get(v-1,P)+w.get(v-1,P-1))/4;p<x&&(g=x)}w.set(v,P,g)}var M=s.BitMatrix.createEmpty(e,r),L=null;c&&(L=s.BitMatrix.createEmpty(e,r));for(var P=0;P<f;P++)for(var v=0;v<m;v++){for(var N=t(v,2,m-3),I=t(P,2,f-3),h=0,O=-2;O<=2;O++)for(var z=-2;z<=2;z++)h+=w.get(N+O,I+z);for(var S=h/25,O=0;O<a;O++)for(var z=0;z<a;z++){var i=v*a+O,B=P*a+z,X=l.get(i,B);M.set(i,B,X<=S),c&&L.set(i,B,!(X<=S))}}return c?{binarized:M,inverted:L}:{binarized:M}}Object.defineProperty(e,\"__esModule\",{value:!0});var s=r(0),a=8,d=24,n=function(){function o(o,e){this.width=o,this.data=new Uint8ClampedArray(o*e)}return o.prototype.get=function(o,e){return this.data[e*this.width+o]},o.prototype.set=function(o,e,r){this.data[e*this.width+o]=r},o}();e.binarize=c},function(o,e,r){\"use strict\";function t(o,e){for(var r=o^e,t=0;r;)t++,r&=r-1;return t}function c(o,e){return e<<1|o}function s(o){var e=17+4*o.versionNumber,r=k.BitMatrix.createEmpty(e,e);r.setRegion(0,0,9,9,!0),r.setRegion(e-8,0,8,9,!0),r.setRegion(0,e-8,9,8,!0);for(var t=0,c=o.alignmentPatternCenters;t<c.length;t++)for(var s=c[t],a=0,d=o.alignmentPatternCenters;a<d.length;a++){var n=d[a];6===s&&6===n||6===s&&n===e-7||s===e-7&&6===n||r.setRegion(s-2,n-2,5,5,!0)}return r.setRegion(6,9,1,e-17,!0),r.setRegion(9,6,e-17,1,!0),o.versionNumber>6&&(r.setRegion(e-11,0,3,6,!0),r.setRegion(0,e-11,6,3,!0)),r}function a(o,e,r){for(var t=w[r.dataMask],a=o.height,d=s(e),n=[],l=0,i=0,B=!0,k=a-1;k>0;k-=2){6===k&&k--;for(var u=0;u<a;u++)for(var C=B?a-1-u:u,m=0;m<2;m++){var f=k-m;if(!d.get(f,C)){i++;var P=o.get(f,C);t({y:C,x:f})&&(P=!P),l=c(P,l),8===i&&(n.push(l),i=0,l=0)}}B=!B}return n}function d(o){var e=o.height,r=Math.floor((e-17)/4);if(r<=6)return m.VERSIONS[r-1];for(var s=0,a=5;a>=0;a--)for(var d=e-9;d>=e-11;d--)s=c(o.get(d,a),s);for(var n=0,d=5;d>=0;d--)for(var a=e-9;a>=e-11;a--)n=c(o.get(d,a),n);for(var l,i=1/0,B=0,k=m.VERSIONS;B<k.length;B++){var u=k[B];if(u.infoBits===s||u.infoBits===n)return u;var C=t(s,u.infoBits);C<i&&(l=u,i=C),C=t(n,u.infoBits),C<i&&(l=u,i=C)}return i<=3?l:void 0}function n(o){for(var e=0,r=0;r<=8;r++)6!==r&&(e=c(o.get(r,8),e));for(var s=7;s>=0;s--)6!==s&&(e=c(o.get(8,s),e));for(var a=o.height,d=0,s=a-1;s>=a-7;s--)d=c(o.get(8,s),d);for(var r=a-8;r<a;r++)d=c(o.get(r,8),d);for(var n=1/0,l=null,i=0,B=f;i<B.length;i++){var k=B[i],u=k.bits,C=k.formatInfo;if(u===e||u===d)return C;var m=t(e,u);m<n&&(l=C,n=m),e!==d&&(m=t(d,u))<n&&(l=C,n=m)}return n<=3?l:null}function l(o,e,r){var t=e.errorCorrectionLevels[r],c=[],s=0;if(t.ecBlocks.forEach(function(o){for(var e=0;e<o.numBlocks;e++)c.push({numDataCodewords:o.dataCodewordsPerBlock,codewords:[]}),s+=o.dataCodewordsPerBlock+t.ecCodewordsPerBlock}),o.length<s)return null;o=o.slice(0,s);for(var a=t.ecBlocks[0].dataCodewordsPerBlock,d=0;d<a;d++)for(var n=0,l=c;n<l.length;n++){var i=l[n];i.codewords.push(o.shift())}if(t.ecBlocks.length>1)for(var B=t.ecBlocks[0].numBlocks,k=t.ecBlocks[1].numBlocks,d=0;d<k;d++)c[B+d].codewords.push(o.shift());for(;o.length>0;)for(var u=0,C=c;u<C.length;u++){var i=C[u];i.codewords.push(o.shift())}return c}function i(o){var e=d(o);if(!e)return null;var r=n(o);if(!r)return null;var t=a(o,e,r),c=l(t,e,r.errorCorrectionLevel);if(!c)return null;for(var s=c.reduce(function(o,e){return o+e.numDataCodewords},0),i=new Uint8ClampedArray(s),B=0,k=0,m=c;k<m.length;k++){var f=m[k],w=C.decode(f.codewords,f.codewords.length-f.numDataCodewords);if(!w)return null;for(var P=0;P<f.numDataCodewords;P++)i[B++]=w[P]}try{return u.decode(i,e.versionNumber)}catch(o){return null}}function B(o){if(null==o)return null;var e=i(o);if(e)return e;for(var r=0;r<o.width;r++)for(var t=r+1;t<o.height;t++)o.get(r,t)!==o.get(t,r)&&(o.set(r,t,!o.get(r,t)),o.set(t,r,!o.get(t,r)));return i(o)}Object.defineProperty(e,\"__esModule\",{value:!0});var k=r(0),u=r(6),C=r(9),m=r(10),f=[{bits:21522,formatInfo:{errorCorrectionLevel:1,dataMask:0}},{bits:20773,formatInfo:{errorCorrectionLevel:1,dataMask:1}},{bits:24188,formatInfo:{errorCorrectionLevel:1,dataMask:2}},{bits:23371,formatInfo:{errorCorrectionLevel:1,dataMask:3}},{bits:17913,formatInfo:{errorCorrectionLevel:1,dataMask:4}},{bits:16590,formatInfo:{errorCorrectionLevel:1,dataMask:5}},{bits:20375,formatInfo:{errorCorrectionLevel:1,dataMask:6}},{bits:19104,formatInfo:{errorCorrectionLevel:1,dataMask:7}},{bits:30660,formatInfo:{errorCorrectionLevel:0,dataMask:0}},{bits:29427,formatInfo:{errorCorrectionLevel:0,dataMask:1}},{bits:32170,formatInfo:{errorCorrectionLevel:0,dataMask:2}},{bits:30877,formatInfo:{errorCorrectionLevel:0,dataMask:3}},{bits:26159,formatInfo:{errorCorrectionLevel:0,dataMask:4}},{bits:25368,formatInfo:{errorCorrectionLevel:0,dataMask:5}},{bits:27713,formatInfo:{errorCorrectionLevel:0,dataMask:6}},{bits:26998,formatInfo:{errorCorrectionLevel:0,dataMask:7}},{bits:5769,formatInfo:{errorCorrectionLevel:3,dataMask:0}},{bits:5054,formatInfo:{errorCorrectionLevel:3,dataMask:1}},{bits:7399,formatInfo:{errorCorrectionLevel:3,dataMask:2}},{bits:6608,formatInfo:{errorCorrectionLevel:3,dataMask:3}},{bits:1890,formatInfo:{errorCorrectionLevel:3,dataMask:4}},{bits:597,formatInfo:{errorCorrectionLevel:3,dataMask:5}},{bits:3340,formatInfo:{errorCorrectionLevel:3,dataMask:6}},{bits:2107,formatInfo:{errorCorrectionLevel:3,dataMask:7}},{bits:13663,formatInfo:{errorCorrectionLevel:2,dataMask:0}},{bits:12392,formatInfo:{errorCorrectionLevel:2,dataMask:1}},{bits:16177,formatInfo:{errorCorrectionLevel:2,dataMask:2}},{bits:14854,formatInfo:{errorCorrectionLevel:2,dataMask:3}},{bits:9396,formatInfo:{errorCorrectionLevel:2,dataMask:4}},{bits:8579,formatInfo:{errorCorrectionLevel:2,dataMask:5}},{bits:11994,formatInfo:{errorCorrectionLevel:2,dataMask:6}},{bits:11245,formatInfo:{errorCorrectionLevel:2,dataMask:7}}],w=[function(o){return(o.y+o.x)%2==0},function(o){return o.y%2==0},function(o){return o.x%3==0},function(o){return(o.y+o.x)%3==0},function(o){return(Math.floor(o.y/2)+Math.floor(o.x/3))%2==0},function(o){return o.x*o.y%2+o.x*o.y%3==0},function(o){return(o.y*o.x%2+o.y*o.x%3)%2==0},function(o){return((o.y+o.x)%2+o.y*o.x%3)%2==0}];e.decode=B},function(o,e,r){\"use strict\";function t(o,e){for(var r=[],t=\"\",c=[10,12,14][e],s=o.readBits(c);s>=3;){var a=o.readBits(10);if(a>=1e3)throw new Error(\"Invalid numeric value above 999\");var d=Math.floor(a/100),n=Math.floor(a/10)%10,l=a%10;r.push(48+d,48+n,48+l),t+=d.toString()+n.toString()+l.toString(),s-=3}if(2===s){var a=o.readBits(7);if(a>=100)throw new Error(\"Invalid numeric value above 99\");var d=Math.floor(a/10),n=a%10;r.push(48+d,48+n),t+=d.toString()+n.toString()}else if(1===s){var a=o.readBits(4);if(a>=10)throw new Error(\"Invalid numeric value above 9\");r.push(48+a),t+=a.toString()}return{bytes:r,text:t}}function c(o,e){for(var r=[],t=\"\",c=[9,11,13][e],s=o.readBits(c);s>=2;){var a=o.readBits(11),d=Math.floor(a/45),n=a%45;r.push(k[d].charCodeAt(0),k[n].charCodeAt(0)),t+=k[d]+k[n],s-=2}if(1===s){var d=o.readBits(6);r.push(k[d].charCodeAt(0)),t+=k[d]}return{bytes:r,text:t}}function s(o,e){for(var r=[],t=\"\",c=[8,16,16][e],s=o.readBits(c),a=0;a<s;a++){var d=o.readBits(8);r.push(d)}try{t+=decodeURIComponent(r.map(function(o){return\"%\"+(\"0\"+o.toString(16)).substr(-2)}).join(\"\"))}catch(o){}return{bytes:r,text:t}}function a(o,e){for(var r=[],t=\"\",c=[8,10,12][e],s=o.readBits(c),a=0;a<s;a++){var d=o.readBits(13),n=Math.floor(d/192)<<8|d%192;n+=n<7936?33088:49472,r.push(n>>8,255&n),t+=String.fromCharCode(i.shiftJISTable[n])}return{bytes:r,text:t}}function d(o,e){for(var r=new l.BitStream(o),d=e<=9?0:e<=26?1:2,i={text:\"\",bytes:[],chunks:[]};r.available()>=4;){var k=r.readBits(4);if(k===B.Terminator)return i;if(k===B.ECI)0===r.readBits(1)?i.chunks.push({type:n.ECI,assignmentNumber:r.readBits(7)}):0===r.readBits(1)?i.chunks.push({type:n.ECI,assignmentNumber:r.readBits(14)}):0===r.readBits(1)?i.chunks.push({type:n.ECI,assignmentNumber:r.readBits(21)}):i.chunks.push({type:n.ECI,assignmentNumber:-1});else if(k===B.Numeric){var u=t(r,d);i.text+=u.text,(w=i.bytes).push.apply(w,u.bytes),i.chunks.push({type:n.Numeric,text:u.text})}else if(k===B.Alphanumeric){var C=c(r,d);i.text+=C.text,(P=i.bytes).push.apply(P,C.bytes),i.chunks.push({type:n.Alphanumeric,text:C.text})}else if(k===B.Byte){var m=s(r,d);i.text+=m.text,(v=i.bytes).push.apply(v,m.bytes),i.chunks.push({type:n.Byte,bytes:m.bytes,text:m.text})}else if(k===B.Kanji){var f=a(r,d);i.text+=f.text,(h=i.bytes).push.apply(h,f.bytes),i.chunks.push({type:n.Kanji,bytes:f.bytes,text:f.text})}}var w,P,v,h}Object.defineProperty(e,\"__esModule\",{value:!0});var n,l=r(7),i=r(8);!function(o){o.Numeric=\"numeric\",o.Alphanumeric=\"alphanumeric\",o.Byte=\"byte\",o.Kanji=\"kanji\",o.ECI=\"eci\"}(n=e.Mode||(e.Mode={}));var B;!function(o){o[o.Terminator=0]=\"Terminator\",o[o.Numeric=1]=\"Numeric\",o[o.Alphanumeric=2]=\"Alphanumeric\",o[o.Byte=4]=\"Byte\",o[o.Kanji=8]=\"Kanji\",o[o.ECI=7]=\"ECI\"}(B||(B={}));var k=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\" \",\"$\",\"%\",\"*\",\"+\",\"-\",\".\",\"/\",\":\"];e.decode=d},function(o,e,r){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var t=function(){function o(o){this.byteOffset=0,this.bitOffset=0,this.bytes=o}return o.prototype.readBits=function(o){if(o<1||o>32||o>this.available())throw new Error(\"Cannot read \"+o.toString()+\" bits\");var e=0;if(this.bitOffset>0){var r=8-this.bitOffset,t=o<r?o:r,c=r-t,s=255>>8-t<<c;e=(this.bytes[this.byteOffset]&s)>>c,o-=t,this.bitOffset+=t,8===this.bitOffset&&(this.bitOffset=0,this.byteOffset++)}if(o>0){for(;o>=8;)e=e<<8|255&this.bytes[this.byteOffset],this.byteOffset++,o-=8;if(o>0){var c=8-o,s=255>>c<<c;e=e<<o|(this.bytes[this.byteOffset]&s)>>c,this.bitOffset+=o}}return e},o.prototype.available=function(){return 8*(this.bytes.length-this.byteOffset)-this.bitOffset},o}();e.BitStream=t},function(o,e,r){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.shiftJISTable={32:32,33:33,34:34,35:35,36:36,37:37,38:38,39:39,40:40,41:41,42:42,43:43,44:44,45:45,46:46,47:47,48:48,49:49,50:50,51:51,52:52,53:53,54:54,55:55,56:56,57:57,58:58,59:59,60:60,61:61,62:62,63:63,64:64,65:65,66:66,67:67,68:68,69:69,70:70,71:71,72:72,73:73,74:74,75:75,76:76,77:77,78:78,79:79,80:80,81:81,82:82,83:83,84:84,85:85,86:86,87:87,88:88,89:89,90:90,91:91,92:165,93:93,94:94,95:95,96:96,97:97,98:98,99:99,100:100,101:101,102:102,103:103,104:104,105:105,106:106,107:107,108:108,109:109,110:110,111:111,112:112,113:113,114:114,115:115,116:116,117:117,118:118,119:119,120:120,121:121,122:122,123:123,124:124,125:125,126:8254,33088:12288,33089:12289,33090:12290,33091:65292,33092:65294,33093:12539,33094:65306,33095:65307,33096:65311,33097:65281,33098:12443,33099:12444,33100:180,33101:65344,33102:168,33103:65342,33104:65507,33105:65343,33106:12541,33107:12542,33108:12445,33109:12446,33110:12291,33111:20189,33112:12293,33113:12294,33114:12295,33115:12540,33116:8213,33117:8208,33118:65295,33119:92,33120:12316,33121:8214,33122:65372,33123:8230,33124:8229,33125:8216,33126:8217,33127:8220,33128:8221,33129:65288,33130:65289,33131:12308,33132:12309,33133:65339,33134:65341,33135:65371,33136:65373,33137:12296,33138:12297,33139:12298,33140:12299,33141:12300,33142:12301,33143:12302,33144:12303,33145:12304,33146:12305,33147:65291,33148:8722,33149:177,33150:215,33152:247,33153:65309,33154:8800,33155:65308,33156:65310,33157:8806,33158:8807,33159:8734,33160:8756,33161:9794,33162:9792,33163:176,33164:8242,33165:8243,33166:8451,33167:65509,33168:65284,33169:162,33170:163,33171:65285,33172:65283,33173:65286,33174:65290,33175:65312,33176:167,33177:9734,33178:9733,33179:9675,33180:9679,33181:9678,33182:9671,33183:9670,33184:9633,33185:9632,33186:9651,33187:9650,33188:9661,33189:9660,33190:8251,33191:12306,33192:8594,33193:8592,33194:8593,33195:8595,33196:12307,33208:8712,33209:8715,33210:8838,33211:8839,33212:8834,33213:8835,33214:8746,33215:8745,33224:8743,33225:8744,33226:172,33227:8658,33228:8660,33229:8704,33230:8707,33242:8736,33243:8869,33244:8978,33245:8706,33246:8711,33247:8801,33248:8786,33249:8810,33250:8811,33251:8730,33252:8765,33253:8733,33254:8757,33255:8747,33256:8748,33264:8491,33265:8240,33266:9839,33267:9837,33268:9834,33269:8224,33270:8225,33271:182,33276:9711,33359:65296,33360:65297,33361:65298,33362:65299,33363:65300,33364:65301,33365:65302,33366:65303,33367:65304,33368:65305,33376:65313,33377:65314,33378:65315,33379:65316,33380:65317,33381:65318,33382:65319,33383:65320,33384:65321,33385:65322,33386:65323,33387:65324,33388:65325,33389:65326,33390:65327,33391:65328,33392:65329,33393:65330,33394:65331,33395:65332,33396:65333,33397:65334,33398:65335,33399:65336,33400:65337,33401:65338,33409:65345,33410:65346,33411:65347,33412:65348,33413:65349,33414:65350,33415:65351,33416:65352,33417:65353,33418:65354,33419:65355,33420:65356,33421:65357,33422:65358,33423:65359,33424:65360,33425:65361,33426:65362,33427:65363,33428:65364,33429:65365,33430:65366,33431:65367,33432:65368,33433:65369,33434:65370,33439:12353,33440:12354,33441:12355,33442:12356,33443:12357,33444:12358,33445:12359,33446:12360,33447:12361,33448:12362,33449:12363,33450:12364,33451:12365,33452:12366,33453:12367,33454:12368,33455:12369,33456:12370,33457:12371,33458:12372,33459:12373,33460:12374,33461:12375,33462:12376,33463:12377,33464:12378,33465:12379,33466:12380,33467:12381,33468:12382,33469:12383,33470:12384,33471:12385,33472:12386,33473:12387,33474:12388,33475:12389,33476:12390,33477:12391,33478:12392,33479:12393,33480:12394,33481:12395,33482:12396,33483:12397,33484:12398,33485:12399,33486:12400,33487:12401,33488:12402,33489:12403,33490:12404,33491:12405,33492:12406,33493:12407,33494:12408,33495:12409,33496:12410,33497:12411,33498:12412,33499:12413,33500:12414,33501:12415,33502:12416,33503:12417,33504:12418,33505:12419,33506:12420,33507:12421,33508:12422,33509:12423,33510:12424,33511:12425,33512:12426,33513:12427,33514:12428,33515:12429,33516:12430,33517:12431,33518:12432,33519:12433,33520:12434,33521:12435,33600:12449,33601:12450,33602:12451,33603:12452,33604:12453,33605:12454,33606:12455,33607:12456,33608:12457,33609:12458,33610:12459,33611:12460,33612:12461,33613:12462,33614:12463,33615:12464,33616:12465,33617:12466,33618:12467,33619:12468,33620:12469,33621:12470,33622:12471,33623:12472,33624:12473,33625:12474,33626:12475,33627:12476,33628:12477,33629:12478,33630:12479,33631:12480,33632:12481,33633:12482,33634:12483,33635:12484,33636:12485,33637:12486,33638:12487,33639:12488,33640:12489,33641:12490,33642:12491,33643:12492,33644:12493,33645:12494,33646:12495,33647:12496,33648:12497,33649:12498,33650:12499,33651:12500,33652:12501,33653:12502,33654:12503,33655:12504,33656:12505,33657:12506,33658:12507,33659:12508,33660:12509,33661:12510,33662:12511,33664:12512,33665:12513,33666:12514,33667:12515,33668:12516,33669:12517,33670:12518,33671:12519,33672:12520,33673:12521,33674:12522,33675:12523,33676:12524,33677:12525,33678:12526,33679:12527,33680:12528,33681:12529,33682:12530,33683:12531,33684:12532,33685:12533,33686:12534,33695:913,33696:914,33697:915,33698:916,33699:917,33700:918,33701:919,33702:920,33703:921,33704:922,33705:923,33706:924,33707:925,33708:926,33709:927,33710:928,33711:929,33712:931,33713:932,33714:933,33715:934,33716:935,33717:936,33718:937,33727:945,33728:946,33729:947,33730:948,33731:949,33732:950,33733:951,33734:952,33735:953,33736:954,33737:955,33738:956,33739:957,33740:958,33741:959,33742:960,33743:961,33744:963,33745:964,33746:965,33747:966,33748:967,33749:968,33750:969,33856:1040,33857:1041,33858:1042,33859:1043,33860:1044,33861:1045,33862:1025,33863:1046,33864:1047,33865:1048,33866:1049,33867:1050,33868:1051,33869:1052,33870:1053,33871:1054,33872:1055,33873:1056,33874:1057,33875:1058,33876:1059,33877:1060,33878:1061,33879:1062,33880:1063,33881:1064,33882:1065,33883:1066,33884:1067,33885:1068,33886:1069,33887:1070,33888:1071,33904:1072,33905:1073,33906:1074,33907:1075,33908:1076,33909:1077,33910:1105,33911:1078,33912:1079,33913:1080,33914:1081,33915:1082,33916:1083,33917:1084,33918:1085,33920:1086,33921:1087,33922:1088,33923:1089,33924:1090,33925:1091,33926:1092,33927:1093,33928:1094,33929:1095,33930:1096,33931:1097,33932:1098,33933:1099,33934:1100,33935:1101,33936:1102,33937:1103,33951:9472,33952:9474,33953:9484,33954:9488,33955:9496,33956:9492,33957:9500,33958:9516,33959:9508,33960:9524,33961:9532,33962:9473,33963:9475,33964:9487,33965:9491,33966:9499,33967:9495,33968:9507,33969:9523,33970:9515,33971:9531,33972:9547,33973:9504,33974:9519,33975:9512,33976:9527,33977:9535,33978:9501,33979:9520,33980:9509,33981:9528,33982:9538,34975:20124,34976:21782,34977:23043,34978:38463,34979:21696,34980:24859,34981:25384,34982:23030,34983:36898,34984:33909,34985:33564,34986:31312,34987:24746,34988:25569,34989:28197,34990:26093,34991:33894,34992:33446,34993:39925,34994:26771,34995:22311,34996:26017,34997:25201,34998:23451,34999:22992,35e3:34427,35001:39156,35002:32098,35003:32190,35004:39822,35005:25110,35006:31903,35007:34999,35008:23433,35009:24245,35010:25353,35011:26263,35012:26696,35013:38343,35014:38797,35015:26447,35016:20197,35017:20234,35018:20301,35019:20381,35020:20553,35021:22258,35022:22839,35023:22996,35024:23041,35025:23561,35026:24799,35027:24847,35028:24944,35029:26131,35030:26885,35031:28858,35032:30031,35033:30064,35034:31227,35035:32173,35036:32239,35037:32963,35038:33806,35039:34915,35040:35586,35041:36949,35042:36986,35043:21307,35044:20117,35045:20133,35046:22495,35047:32946,35048:37057,35049:30959,35050:19968,35051:22769,35052:28322,35053:36920,35054:31282,35055:33576,35056:33419,35057:39983,35058:20801,35059:21360,35060:21693,35061:21729,35062:22240,35063:23035,35064:24341,35065:39154,35066:28139,35067:32996,35068:34093,35136:38498,35137:38512,35138:38560,35139:38907,35140:21515,35141:21491,35142:23431,35143:28879,35144:32701,35145:36802,35146:38632,35147:21359,35148:40284,35149:31418,35150:19985,35151:30867,35152:33276,35153:28198,35154:22040,35155:21764,35156:27421,35157:34074,35158:39995,35159:23013,35160:21417,35161:28006,35162:29916,35163:38287,35164:22082,35165:20113,35166:36939,35167:38642,35168:33615,35169:39180,35170:21473,35171:21942,35172:23344,35173:24433,35174:26144,35175:26355,35176:26628,35177:27704,35178:27891,35179:27945,35180:29787,35181:30408,35182:31310,35183:38964,35184:33521,35185:34907,35186:35424,35187:37613,35188:28082,35189:30123,35190:30410,35191:39365,35192:24742,35193:35585,35194:36234,35195:38322,35196:27022,35197:21421,35198:20870,35200:22290,35201:22576,35202:22852,35203:23476,35204:24310,35205:24616,35206:25513,35207:25588,35208:27839,35209:28436,35210:28814,35211:28948,35212:29017,35213:29141,35214:29503,35215:32257,35216:33398,35217:33489,35218:34199,35219:36960,35220:37467,35221:40219,35222:22633,35223:26044,35224:27738,35225:29989,35226:20985,35227:22830,35228:22885,35229:24448,35230:24540,35231:25276,35232:26106,35233:27178,35234:27431,35235:27572,35236:29579,35237:32705,35238:35158,35239:40236,35240:40206,35241:40644,35242:23713,35243:27798,35244:33659,35245:20740,35246:23627,35247:25014,35248:33222,35249:26742,35250:29281,35251:20057,35252:20474,35253:21368,35254:24681,35255:28201,35256:31311,35257:38899,35258:19979,35259:21270,35260:20206,35261:20309,35262:20285,35263:20385,35264:20339,35265:21152,35266:21487,35267:22025,35268:22799,35269:23233,35270:23478,35271:23521,35272:31185,35273:26247,35274:26524,35275:26550,35276:27468,35277:27827,35278:28779,35279:29634,35280:31117,35281:31166,35282:31292,35283:31623,35284:33457,35285:33499,35286:33540,35287:33655,35288:33775,35289:33747,35290:34662,35291:35506,35292:22057,35293:36008,35294:36838,35295:36942,35296:38686,35297:34442,35298:20420,35299:23784,35300:25105,35301:29273,35302:30011,35303:33253,35304:33469,35305:34558,35306:36032,35307:38597,35308:39187,35309:39381,35310:20171,35311:20250,35312:35299,35313:22238,35314:22602,35315:22730,35316:24315,35317:24555,35318:24618,35319:24724,35320:24674,35321:25040,35322:25106,35323:25296,35324:25913,35392:39745,35393:26214,35394:26800,35395:28023,35396:28784,35397:30028,35398:30342,35399:32117,35400:33445,35401:34809,35402:38283,35403:38542,35404:35997,35405:20977,35406:21182,35407:22806,35408:21683,35409:23475,35410:23830,35411:24936,35412:27010,35413:28079,35414:30861,35415:33995,35416:34903,35417:35442,35418:37799,35419:39608,35420:28012,35421:39336,35422:34521,35423:22435,35424:26623,35425:34510,35426:37390,35427:21123,35428:22151,35429:21508,35430:24275,35431:25313,35432:25785,35433:26684,35434:26680,35435:27579,35436:29554,35437:30906,35438:31339,35439:35226,35440:35282,35441:36203,35442:36611,35443:37101,35444:38307,35445:38548,35446:38761,35447:23398,35448:23731,35449:27005,35450:38989,35451:38990,35452:25499,35453:31520,35454:27179,35456:27263,35457:26806,35458:39949,35459:28511,35460:21106,35461:21917,35462:24688,35463:25324,35464:27963,35465:28167,35466:28369,35467:33883,35468:35088,35469:36676,35470:19988,35471:39993,35472:21494,35473:26907,35474:27194,35475:38788,35476:26666,35477:20828,35478:31427,35479:33970,35480:37340,35481:37772,35482:22107,35483:40232,35484:26658,35485:33541,35486:33841,35487:31909,35488:21e3,35489:33477,35490:29926,35491:20094,35492:20355,35493:20896,35494:23506,35495:21002,35496:21208,35497:21223,35498:24059,35499:21914,35500:22570,35501:23014,35502:23436,35503:23448,35504:23515,35505:24178,35506:24185,35507:24739,35508:24863,35509:24931,35510:25022,35511:25563,35512:25954,35513:26577,35514:26707,35515:26874,35516:27454,35517:27475,35518:27735,35519:28450,35520:28567,35521:28485,35522:29872,35523:29976,35524:30435,35525:30475,35526:31487,35527:31649,35528:31777,35529:32233,35530:32566,35531:32752,35532:32925,35533:33382,35534:33694,35535:35251,35536:35532,35537:36011,35538:36996,35539:37969,35540:38291,35541:38289,35542:38306,35543:38501,35544:38867,35545:39208,35546:33304,35547:20024,35548:21547,35549:23736,35550:24012,35551:29609,35552:30284,35553:30524,35554:23721,35555:32747,35556:36107,35557:38593,35558:38929,35559:38996,35560:39e3,35561:20225,35562:20238,35563:21361,35564:21916,35565:22120,35566:22522,35567:22855,35568:23305,35569:23492,35570:23696,35571:24076,35572:24190,35573:24524,35574:25582,35575:26426,35576:26071,35577:26082,35578:26399,35579:26827,35580:26820,35648:27231,35649:24112,35650:27589,35651:27671,35652:27773,35653:30079,35654:31048,35655:23395,35656:31232,35657:32e3,35658:24509,35659:35215,35660:35352,35661:36020,35662:36215,35663:36556,35664:36637,35665:39138,35666:39438,35667:39740,35668:20096,35669:20605,35670:20736,35671:22931,35672:23452,35673:25135,35674:25216,35675:25836,35676:27450,35677:29344,35678:30097,35679:31047,35680:32681,35681:34811,35682:35516,35683:35696,35684:25516,35685:33738,35686:38816,35687:21513,35688:21507,35689:21931,35690:26708,35691:27224,35692:35440,35693:30759,35694:26485,35695:40653,35696:21364,35697:23458,35698:33050,35699:34384,35700:36870,35701:19992,35702:20037,35703:20167,35704:20241,35705:21450,35706:21560,35707:23470,35708:24339,35709:24613,35710:25937,35712:26429,35713:27714,35714:27762,35715:27875,35716:28792,35717:29699,35718:31350,35719:31406,35720:31496,35721:32026,35722:31998,35723:32102,35724:26087,35725:29275,35726:21435,35727:23621,35728:24040,35729:25298,35730:25312,35731:25369,35732:28192,35733:34394,35734:35377,35735:36317,35736:37624,35737:28417,35738:31142,35739:39770,35740:20136,35741:20139,35742:20140,35743:20379,35744:20384,35745:20689,35746:20807,35747:31478,35748:20849,35749:20982,35750:21332,35751:21281,35752:21375,35753:21483,35754:21932,35755:22659,35756:23777,35757:24375,35758:24394,35759:24623,35760:24656,35761:24685,35762:25375,35763:25945,35764:27211,35765:27841,35766:29378,35767:29421,35768:30703,35769:33016,35770:33029,35771:33288,35772:34126,35773:37111,35774:37857,35775:38911,35776:39255,35777:39514,35778:20208,35779:20957,35780:23597,35781:26241,35782:26989,35783:23616,35784:26354,35785:26997,35786:29577,35787:26704,35788:31873,35789:20677,35790:21220,35791:22343,35792:24062,35793:37670,35794:26020,35795:27427,35796:27453,35797:29748,35798:31105,35799:31165,35800:31563,35801:32202,35802:33465,35803:33740,35804:34943,35805:35167,35806:35641,35807:36817,35808:37329,35809:21535,35810:37504,35811:20061,35812:20534,35813:21477,35814:21306,35815:29399,35816:29590,35817:30697,35818:33510,35819:36527,35820:39366,35821:39368,35822:39378,35823:20855,35824:24858,35825:34398,35826:21936,35827:31354,35828:20598,35829:23507,35830:36935,35831:38533,35832:20018,35833:27355,35834:37351,35835:23633,35836:23624,35904:25496,35905:31391,35906:27795,35907:38772,35908:36705,35909:31402,35910:29066,35911:38536,35912:31874,35913:26647,35914:32368,35915:26705,35916:37740,35917:21234,35918:21531,35919:34219,35920:35347,35921:32676,35922:36557,35923:37089,35924:21350,35925:34952,35926:31041,35927:20418,35928:20670,35929:21009,35930:20804,35931:21843,35932:22317,35933:29674,35934:22411,35935:22865,35936:24418,35937:24452,35938:24693,35939:24950,35940:24935,35941:25001,35942:25522,35943:25658,35944:25964,35945:26223,35946:26690,35947:28179,35948:30054,35949:31293,35950:31995,35951:32076,35952:32153,35953:32331,35954:32619,35955:33550,35956:33610,35957:34509,35958:35336,35959:35427,35960:35686,35961:36605,35962:38938,35963:40335,35964:33464,35965:36814,35966:39912,35968:21127,35969:25119,35970:25731,35971:28608,35972:38553,35973:26689,35974:20625,35975:27424,35976:27770,35977:28500,35978:31348,35979:32080,35980:34880,35981:35363,35982:26376,35983:20214,35984:20537,35985:20518,35986:20581,35987:20860,35988:21048,35989:21091,35990:21927,35991:22287,35992:22533,35993:23244,35994:24314,35995:25010,35996:25080,35997:25331,35998:25458,35999:26908,36e3:27177,36001:29309,36002:29356,36003:29486,36004:30740,36005:30831,36006:32121,36007:30476,36008:32937,36009:35211,36010:35609,36011:36066,\n36012:36562,36013:36963,36014:37749,36015:38522,36016:38997,36017:39443,36018:40568,36019:20803,36020:21407,36021:21427,36022:24187,36023:24358,36024:28187,36025:28304,36026:29572,36027:29694,36028:32067,36029:33335,36030:35328,36031:35578,36032:38480,36033:20046,36034:20491,36035:21476,36036:21628,36037:22266,36038:22993,36039:23396,36040:24049,36041:24235,36042:24359,36043:25144,36044:25925,36045:26543,36046:28246,36047:29392,36048:31946,36049:34996,36050:32929,36051:32993,36052:33776,36053:34382,36054:35463,36055:36328,36056:37431,36057:38599,36058:39015,36059:40723,36060:20116,36061:20114,36062:20237,36063:21320,36064:21577,36065:21566,36066:23087,36067:24460,36068:24481,36069:24735,36070:26791,36071:27278,36072:29786,36073:30849,36074:35486,36075:35492,36076:35703,36077:37264,36078:20062,36079:39881,36080:20132,36081:20348,36082:20399,36083:20505,36084:20502,36085:20809,36086:20844,36087:21151,36088:21177,36089:21246,36090:21402,36091:21475,36092:21521,36160:21518,36161:21897,36162:22353,36163:22434,36164:22909,36165:23380,36166:23389,36167:23439,36168:24037,36169:24039,36170:24055,36171:24184,36172:24195,36173:24218,36174:24247,36175:24344,36176:24658,36177:24908,36178:25239,36179:25304,36180:25511,36181:25915,36182:26114,36183:26179,36184:26356,36185:26477,36186:26657,36187:26775,36188:27083,36189:27743,36190:27946,36191:28009,36192:28207,36193:28317,36194:30002,36195:30343,36196:30828,36197:31295,36198:31968,36199:32005,36200:32024,36201:32094,36202:32177,36203:32789,36204:32771,36205:32943,36206:32945,36207:33108,36208:33167,36209:33322,36210:33618,36211:34892,36212:34913,36213:35611,36214:36002,36215:36092,36216:37066,36217:37237,36218:37489,36219:30783,36220:37628,36221:38308,36222:38477,36224:38917,36225:39321,36226:39640,36227:40251,36228:21083,36229:21163,36230:21495,36231:21512,36232:22741,36233:25335,36234:28640,36235:35946,36236:36703,36237:40633,36238:20811,36239:21051,36240:21578,36241:22269,36242:31296,36243:37239,36244:40288,36245:40658,36246:29508,36247:28425,36248:33136,36249:29969,36250:24573,36251:24794,36252:39592,36253:29403,36254:36796,36255:27492,36256:38915,36257:20170,36258:22256,36259:22372,36260:22718,36261:23130,36262:24680,36263:25031,36264:26127,36265:26118,36266:26681,36267:26801,36268:28151,36269:30165,36270:32058,36271:33390,36272:39746,36273:20123,36274:20304,36275:21449,36276:21766,36277:23919,36278:24038,36279:24046,36280:26619,36281:27801,36282:29811,36283:30722,36284:35408,36285:37782,36286:35039,36287:22352,36288:24231,36289:25387,36290:20661,36291:20652,36292:20877,36293:26368,36294:21705,36295:22622,36296:22971,36297:23472,36298:24425,36299:25165,36300:25505,36301:26685,36302:27507,36303:28168,36304:28797,36305:37319,36306:29312,36307:30741,36308:30758,36309:31085,36310:25998,36311:32048,36312:33756,36313:35009,36314:36617,36315:38555,36316:21092,36317:22312,36318:26448,36319:32618,36320:36001,36321:20916,36322:22338,36323:38442,36324:22586,36325:27018,36326:32948,36327:21682,36328:23822,36329:22524,36330:30869,36331:40442,36332:20316,36333:21066,36334:21643,36335:25662,36336:26152,36337:26388,36338:26613,36339:31364,36340:31574,36341:32034,36342:37679,36343:26716,36344:39853,36345:31545,36346:21273,36347:20874,36348:21047,36416:23519,36417:25334,36418:25774,36419:25830,36420:26413,36421:27578,36422:34217,36423:38609,36424:30352,36425:39894,36426:25420,36427:37638,36428:39851,36429:30399,36430:26194,36431:19977,36432:20632,36433:21442,36434:23665,36435:24808,36436:25746,36437:25955,36438:26719,36439:29158,36440:29642,36441:29987,36442:31639,36443:32386,36444:34453,36445:35715,36446:36059,36447:37240,36448:39184,36449:26028,36450:26283,36451:27531,36452:20181,36453:20180,36454:20282,36455:20351,36456:21050,36457:21496,36458:21490,36459:21987,36460:22235,36461:22763,36462:22987,36463:22985,36464:23039,36465:23376,36466:23629,36467:24066,36468:24107,36469:24535,36470:24605,36471:25351,36472:25903,36473:23388,36474:26031,36475:26045,36476:26088,36477:26525,36478:27490,36480:27515,36481:27663,36482:29509,36483:31049,36484:31169,36485:31992,36486:32025,36487:32043,36488:32930,36489:33026,36490:33267,36491:35222,36492:35422,36493:35433,36494:35430,36495:35468,36496:35566,36497:36039,36498:36060,36499:38604,36500:39164,36501:27503,36502:20107,36503:20284,36504:20365,36505:20816,36506:23383,36507:23546,36508:24904,36509:25345,36510:26178,36511:27425,36512:28363,36513:27835,36514:29246,36515:29885,36516:30164,36517:30913,36518:31034,36519:32780,36520:32819,36521:33258,36522:33940,36523:36766,36524:27728,36525:40575,36526:24335,36527:35672,36528:40235,36529:31482,36530:36600,36531:23437,36532:38635,36533:19971,36534:21489,36535:22519,36536:22833,36537:23241,36538:23460,36539:24713,36540:28287,36541:28422,36542:30142,36543:36074,36544:23455,36545:34048,36546:31712,36547:20594,36548:26612,36549:33437,36550:23649,36551:34122,36552:32286,36553:33294,36554:20889,36555:23556,36556:25448,36557:36198,36558:26012,36559:29038,36560:31038,36561:32023,36562:32773,36563:35613,36564:36554,36565:36974,36566:34503,36567:37034,36568:20511,36569:21242,36570:23610,36571:26451,36572:28796,36573:29237,36574:37196,36575:37320,36576:37675,36577:33509,36578:23490,36579:24369,36580:24825,36581:20027,36582:21462,36583:23432,36584:25163,36585:26417,36586:27530,36587:29417,36588:29664,36589:31278,36590:33131,36591:36259,36592:37202,36593:39318,36594:20754,36595:21463,36596:21610,36597:23551,36598:25480,36599:27193,36600:32172,36601:38656,36602:22234,36603:21454,36604:21608,36672:23447,36673:23601,36674:24030,36675:20462,36676:24833,36677:25342,36678:27954,36679:31168,36680:31179,36681:32066,36682:32333,36683:32722,36684:33261,36685:33311,36686:33936,36687:34886,36688:35186,36689:35728,36690:36468,36691:36655,36692:36913,36693:37195,36694:37228,36695:38598,36696:37276,36697:20160,36698:20303,36699:20805,36700:21313,36701:24467,36702:25102,36703:26580,36704:27713,36705:28171,36706:29539,36707:32294,36708:37325,36709:37507,36710:21460,36711:22809,36712:23487,36713:28113,36714:31069,36715:32302,36716:31899,36717:22654,36718:29087,36719:20986,36720:34899,36721:36848,36722:20426,36723:23803,36724:26149,36725:30636,36726:31459,36727:33308,36728:39423,36729:20934,36730:24490,36731:26092,36732:26991,36733:27529,36734:28147,36736:28310,36737:28516,36738:30462,36739:32020,36740:24033,36741:36981,36742:37255,36743:38918,36744:20966,36745:21021,36746:25152,36747:26257,36748:26329,36749:28186,36750:24246,36751:32210,36752:32626,36753:26360,36754:34223,36755:34295,36756:35576,36757:21161,36758:21465,36759:22899,36760:24207,36761:24464,36762:24661,36763:37604,36764:38500,36765:20663,36766:20767,36767:21213,36768:21280,36769:21319,36770:21484,36771:21736,36772:21830,36773:21809,36774:22039,36775:22888,36776:22974,36777:23100,36778:23477,36779:23558,36780:23567,36781:23569,36782:23578,36783:24196,36784:24202,36785:24288,36786:24432,36787:25215,36788:25220,36789:25307,36790:25484,36791:25463,36792:26119,36793:26124,36794:26157,36795:26230,36796:26494,36797:26786,36798:27167,36799:27189,36800:27836,36801:28040,36802:28169,36803:28248,36804:28988,36805:28966,36806:29031,36807:30151,36808:30465,36809:30813,36810:30977,36811:31077,36812:31216,36813:31456,36814:31505,36815:31911,36816:32057,36817:32918,36818:33750,36819:33931,36820:34121,36821:34909,36822:35059,36823:35359,36824:35388,36825:35412,36826:35443,36827:35937,36828:36062,36829:37284,36830:37478,36831:37758,36832:37912,36833:38556,36834:38808,36835:19978,36836:19976,36837:19998,36838:20055,36839:20887,36840:21104,36841:22478,36842:22580,36843:22732,36844:23330,36845:24120,36846:24773,36847:25854,36848:26465,36849:26454,36850:27972,36851:29366,36852:30067,36853:31331,36854:33976,36855:35698,36856:37304,36857:37664,36858:22065,36859:22516,36860:39166,36928:25325,36929:26893,36930:27542,36931:29165,36932:32340,36933:32887,36934:33394,36935:35302,36936:39135,36937:34645,36938:36785,36939:23611,36940:20280,36941:20449,36942:20405,36943:21767,36944:23072,36945:23517,36946:23529,36947:24515,36948:24910,36949:25391,36950:26032,36951:26187,36952:26862,36953:27035,36954:28024,36955:28145,36956:30003,36957:30137,36958:30495,36959:31070,36960:31206,36961:32051,36962:33251,36963:33455,36964:34218,36965:35242,36966:35386,36967:36523,36968:36763,36969:36914,36970:37341,36971:38663,36972:20154,36973:20161,36974:20995,36975:22645,36976:22764,36977:23563,36978:29978,36979:23613,36980:33102,36981:35338,36982:36805,36983:38499,36984:38765,36985:31525,36986:35535,36987:38920,36988:37218,36989:22259,36990:21416,36992:36887,36993:21561,36994:22402,36995:24101,36996:25512,36997:27700,36998:28810,36999:30561,37e3:31883,37001:32736,37002:34928,37003:36930,37004:37204,37005:37648,37006:37656,37007:38543,37008:29790,37009:39620,37010:23815,37011:23913,37012:25968,37013:26530,37014:36264,37015:38619,37016:25454,37017:26441,37018:26905,37019:33733,37020:38935,37021:38592,37022:35070,37023:28548,37024:25722,37025:23544,37026:19990,37027:28716,37028:30045,37029:26159,37030:20932,37031:21046,37032:21218,37033:22995,37034:24449,37035:24615,37036:25104,37037:25919,37038:25972,37039:26143,37040:26228,37041:26866,37042:26646,37043:27491,37044:28165,37045:29298,37046:29983,37047:30427,37048:31934,37049:32854,37050:22768,37051:35069,37052:35199,37053:35488,37054:35475,37055:35531,37056:36893,37057:37266,37058:38738,37059:38745,37060:25993,37061:31246,37062:33030,37063:38587,37064:24109,37065:24796,37066:25114,37067:26021,37068:26132,37069:26512,37070:30707,37071:31309,37072:31821,37073:32318,37074:33034,37075:36012,37076:36196,37077:36321,37078:36447,37079:30889,37080:20999,37081:25305,37082:25509,37083:25666,37084:25240,37085:35373,37086:31363,37087:31680,37088:35500,37089:38634,37090:32118,37091:33292,37092:34633,37093:20185,37094:20808,37095:21315,37096:21344,37097:23459,37098:23554,37099:23574,37100:24029,37101:25126,37102:25159,37103:25776,37104:26643,37105:26676,37106:27849,37107:27973,37108:27927,37109:26579,37110:28508,37111:29006,37112:29053,37113:26059,37114:31359,37115:31661,37116:32218,37184:32330,37185:32680,37186:33146,37187:33307,37188:33337,37189:34214,37190:35438,37191:36046,37192:36341,37193:36984,37194:36983,37195:37549,37196:37521,37197:38275,37198:39854,37199:21069,37200:21892,37201:28472,37202:28982,37203:20840,37204:31109,37205:32341,37206:33203,37207:31950,37208:22092,37209:22609,37210:23720,37211:25514,37212:26366,37213:26365,37214:26970,37215:29401,37216:30095,37217:30094,37218:30990,37219:31062,37220:31199,37221:31895,37222:32032,37223:32068,37224:34311,37225:35380,37226:38459,37227:36961,37228:40736,37229:20711,37230:21109,37231:21452,37232:21474,37233:20489,37234:21930,37235:22766,37236:22863,37237:29245,37238:23435,37239:23652,37240:21277,37241:24803,37242:24819,37243:25436,37244:25475,37245:25407,37246:25531,37248:25805,37249:26089,37250:26361,37251:24035,37252:27085,37253:27133,37254:28437,37255:29157,37256:20105,37257:30185,37258:30456,37259:31379,37260:31967,37261:32207,37262:32156,37263:32865,37264:33609,37265:33624,37266:33900,37267:33980,37268:34299,37269:35013,37270:36208,37271:36865,37272:36973,37273:37783,37274:38684,37275:39442,37276:20687,37277:22679,37278:24974,37279:33235,37280:34101,37281:36104,37282:36896,37283:20419,37284:20596,37285:21063,37286:21363,37287:24687,37288:25417,37289:26463,37290:28204,37291:36275,37292:36895,37293:20439,37294:23646,37295:36042,37296:26063,37297:32154,37298:21330,37299:34966,37300:20854,37301:25539,37302:23384,37303:23403,37304:23562,37305:25613,37306:26449,37307:36956,37308:20182,37309:22810,37310:22826,37311:27760,37312:35409,37313:21822,37314:22549,37315:22949,37316:24816,37317:25171,37318:26561,37319:33333,37320:26965,37321:38464,37322:39364,37323:39464,37324:20307,37325:22534,37326:23550,37327:32784,37328:23729,37329:24111,37330:24453,37331:24608,37332:24907,37333:25140,37334:26367,37335:27888,37336:28382,37337:32974,37338:33151,37339:33492,37340:34955,37341:36024,37342:36864,37343:36910,37344:38538,37345:40667,37346:39899,37347:20195,37348:21488,37349:22823,37350:31532,37351:37261,37352:38988,37353:40441,37354:28381,37355:28711,37356:21331,37357:21828,37358:23429,37359:25176,37360:25246,37361:25299,37362:27810,37363:28655,37364:29730,37365:35351,37366:37944,37367:28609,37368:35582,37369:33592,37370:20967,37371:34552,37372:21482,37440:21481,37441:20294,37442:36948,37443:36784,37444:22890,37445:33073,37446:24061,37447:31466,37448:36799,37449:26842,37450:35895,37451:29432,37452:40008,37453:27197,37454:35504,37455:20025,37456:21336,37457:22022,37458:22374,37459:25285,37460:25506,37461:26086,37462:27470,37463:28129,37464:28251,37465:28845,37466:30701,37467:31471,37468:31658,37469:32187,37470:32829,37471:32966,37472:34507,37473:35477,37474:37723,37475:22243,37476:22727,37477:24382,37478:26029,37479:26262,37480:27264,37481:27573,37482:30007,37483:35527,37484:20516,37485:30693,37486:22320,37487:24347,37488:24677,37489:26234,37490:27744,37491:30196,37492:31258,37493:32622,37494:33268,37495:34584,37496:36933,37497:39347,37498:31689,37499:30044,37500:31481,37501:31569,37502:33988,37504:36880,37505:31209,37506:31378,37507:33590,37508:23265,37509:30528,37510:20013,37511:20210,37512:23449,37513:24544,37514:25277,37515:26172,37516:26609,37517:27880,37518:34411,37519:34935,37520:35387,37521:37198,37522:37619,37523:39376,37524:27159,37525:28710,37526:29482,37527:33511,37528:33879,37529:36015,37530:19969,37531:20806,37532:20939,37533:21899,37534:23541,37535:24086,37536:24115,37537:24193,37538:24340,37539:24373,37540:24427,37541:24500,37542:25074,37543:25361,37544:26274,37545:26397,37546:28526,37547:29266,37548:30010,37549:30522,37550:32884,37551:33081,37552:33144,37553:34678,37554:35519,37555:35548,37556:36229,37557:36339,37558:37530,37559:38263,37560:38914,37561:40165,37562:21189,37563:25431,37564:30452,37565:26389,37566:27784,37567:29645,37568:36035,37569:37806,37570:38515,37571:27941,37572:22684,37573:26894,37574:27084,37575:36861,37576:37786,37577:30171,37578:36890,37579:22618,37580:26626,37581:25524,37582:27131,37583:20291,37584:28460,37585:26584,37586:36795,37587:34086,37588:32180,37589:37716,37590:26943,37591:28528,37592:22378,37593:22775,37594:23340,37595:32044,37596:29226,37597:21514,37598:37347,37599:40372,37600:20141,37601:20302,37602:20572,37603:20597,37604:21059,37605:35998,37606:21576,37607:22564,37608:23450,37609:24093,37610:24213,37611:24237,37612:24311,37613:24351,37614:24716,37615:25269,37616:25402,37617:25552,37618:26799,37619:27712,37620:30855,37621:31118,37622:31243,37623:32224,37624:33351,37625:35330,37626:35558,37627:36420,37628:36883,37696:37048,37697:37165,37698:37336,37699:40718,37700:27877,37701:25688,37702:25826,37703:25973,37704:28404,37705:30340,37706:31515,37707:36969,37708:37841,37709:28346,37710:21746,37711:24505,37712:25764,37713:36685,37714:36845,37715:37444,37716:20856,37717:22635,37718:22825,37719:23637,37720:24215,37721:28155,37722:32399,37723:29980,37724:36028,37725:36578,37726:39003,37727:28857,37728:20253,37729:27583,37730:28593,37731:3e4,37732:38651,37733:20814,37734:21520,37735:22581,37736:22615,37737:22956,37738:23648,37739:24466,37740:26007,37741:26460,37742:28193,37743:30331,37744:33759,37745:36077,37746:36884,37747:37117,37748:37709,37749:30757,37750:30778,37751:21162,37752:24230,37753:22303,37754:22900,37755:24594,37756:20498,37757:20826,37758:20908,37760:20941,37761:20992,37762:21776,37763:22612,37764:22616,37765:22871,37766:23445,37767:23798,37768:23947,37769:24764,37770:25237,37771:25645,37772:26481,37773:26691,37774:26812,37775:26847,37776:30423,37777:28120,37778:28271,37779:28059,37780:28783,37781:29128,37782:24403,37783:30168,37784:31095,37785:31561,37786:31572,37787:31570,37788:31958,37789:32113,37790:21040,37791:33891,37792:34153,37793:34276,37794:35342,37795:35588,37796:35910,37797:36367,37798:36867,37799:36879,37800:37913,37801:38518,37802:38957,37803:39472,37804:38360,37805:20685,37806:21205,37807:21516,37808:22530,37809:23566,37810:24999,37811:25758,37812:27934,37813:30643,37814:31461,37815:33012,37816:33796,37817:36947,37818:37509,37819:23776,37820:40199,37821:21311,37822:24471,37823:24499,37824:28060,37825:29305,37826:30563,37827:31167,37828:31716,37829:27602,37830:29420,37831:35501,37832:26627,37833:27233,37834:20984,37835:31361,37836:26932,37837:23626,37838:40182,37839:33515,37840:23493,37841:37193,37842:28702,37843:22136,37844:23663,37845:24775,37846:25958,37847:27788,37848:35930,37849:36929,37850:38931,37851:21585,37852:26311,37853:37389,37854:22856,37855:37027,37856:20869,37857:20045,37858:20970,37859:34201,37860:35598,37861:28760,37862:25466,37863:37707,37864:26978,37865:39348,37866:32260,37867:30071,37868:21335,37869:26976,37870:36575,37871:38627,37872:27741,37873:20108,37874:23612,37875:24336,37876:36841,37877:21250,37878:36049,37879:32905,37880:34425,37881:24319,37882:26085,37883:20083,37884:20837,37952:22914,37953:23615,37954:38894,37955:20219,37956:22922,37957:24525,37958:35469,37959:28641,37960:31152,37961:31074,37962:23527,37963:33905,37964:29483,37965:29105,37966:24180,37967:24565,37968:25467,37969:25754,37970:29123,37971:31896,37972:20035,37973:24316,37974:20043,37975:22492,37976:22178,37977:24745,37978:28611,37979:32013,37980:33021,37981:33075,37982:33215,37983:36786,37984:35223,37985:34468,37986:24052,37987:25226,37988:25773,37989:35207,37990:26487,37991:27874,37992:27966,37993:29750,37994:30772,37995:23110,37996:32629,37997:33453,37998:39340,37999:20467,38e3:24259,38001:25309,38002:25490,38003:25943,38004:26479,38005:30403,38006:29260,38007:32972,38008:32954,38009:36649,38010:37197,38011:20493,38012:22521,38013:23186,38014:26757,38016:26995,38017:29028,38018:29437,38019:36023,38020:22770,38021:36064,38022:38506,38023:36889,38024:34687,38025:31204,38026:30695,38027:33833,38028:20271,38029:21093,38030:21338,38031:25293,38032:26575,38033:27850,38034:30333,38035:31636,38036:31893,38037:33334,38038:34180,38039:36843,38040:26333,38041:28448,38042:29190,38043:32283,38044:33707,38045:39361,38046:40614,38047:20989,38048:31665,38049:30834,38050:31672,38051:32903,38052:31560,38053:27368,38054:24161,38055:32908,38056:30033,38057:30048,38058:20843,38059:37474,38060:28300,38061:30330,38062:37271,38063:39658,38064:20240,38065:32624,38066:25244,38067:31567,38068:38309,38069:40169,38070:22138,38071:22617,38072:34532,38073:38588,38074:20276,38075:21028,38076:21322,38077:21453,38078:21467,38079:24070,38080:25644,38081:26001,38082:26495,38083:27710,38084:27726,38085:29256,38086:29359,38087:29677,38088:30036,38089:32321,38090:33324,38091:34281,38092:36009,38093:31684,38094:37318,38095:29033,38096:38930,38097:39151,38098:25405,38099:26217,38100:30058,38101:30436,38102:30928,38103:34115,38104:34542,38105:21290,38106:21329,38107:21542,38108:22915,38109:24199,38110:24444,38111:24754,38112:25161,38113:25209,38114:25259,38115:26e3,38116:27604,38117:27852,38118:30130,38119:30382,38120:30865,38121:31192,38122:32203,38123:32631,38124:32933,38125:34987,38126:35513,38127:36027,38128:36991,38129:38750,38130:39131,38131:27147,38132:31800,38133:20633,38134:23614,38135:24494,38136:26503,38137:27608,38138:29749,38139:30473,38140:32654,38208:40763,38209:26570,38210:31255,38211:21305,38212:30091,38213:39661,38214:24422,38215:33181,38216:33777,38217:32920,38218:24380,38219:24517,38220:30050,38221:31558,38222:36924,38223:26727,38224:23019,38225:23195,38226:32016,38227:30334,38228:35628,38229:20469,38230:24426,38231:27161,38232:27703,38233:28418,38234:29922,38235:31080,38236:34920,38237:35413,38238:35961,38239:24287,38240:25551,38241:30149,38242:31186,38243:33495,38244:37672,38245:37618,38246:33948,38247:34541,38248:39981,38249:21697,38250:24428,38251:25996,38252:27996,38253:28693,38254:36007,38255:36051,38256:38971,38257:25935,38258:29942,38259:19981,38260:20184,38261:22496,38262:22827,38263:23142,38264:23500,38265:20904,38266:24067,38267:24220,38268:24598,38269:25206,38270:25975,38272:26023,38273:26222,38274:28014,38275:29238,38276:31526,38277:33104,38278:33178,38279:33433,38280:35676,38281:36e3,38282:36070,38283:36212,38284:38428,38285:38468,38286:20398,38287:25771,38288:27494,38289:33310,38290:33889,38291:34154,38292:37096,38293:23553,38294:26963,38295:39080,38296:33914,38297:34135,38298:20239,38299:21103,38300:24489,38301:24133,38302:26381,38303:31119,38304:33145,38305:35079,38306:35206,38307:28149,38308:24343,38309:25173,38310:27832,38311:20175,38312:29289,38313:39826,38314:20998,38315:21563,38316:22132,38317:22707,38318:24996,38319:25198,38320:28954,38321:22894,38322:31881,38323:31966,38324:32027,38325:38640,38326:25991,38327:32862,38328:19993,38329:20341,38330:20853,38331:22592,38332:24163,38333:24179,38334:24330,38335:26564,38336:20006,38337:34109,38338:38281,38339:38491,38340:31859,38341:38913,38342:20731,38343:22721,38344:30294,38345:30887,38346:21029,38347:30629,38348:34065,38349:31622,38350:20559,38351:22793,38352:29255,38353:31687,38354:32232,38355:36794,38356:36820,38357:36941,38358:20415,38359:21193,38360:23081,38361:24321,38362:38829,38363:20445,38364:33303,38365:37610,38366:22275,38367:25429,38368:27497,38369:29995,38370:35036,38371:36628,38372:31298,38373:21215,38374:22675,38375:24917,38376:25098,38377:26286,38378:27597,38379:31807,38380:33769,38381:20515,38382:20472,38383:21253,38384:21574,38385:22577,38386:22857,38387:23453,38388:23792,38389:23791,38390:23849,38391:24214,38392:25265,38393:25447,38394:25918,38395:26041,38396:26379,38464:27861,38465:27873,38466:28921,38467:30770,38468:32299,38469:32990,38470:33459,38471:33804,38472:34028,38473:34562,38474:35090,38475:35370,38476:35914,38477:37030,38478:37586,38479:39165,38480:40179,38481:40300,38482:20047,38483:20129,38484:20621,38485:21078,38486:22346,38487:22952,38488:24125,38489:24536,38490:24537,38491:25151,38492:26292,38493:26395,38494:26576,38495:26834,38496:20882,38497:32033,38498:32938,38499:33192,38500:35584,38501:35980,38502:36031,38503:37502,38504:38450,38505:21536,38506:38956,38507:21271,38508:20693,38509:21340,38510:22696,38511:25778,38512:26420,38513:29287,38514:30566,38515:31302,38516:37350,38517:21187,38518:27809,38519:27526,38520:22528,38521:24140,38522:22868,38523:26412,38524:32763,38525:20961,38526:30406,38528:25705,38529:30952,38530:39764,38531:40635,38532:22475,38533:22969,38534:26151,38535:26522,38536:27598,38537:21737,38538:27097,38539:24149,38540:33180,38541:26517,38542:39850,38543:26622,38544:40018,38545:26717,38546:20134,38547:20451,38548:21448,38549:25273,38550:26411,38551:27819,38552:36804,38553:20397,38554:32365,38555:40639,38556:19975,38557:24930,38558:28288,38559:28459,38560:34067,38561:21619,38562:26410,38563:39749,38564:24051,38565:31637,38566:23724,38567:23494,38568:34588,38569:28234,38570:34001,38571:31252,38572:33032,38573:22937,38574:31885,38575:27665,38576:30496,38577:21209,38578:22818,38579:28961,38580:29279,38581:30683,38582:38695,38583:40289,38584:26891,38585:23167,38586:23064,38587:20901,38588:21517,38589:21629,38590:26126,38591:30431,38592:36855,38593:37528,38594:40180,38595:23018,38596:29277,38597:28357,38598:20813,38599:26825,38600:32191,38601:32236,38602:38754,38603:40634,38604:25720,38605:27169,38606:33538,38607:22916,38608:23391,38609:27611,38610:29467,38611:30450,38612:32178,38613:32791,38614:33945,38615:20786,38616:26408,38617:40665,38618:30446,38619:26466,38620:21247,38621:39173,38622:23588,38623:25147,38624:31870,38625:36016,38626:21839,38627:24758,38628:32011,38629:38272,38630:21249,38631:20063,38632:20918,38633:22812,38634:29242,38635:32822,38636:37326,38637:24357,38638:30690,38639:21380,38640:24441,38641:32004,38642:34220,38643:35379,38644:36493,38645:38742,38646:26611,38647:34222,38648:37971,38649:24841,38650:24840,38651:27833,38652:30290,38720:35565,38721:36664,38722:21807,38723:20305,38724:20778,38725:21191,38726:21451,38727:23461,38728:24189,38729:24736,38730:24962,38731:25558,38732:26377,38733:26586,38734:28263,38735:28044,38736:29494,38737:29495,38738:30001,38739:31056,38740:35029,38741:35480,38742:36938,38743:37009,38744:37109,38745:38596,38746:34701,38747:22805,38748:20104,38749:20313,38750:19982,38751:35465,38752:36671,38753:38928,38754:20653,38755:24188,38756:22934,38757:23481,38758:24248,38759:25562,38760:25594,38761:25793,38762:26332,38763:26954,38764:27096,38765:27915,38766:28342,38767:29076,38768:29992,38769:31407,38770:32650,38771:32768,38772:33865,38773:33993,38774:35201,38775:35617,38776:36362,38777:36965,38778:38525,38779:39178,38780:24958,38781:25233,38782:27442,38784:27779,38785:28020,38786:32716,38787:32764,38788:28096,38789:32645,38790:34746,38791:35064,38792:26469,38793:33713,38794:38972,38795:38647,38796:27931,38797:32097,38798:33853,38799:37226,38800:20081,38801:21365,38802:23888,38803:27396,38804:28651,38805:34253,38806:34349,38807:35239,38808:21033,38809:21519,38810:23653,38811:26446,38812:26792,38813:29702,38814:29827,38815:30178,38816:35023,38817:35041,38818:37324,38819:38626,38820:38520,38821:24459,38822:29575,38823:31435,38824:33870,38825:25504,38826:30053,38827:21129,38828:27969,38829:28316,38830:29705,38831:30041,38832:30827,38833:31890,38834:38534,38835:31452,38836:40845,38837:20406,38838:24942,38839:26053,38840:34396,38841:20102,38842:20142,38843:20698,38844:20001,38845:20940,38846:23534,38847:26009,38848:26753,38849:28092,38850:29471,38851:30274,38852:30637,38853:31260,38854:31975,38855:33391,38856:35538,38857:36988,38858:37327,38859:38517,38860:38936,38861:21147,38862:32209,38863:20523,38864:21400,38865:26519,38866:28107,38867:29136,38868:29747,38869:33256,38870:36650,38871:38563,38872:40023,38873:40607,38874:29792,38875:22593,38876:28057,38877:32047,38878:39006,38879:20196,38880:20278,38881:20363,38882:20919,38883:21169,38884:23994,38885:24604,38886:29618,38887:31036,38888:33491,38889:37428,38890:38583,38891:38646,38892:38666,38893:40599,38894:40802,38895:26278,38896:27508,38897:21015,38898:21155,38899:28872,38900:35010,38901:24265,38902:24651,38903:24976,38904:28451,38905:29001,38906:31806,38907:32244,38908:32879,38976:34030,38977:36899,38978:37676,38979:21570,38980:39791,38981:27347,38982:28809,38983:36034,38984:36335,38985:38706,38986:21172,38987:23105,38988:24266,38989:24324,38990:26391,38991:27004,38992:27028,38993:28010,38994:28431,38995:29282,38996:29436,38997:31725,38998:32769,38999:32894,39e3:34635,39001:37070,39002:20845,39003:40595,39004:31108,39005:32907,39006:37682,39007:35542,39008:20525,39009:21644,39010:35441,39011:27498,39012:36036,39013:33031,39014:24785,39015:26528,39016:40434,39017:20121,39018:20120,39019:39952,39020:35435,39021:34241,39022:34152,39023:26880,39024:28286,39025:30871,39026:33109,39071:24332,39072:19984,39073:19989,39074:20010,39075:20017,39076:20022,39077:20028,39078:20031,39079:20034,39080:20054,39081:20056,39082:20098,39083:20101,39084:35947,39085:20106,39086:33298,39087:24333,39088:20110,39089:20126,39090:20127,39091:20128,39092:20130,39093:20144,39094:20147,39095:20150,39096:20174,39097:20173,39098:20164,39099:20166,39100:20162,39101:20183,39102:20190,39103:20205,39104:20191,39105:20215,39106:20233,39107:20314,39108:20272,39109:20315,39110:20317,39111:20311,39112:20295,39113:20342,39114:20360,39115:20367,39116:20376,39117:20347,39118:20329,39119:20336,39120:20369,39121:20335,39122:20358,39123:20374,39124:20760,39125:20436,39126:20447,39127:20430,39128:20440,39129:20443,39130:20433,39131:20442,39132:20432,39133:20452,39134:20453,39135:20506,39136:20520,39137:20500,39138:20522,39139:20517,39140:20485,39141:20252,39142:20470,39143:20513,39144:20521,39145:20524,39146:20478,39147:20463,39148:20497,39149:20486,39150:20547,39151:20551,39152:26371,39153:20565,39154:20560,39155:20552,39156:20570,39157:20566,39158:20588,39159:20600,39160:20608,39161:20634,39162:20613,39163:20660,39164:20658,39232:20681,39233:20682,39234:20659,39235:20674,39236:20694,39237:20702,39238:20709,39239:20717,39240:20707,39241:20718,39242:20729,39243:20725,39244:20745,39245:20737,39246:20738,39247:20758,39248:20757,39249:20756,39250:20762,39251:20769,39252:20794,39253:20791,39254:20796,39255:20795,39256:20799,39257:20800,39258:20818,39259:20812,39260:20820,39261:20834,39262:31480,39263:20841,39264:20842,39265:20846,39266:20864,39267:20866,39268:22232,39269:20876,39270:20873,39271:20879,39272:20881,39273:20883,39274:20885,39275:20886,39276:20900,39277:20902,39278:20898,39279:20905,39280:20906,39281:20907,39282:20915,39283:20913,39284:20914,39285:20912,39286:20917,39287:20925,39288:20933,39289:20937,39290:20955,39291:20960,39292:34389,39293:20969,39294:20973,39296:20976,39297:20981,39298:20990,39299:20996,39300:21003,39301:21012,39302:21006,39303:21031,39304:21034,39305:21038,39306:21043,39307:21049,39308:21071,39309:21060,39310:21067,39311:21068,39312:21086,39313:21076,39314:21098,39315:21108,39316:21097,39317:21107,39318:21119,39319:21117,39320:21133,39321:21140,39322:21138,39323:21105,39324:21128,39325:21137,39326:36776,39327:36775,39328:21164,39329:21165,39330:21180,39331:21173,39332:21185,39333:21197,39334:21207,39335:21214,39336:21219,39337:21222,39338:39149,39339:21216,39340:21235,39341:21237,39342:21240,39343:21241,39344:21254,39345:21256,39346:30008,39347:21261,39348:21264,39349:21263,39350:21269,39351:21274,39352:21283,39353:21295,39354:21297,39355:21299,39356:21304,39357:21312,39358:21318,39359:21317,39360:19991,39361:21321,39362:21325,39363:20950,39364:21342,39365:21353,39366:21358,39367:22808,39368:21371,39369:21367,39370:21378,39371:21398,39372:21408,39373:21414,39374:21413,39375:21422,39376:21424,39377:21430,39378:21443,39379:31762,39380:38617,39381:21471,39382:26364,39383:29166,39384:21486,39385:21480,39386:21485,39387:21498,39388:21505,39389:21565,39390:21568,39391:21548,39392:21549,39393:21564,39394:21550,39395:21558,39396:21545,39397:21533,39398:21582,39399:21647,39400:21621,39401:21646,39402:21599,39403:21617,39404:21623,39405:21616,39406:21650,39407:21627,39408:21632,39409:21622,39410:21636,39411:21648,39412:21638,39413:21703,39414:21666,39415:21688,39416:21669,39417:21676,39418:21700,39419:21704,39420:21672,39488:21675,39489:21698,39490:21668,39491:21694,39492:21692,39493:21720,39494:21733,39495:21734,39496:21775,39497:21780,39498:21757,39499:21742,39500:21741,39501:21754,39502:21730,39503:21817,39504:21824,39505:21859,39506:21836,39507:21806,39508:21852,39509:21829,39510:21846,39511:21847,39512:21816,39513:21811,39514:21853,39515:21913,39516:21888,39517:21679,39518:21898,39519:21919,39520:21883,39521:21886,39522:21912,39523:21918,39524:21934,39525:21884,39526:21891,39527:21929,39528:21895,39529:21928,39530:21978,39531:21957,39532:21983,39533:21956,39534:21980,39535:21988,39536:21972,39537:22036,39538:22007,39539:22038,39540:22014,39541:22013,39542:22043,39543:22009,39544:22094,39545:22096,39546:29151,39547:22068,39548:22070,39549:22066,39550:22072,39552:22123,39553:22116,39554:22063,39555:22124,39556:22122,39557:22150,39558:22144,39559:22154,39560:22176,39561:22164,39562:22159,39563:22181,39564:22190,39565:22198,39566:22196,39567:22210,39568:22204,39569:22209,39570:22211,39571:22208,39572:22216,39573:22222,39574:22225,39575:22227,39576:22231,39577:22254,39578:22265,39579:22272,39580:22271,39581:22276,39582:22281,39583:22280,39584:22283,39585:22285,39586:22291,39587:22296,39588:22294,39589:21959,39590:22300,39591:22310,39592:22327,39593:22328,39594:22350,39595:22331,39596:22336,39597:22351,39598:22377,39599:22464,39600:22408,39601:22369,39602:22399,39603:22409,39604:22419,39605:22432,39606:22451,39607:22436,39608:22442,39609:22448,39610:22467,39611:22470,39612:22484,39613:22482,39614:22483,39615:22538,39616:22486,39617:22499,39618:22539,39619:22553,39620:22557,39621:22642,39622:22561,39623:22626,39624:22603,39625:22640,39626:27584,39627:22610,39628:22589,39629:22649,39630:22661,39631:22713,39632:22687,39633:22699,39634:22714,39635:22750,39636:22715,39637:22712,39638:22702,39639:22725,39640:22739,39641:22737,39642:22743,39643:22745,39644:22744,39645:22757,39646:22748,39647:22756,39648:22751,39649:22767,39650:22778,39651:22777,39652:22779,39653:22780,39654:22781,39655:22786,39656:22794,39657:22800,39658:22811,39659:26790,39660:22821,39661:22828,39662:22829,39663:22834,39664:22840,39665:22846,39666:31442,39667:22869,39668:22864,39669:22862,39670:22874,39671:22872,39672:22882,39673:22880,\n39674:22887,39675:22892,39676:22889,39744:22904,39745:22913,39746:22941,39747:20318,39748:20395,39749:22947,39750:22962,39751:22982,39752:23016,39753:23004,39754:22925,39755:23001,39756:23002,39757:23077,39758:23071,39759:23057,39760:23068,39761:23049,39762:23066,39763:23104,39764:23148,39765:23113,39766:23093,39767:23094,39768:23138,39769:23146,39770:23194,39771:23228,39772:23230,39773:23243,39774:23234,39775:23229,39776:23267,39777:23255,39778:23270,39779:23273,39780:23254,39781:23290,39782:23291,39783:23308,39784:23307,39785:23318,39786:23346,39787:23248,39788:23338,39789:23350,39790:23358,39791:23363,39792:23365,39793:23360,39794:23377,39795:23381,39796:23386,39797:23387,39798:23397,39799:23401,39800:23408,39801:23411,39802:23413,39803:23416,39804:25992,39805:23418,39806:23424,39808:23427,39809:23462,39810:23480,39811:23491,39812:23495,39813:23497,39814:23508,39815:23504,39816:23524,39817:23526,39818:23522,39819:23518,39820:23525,39821:23531,39822:23536,39823:23542,39824:23539,39825:23557,39826:23559,39827:23560,39828:23565,39829:23571,39830:23584,39831:23586,39832:23592,39833:23608,39834:23609,39835:23617,39836:23622,39837:23630,39838:23635,39839:23632,39840:23631,39841:23409,39842:23660,39843:23662,39844:20066,39845:23670,39846:23673,39847:23692,39848:23697,39849:23700,39850:22939,39851:23723,39852:23739,39853:23734,39854:23740,39855:23735,39856:23749,39857:23742,39858:23751,39859:23769,39860:23785,39861:23805,39862:23802,39863:23789,39864:23948,39865:23786,39866:23819,39867:23829,39868:23831,39869:23900,39870:23839,39871:23835,39872:23825,39873:23828,39874:23842,39875:23834,39876:23833,39877:23832,39878:23884,39879:23890,39880:23886,39881:23883,39882:23916,39883:23923,39884:23926,39885:23943,39886:23940,39887:23938,39888:23970,39889:23965,39890:23980,39891:23982,39892:23997,39893:23952,39894:23991,39895:23996,39896:24009,39897:24013,39898:24019,39899:24018,39900:24022,39901:24027,39902:24043,39903:24050,39904:24053,39905:24075,39906:24090,39907:24089,39908:24081,39909:24091,39910:24118,39911:24119,39912:24132,39913:24131,39914:24128,39915:24142,39916:24151,39917:24148,39918:24159,39919:24162,39920:24164,39921:24135,39922:24181,39923:24182,39924:24186,39925:40636,39926:24191,39927:24224,39928:24257,39929:24258,39930:24264,39931:24272,39932:24271,4e4:24278,40001:24291,40002:24285,40003:24282,40004:24283,40005:24290,40006:24289,40007:24296,40008:24297,40009:24300,40010:24305,40011:24307,40012:24304,40013:24308,40014:24312,40015:24318,40016:24323,40017:24329,40018:24413,40019:24412,40020:24331,40021:24337,40022:24342,40023:24361,40024:24365,40025:24376,40026:24385,40027:24392,40028:24396,40029:24398,40030:24367,40031:24401,40032:24406,40033:24407,40034:24409,40035:24417,40036:24429,40037:24435,40038:24439,40039:24451,40040:24450,40041:24447,40042:24458,40043:24456,40044:24465,40045:24455,40046:24478,40047:24473,40048:24472,40049:24480,40050:24488,40051:24493,40052:24508,40053:24534,40054:24571,40055:24548,40056:24568,40057:24561,40058:24541,40059:24755,40060:24575,40061:24609,40062:24672,40064:24601,40065:24592,40066:24617,40067:24590,40068:24625,40069:24603,40070:24597,40071:24619,40072:24614,40073:24591,40074:24634,40075:24666,40076:24641,40077:24682,40078:24695,40079:24671,40080:24650,40081:24646,40082:24653,40083:24675,40084:24643,40085:24676,40086:24642,40087:24684,40088:24683,40089:24665,40090:24705,40091:24717,40092:24807,40093:24707,40094:24730,40095:24708,40096:24731,40097:24726,40098:24727,40099:24722,40100:24743,40101:24715,40102:24801,40103:24760,40104:24800,40105:24787,40106:24756,40107:24560,40108:24765,40109:24774,40110:24757,40111:24792,40112:24909,40113:24853,40114:24838,40115:24822,40116:24823,40117:24832,40118:24820,40119:24826,40120:24835,40121:24865,40122:24827,40123:24817,40124:24845,40125:24846,40126:24903,40127:24894,40128:24872,40129:24871,40130:24906,40131:24895,40132:24892,40133:24876,40134:24884,40135:24893,40136:24898,40137:24900,40138:24947,40139:24951,40140:24920,40141:24921,40142:24922,40143:24939,40144:24948,40145:24943,40146:24933,40147:24945,40148:24927,40149:24925,40150:24915,40151:24949,40152:24985,40153:24982,40154:24967,40155:25004,40156:24980,40157:24986,40158:24970,40159:24977,40160:25003,40161:25006,40162:25036,40163:25034,40164:25033,40165:25079,40166:25032,40167:25027,40168:25030,40169:25018,40170:25035,40171:32633,40172:25037,40173:25062,40174:25059,40175:25078,40176:25082,40177:25076,40178:25087,40179:25085,40180:25084,40181:25086,40182:25088,40183:25096,40184:25097,40185:25101,40186:25100,40187:25108,40188:25115,40256:25118,40257:25121,40258:25130,40259:25134,40260:25136,40261:25138,40262:25139,40263:25153,40264:25166,40265:25182,40266:25187,40267:25179,40268:25184,40269:25192,40270:25212,40271:25218,40272:25225,40273:25214,40274:25234,40275:25235,40276:25238,40277:25300,40278:25219,40279:25236,40280:25303,40281:25297,40282:25275,40283:25295,40284:25343,40285:25286,40286:25812,40287:25288,40288:25308,40289:25292,40290:25290,40291:25282,40292:25287,40293:25243,40294:25289,40295:25356,40296:25326,40297:25329,40298:25383,40299:25346,40300:25352,40301:25327,40302:25333,40303:25424,40304:25406,40305:25421,40306:25628,40307:25423,40308:25494,40309:25486,40310:25472,40311:25515,40312:25462,40313:25507,40314:25487,40315:25481,40316:25503,40317:25525,40318:25451,40320:25449,40321:25534,40322:25577,40323:25536,40324:25542,40325:25571,40326:25545,40327:25554,40328:25590,40329:25540,40330:25622,40331:25652,40332:25606,40333:25619,40334:25638,40335:25654,40336:25885,40337:25623,40338:25640,40339:25615,40340:25703,40341:25711,40342:25718,40343:25678,40344:25898,40345:25749,40346:25747,40347:25765,40348:25769,40349:25736,40350:25788,40351:25818,40352:25810,40353:25797,40354:25799,40355:25787,40356:25816,40357:25794,40358:25841,40359:25831,40360:33289,40361:25824,40362:25825,40363:25260,40364:25827,40365:25839,40366:25900,40367:25846,40368:25844,40369:25842,40370:25850,40371:25856,40372:25853,40373:25880,40374:25884,40375:25861,40376:25892,40377:25891,40378:25899,40379:25908,40380:25909,40381:25911,40382:25910,40383:25912,40384:30027,40385:25928,40386:25942,40387:25941,40388:25933,40389:25944,40390:25950,40391:25949,40392:25970,40393:25976,40394:25986,40395:25987,40396:35722,40397:26011,40398:26015,40399:26027,40400:26039,40401:26051,40402:26054,40403:26049,40404:26052,40405:26060,40406:26066,40407:26075,40408:26073,40409:26080,40410:26081,40411:26097,40412:26482,40413:26122,40414:26115,40415:26107,40416:26483,40417:26165,40418:26166,40419:26164,40420:26140,40421:26191,40422:26180,40423:26185,40424:26177,40425:26206,40426:26205,40427:26212,40428:26215,40429:26216,40430:26207,40431:26210,40432:26224,40433:26243,40434:26248,40435:26254,40436:26249,40437:26244,40438:26264,40439:26269,40440:26305,40441:26297,40442:26313,40443:26302,40444:26300,40512:26308,40513:26296,40514:26326,40515:26330,40516:26336,40517:26175,40518:26342,40519:26345,40520:26352,40521:26357,40522:26359,40523:26383,40524:26390,40525:26398,40526:26406,40527:26407,40528:38712,40529:26414,40530:26431,40531:26422,40532:26433,40533:26424,40534:26423,40535:26438,40536:26462,40537:26464,40538:26457,40539:26467,40540:26468,40541:26505,40542:26480,40543:26537,40544:26492,40545:26474,40546:26508,40547:26507,40548:26534,40549:26529,40550:26501,40551:26551,40552:26607,40553:26548,40554:26604,40555:26547,40556:26601,40557:26552,40558:26596,40559:26590,40560:26589,40561:26594,40562:26606,40563:26553,40564:26574,40565:26566,40566:26599,40567:27292,40568:26654,40569:26694,40570:26665,40571:26688,40572:26701,40573:26674,40574:26702,40576:26803,40577:26667,40578:26713,40579:26723,40580:26743,40581:26751,40582:26783,40583:26767,40584:26797,40585:26772,40586:26781,40587:26779,40588:26755,40589:27310,40590:26809,40591:26740,40592:26805,40593:26784,40594:26810,40595:26895,40596:26765,40597:26750,40598:26881,40599:26826,40600:26888,40601:26840,40602:26914,40603:26918,40604:26849,40605:26892,40606:26829,40607:26836,40608:26855,40609:26837,40610:26934,40611:26898,40612:26884,40613:26839,40614:26851,40615:26917,40616:26873,40617:26848,40618:26863,40619:26920,40620:26922,40621:26906,40622:26915,40623:26913,40624:26822,40625:27001,40626:26999,40627:26972,40628:27e3,40629:26987,40630:26964,40631:27006,40632:26990,40633:26937,40634:26996,40635:26941,40636:26969,40637:26928,40638:26977,40639:26974,40640:26973,40641:27009,40642:26986,40643:27058,40644:27054,40645:27088,40646:27071,40647:27073,40648:27091,40649:27070,40650:27086,40651:23528,40652:27082,40653:27101,40654:27067,40655:27075,40656:27047,40657:27182,40658:27025,40659:27040,40660:27036,40661:27029,40662:27060,40663:27102,40664:27112,40665:27138,40666:27163,40667:27135,40668:27402,40669:27129,40670:27122,40671:27111,40672:27141,40673:27057,40674:27166,40675:27117,40676:27156,40677:27115,40678:27146,40679:27154,40680:27329,40681:27171,40682:27155,40683:27204,40684:27148,40685:27250,40686:27190,40687:27256,40688:27207,40689:27234,40690:27225,40691:27238,40692:27208,40693:27192,40694:27170,40695:27280,40696:27277,40697:27296,40698:27268,40699:27298,40700:27299,40768:27287,40769:34327,40770:27323,40771:27331,40772:27330,40773:27320,40774:27315,40775:27308,40776:27358,40777:27345,40778:27359,40779:27306,40780:27354,40781:27370,40782:27387,40783:27397,40784:34326,40785:27386,40786:27410,40787:27414,40788:39729,40789:27423,40790:27448,40791:27447,40792:30428,40793:27449,40794:39150,40795:27463,40796:27459,40797:27465,40798:27472,40799:27481,40800:27476,40801:27483,40802:27487,40803:27489,40804:27512,40805:27513,40806:27519,40807:27520,40808:27524,40809:27523,40810:27533,40811:27544,40812:27541,40813:27550,40814:27556,40815:27562,40816:27563,40817:27567,40818:27570,40819:27569,40820:27571,40821:27575,40822:27580,40823:27590,40824:27595,40825:27603,40826:27615,40827:27628,40828:27627,40829:27635,40830:27631,40832:40638,40833:27656,40834:27667,40835:27668,40836:27675,40837:27684,40838:27683,40839:27742,40840:27733,40841:27746,40842:27754,40843:27778,40844:27789,40845:27802,40846:27777,40847:27803,40848:27774,40849:27752,40850:27763,40851:27794,40852:27792,40853:27844,40854:27889,40855:27859,40856:27837,40857:27863,40858:27845,40859:27869,40860:27822,40861:27825,40862:27838,40863:27834,40864:27867,40865:27887,40866:27865,40867:27882,40868:27935,40869:34893,40870:27958,40871:27947,40872:27965,40873:27960,40874:27929,40875:27957,40876:27955,40877:27922,40878:27916,40879:28003,40880:28051,40881:28004,40882:27994,40883:28025,40884:27993,40885:28046,40886:28053,40887:28644,40888:28037,40889:28153,40890:28181,40891:28170,40892:28085,40893:28103,40894:28134,40895:28088,40896:28102,40897:28140,40898:28126,40899:28108,40900:28136,40901:28114,40902:28101,40903:28154,40904:28121,40905:28132,40906:28117,40907:28138,40908:28142,40909:28205,40910:28270,40911:28206,40912:28185,40913:28274,40914:28255,40915:28222,40916:28195,40917:28267,40918:28203,40919:28278,40920:28237,40921:28191,40922:28227,40923:28218,40924:28238,40925:28196,40926:28415,40927:28189,40928:28216,40929:28290,40930:28330,40931:28312,40932:28361,40933:28343,40934:28371,40935:28349,40936:28335,40937:28356,40938:28338,40939:28372,40940:28373,40941:28303,40942:28325,40943:28354,40944:28319,40945:28481,40946:28433,40947:28748,40948:28396,40949:28408,40950:28414,40951:28479,40952:28402,40953:28465,40954:28399,40955:28466,40956:28364,161:65377,162:65378,163:65379,164:65380,165:65381,166:65382,167:65383,168:65384,169:65385,170:65386,171:65387,172:65388,173:65389,174:65390,175:65391,176:65392,177:65393,178:65394,179:65395,180:65396,181:65397,182:65398,183:65399,184:65400,185:65401,186:65402,187:65403,188:65404,189:65405,190:65406,191:65407,192:65408,193:65409,194:65410,195:65411,196:65412,197:65413,198:65414,199:65415,200:65416,201:65417,202:65418,203:65419,204:65420,205:65421,206:65422,207:65423,208:65424,209:65425,210:65426,211:65427,212:65428,213:65429,214:65430,215:65431,216:65432,217:65433,218:65434,219:65435,220:65436,221:65437,222:65438,223:65439,57408:28478,57409:28435,57410:28407,57411:28550,57412:28538,57413:28536,57414:28545,57415:28544,57416:28527,57417:28507,57418:28659,57419:28525,57420:28546,57421:28540,57422:28504,57423:28558,57424:28561,57425:28610,57426:28518,57427:28595,57428:28579,57429:28577,57430:28580,57431:28601,57432:28614,57433:28586,57434:28639,57435:28629,57436:28652,57437:28628,57438:28632,57439:28657,57440:28654,57441:28635,57442:28681,57443:28683,57444:28666,57445:28689,57446:28673,57447:28687,57448:28670,57449:28699,57450:28698,57451:28532,57452:28701,57453:28696,57454:28703,57455:28720,57456:28734,57457:28722,57458:28753,57459:28771,57460:28825,57461:28818,57462:28847,57463:28913,57464:28844,57465:28856,57466:28851,57467:28846,57468:28895,57469:28875,57470:28893,57472:28889,57473:28937,57474:28925,57475:28956,57476:28953,57477:29029,57478:29013,57479:29064,57480:29030,57481:29026,57482:29004,57483:29014,57484:29036,57485:29071,57486:29179,57487:29060,57488:29077,57489:29096,57490:29100,57491:29143,57492:29113,57493:29118,57494:29138,57495:29129,57496:29140,57497:29134,57498:29152,57499:29164,57500:29159,57501:29173,57502:29180,57503:29177,57504:29183,57505:29197,57506:29200,57507:29211,57508:29224,57509:29229,57510:29228,57511:29232,57512:29234,57513:29243,57514:29244,57515:29247,57516:29248,57517:29254,57518:29259,57519:29272,57520:29300,57521:29310,57522:29314,57523:29313,57524:29319,57525:29330,57526:29334,57527:29346,57528:29351,57529:29369,57530:29362,57531:29379,57532:29382,57533:29380,57534:29390,57535:29394,57536:29410,57537:29408,57538:29409,57539:29433,57540:29431,57541:20495,57542:29463,57543:29450,57544:29468,57545:29462,57546:29469,57547:29492,57548:29487,57549:29481,57550:29477,57551:29502,57552:29518,57553:29519,57554:40664,57555:29527,57556:29546,57557:29544,57558:29552,57559:29560,57560:29557,57561:29563,57562:29562,57563:29640,57564:29619,57565:29646,57566:29627,57567:29632,57568:29669,57569:29678,57570:29662,57571:29858,57572:29701,57573:29807,57574:29733,57575:29688,57576:29746,57577:29754,57578:29781,57579:29759,57580:29791,57581:29785,57582:29761,57583:29788,57584:29801,57585:29808,57586:29795,57587:29802,57588:29814,57589:29822,57590:29835,57591:29854,57592:29863,57593:29898,57594:29903,57595:29908,57596:29681,57664:29920,57665:29923,57666:29927,57667:29929,57668:29934,57669:29938,57670:29936,57671:29937,57672:29944,57673:29943,57674:29956,57675:29955,57676:29957,57677:29964,57678:29966,57679:29965,57680:29973,57681:29971,57682:29982,57683:29990,57684:29996,57685:30012,57686:30020,57687:30029,57688:30026,57689:30025,57690:30043,57691:30022,57692:30042,57693:30057,57694:30052,57695:30055,57696:30059,57697:30061,57698:30072,57699:30070,57700:30086,57701:30087,57702:30068,57703:30090,57704:30089,57705:30082,57706:30100,57707:30106,57708:30109,57709:30117,57710:30115,57711:30146,57712:30131,57713:30147,57714:30133,57715:30141,57716:30136,57717:30140,57718:30129,57719:30157,57720:30154,57721:30162,57722:30169,57723:30179,57724:30174,57725:30206,57726:30207,57728:30204,57729:30209,57730:30192,57731:30202,57732:30194,57733:30195,57734:30219,57735:30221,57736:30217,57737:30239,57738:30247,57739:30240,57740:30241,57741:30242,57742:30244,57743:30260,57744:30256,57745:30267,57746:30279,57747:30280,57748:30278,57749:30300,57750:30296,57751:30305,57752:30306,57753:30312,57754:30313,57755:30314,57756:30311,57757:30316,57758:30320,57759:30322,57760:30326,57761:30328,57762:30332,57763:30336,57764:30339,57765:30344,57766:30347,57767:30350,57768:30358,57769:30355,57770:30361,57771:30362,57772:30384,57773:30388,57774:30392,57775:30393,57776:30394,57777:30402,57778:30413,57779:30422,57780:30418,57781:30430,57782:30433,57783:30437,57784:30439,57785:30442,57786:34351,57787:30459,57788:30472,57789:30471,57790:30468,57791:30505,57792:30500,57793:30494,57794:30501,57795:30502,57796:30491,57797:30519,57798:30520,57799:30535,57800:30554,57801:30568,57802:30571,57803:30555,57804:30565,57805:30591,57806:30590,57807:30585,57808:30606,57809:30603,57810:30609,57811:30624,57812:30622,57813:30640,57814:30646,57815:30649,57816:30655,57817:30652,57818:30653,57819:30651,57820:30663,57821:30669,57822:30679,57823:30682,57824:30684,57825:30691,57826:30702,57827:30716,57828:30732,57829:30738,57830:31014,57831:30752,57832:31018,57833:30789,57834:30862,57835:30836,57836:30854,57837:30844,57838:30874,57839:30860,57840:30883,57841:30901,57842:30890,57843:30895,57844:30929,57845:30918,57846:30923,57847:30932,57848:30910,57849:30908,57850:30917,57851:30922,57852:30956,57920:30951,57921:30938,57922:30973,57923:30964,57924:30983,57925:30994,57926:30993,57927:31001,57928:31020,57929:31019,57930:31040,57931:31072,57932:31063,57933:31071,57934:31066,57935:31061,57936:31059,57937:31098,57938:31103,57939:31114,57940:31133,57941:31143,57942:40779,57943:31146,57944:31150,57945:31155,57946:31161,57947:31162,57948:31177,57949:31189,57950:31207,57951:31212,57952:31201,57953:31203,57954:31240,57955:31245,57956:31256,57957:31257,57958:31264,57959:31263,57960:31104,57961:31281,57962:31291,57963:31294,57964:31287,57965:31299,57966:31319,57967:31305,57968:31329,57969:31330,57970:31337,57971:40861,57972:31344,57973:31353,57974:31357,57975:31368,57976:31383,57977:31381,57978:31384,57979:31382,57980:31401,57981:31432,57982:31408,57984:31414,57985:31429,57986:31428,57987:31423,57988:36995,57989:31431,57990:31434,57991:31437,57992:31439,57993:31445,57994:31443,57995:31449,57996:31450,57997:31453,57998:31457,57999:31458,58e3:31462,58001:31469,58002:31472,58003:31490,58004:31503,58005:31498,58006:31494,58007:31539,58008:31512,58009:31513,58010:31518,58011:31541,58012:31528,58013:31542,58014:31568,58015:31610,58016:31492,58017:31565,58018:31499,58019:31564,58020:31557,58021:31605,58022:31589,58023:31604,58024:31591,58025:31600,58026:31601,58027:31596,58028:31598,58029:31645,58030:31640,58031:31647,58032:31629,58033:31644,58034:31642,58035:31627,58036:31634,58037:31631,58038:31581,58039:31641,58040:31691,58041:31681,58042:31692,58043:31695,58044:31668,58045:31686,58046:31709,58047:31721,58048:31761,58049:31764,58050:31718,58051:31717,58052:31840,58053:31744,58054:31751,58055:31763,58056:31731,58057:31735,58058:31767,58059:31757,58060:31734,58061:31779,58062:31783,58063:31786,58064:31775,58065:31799,58066:31787,58067:31805,58068:31820,58069:31811,58070:31828,58071:31823,58072:31808,58073:31824,58074:31832,58075:31839,58076:31844,58077:31830,58078:31845,58079:31852,58080:31861,58081:31875,58082:31888,58083:31908,58084:31917,58085:31906,58086:31915,58087:31905,58088:31912,58089:31923,58090:31922,58091:31921,58092:31918,58093:31929,58094:31933,58095:31936,58096:31941,58097:31938,58098:31960,58099:31954,58100:31964,58101:31970,58102:39739,58103:31983,58104:31986,58105:31988,58106:31990,58107:31994,58108:32006,58176:32002,58177:32028,58178:32021,58179:32010,58180:32069,58181:32075,58182:32046,58183:32050,58184:32063,58185:32053,58186:32070,58187:32115,58188:32086,58189:32078,58190:32114,58191:32104,58192:32110,58193:32079,58194:32099,58195:32147,58196:32137,58197:32091,58198:32143,58199:32125,58200:32155,58201:32186,58202:32174,58203:32163,58204:32181,58205:32199,58206:32189,58207:32171,58208:32317,58209:32162,58210:32175,58211:32220,58212:32184,58213:32159,58214:32176,58215:32216,58216:32221,58217:32228,58218:32222,58219:32251,58220:32242,58221:32225,58222:32261,58223:32266,58224:32291,58225:32289,58226:32274,58227:32305,58228:32287,58229:32265,58230:32267,58231:32290,58232:32326,58233:32358,58234:32315,58235:32309,58236:32313,58237:32323,58238:32311,58240:32306,58241:32314,58242:32359,58243:32349,58244:32342,58245:32350,58246:32345,58247:32346,58248:32377,58249:32362,58250:32361,58251:32380,58252:32379,58253:32387,58254:32213,58255:32381,58256:36782,58257:32383,58258:32392,58259:32393,58260:32396,58261:32402,58262:32400,58263:32403,58264:32404,58265:32406,58266:32398,58267:32411,58268:32412,58269:32568,58270:32570,58271:32581,58272:32588,58273:32589,58274:32590,58275:32592,58276:32593,58277:32597,58278:32596,58279:32600,58280:32607,58281:32608,58282:32616,58283:32617,58284:32615,58285:32632,58286:32642,58287:32646,58288:32643,58289:32648,58290:32647,58291:32652,58292:32660,58293:32670,58294:32669,58295:32666,58296:32675,58297:32687,58298:32690,58299:32697,58300:32686,58301:32694,58302:32696,58303:35697,58304:32709,58305:32710,58306:32714,58307:32725,58308:32724,58309:32737,58310:32742,58311:32745,58312:32755,58313:32761,58314:39132,58315:32774,58316:32772,58317:32779,58318:32786,58319:32792,58320:32793,58321:32796,58322:32801,58323:32808,58324:32831,58325:32827,58326:32842,58327:32838,58328:32850,58329:32856,58330:32858,58331:32863,58332:32866,58333:32872,58334:32883,58335:32882,58336:32880,58337:32886,58338:32889,58339:32893,58340:32895,58341:32900,58342:32902,58343:32901,58344:32923,58345:32915,58346:32922,58347:32941,58348:20880,58349:32940,58350:32987,58351:32997,58352:32985,58353:32989,58354:32964,58355:32986,58356:32982,58357:33033,58358:33007,58359:33009,58360:33051,58361:33065,58362:33059,58363:33071,58364:33099,58432:38539,58433:33094,58434:33086,58435:33107,58436:33105,58437:33020,58438:33137,58439:33134,58440:33125,58441:33126,58442:33140,58443:33155,58444:33160,58445:33162,58446:33152,58447:33154,58448:33184,58449:33173,58450:33188,58451:33187,58452:33119,58453:33171,58454:33193,58455:33200,58456:33205,58457:33214,58458:33208,58459:33213,58460:33216,58461:33218,58462:33210,58463:33225,58464:33229,58465:33233,58466:33241,58467:33240,58468:33224,58469:33242,58470:33247,58471:33248,58472:33255,58473:33274,58474:33275,58475:33278,58476:33281,58477:33282,58478:33285,58479:33287,58480:33290,58481:33293,58482:33296,58483:33302,58484:33321,58485:33323,58486:33336,58487:33331,58488:33344,58489:33369,58490:33368,58491:33373,58492:33370,58493:33375,58494:33380,58496:33378,58497:33384,58498:33386,58499:33387,58500:33326,58501:33393,58502:33399,58503:33400,58504:33406,58505:33421,58506:33426,58507:33451,58508:33439,58509:33467,58510:33452,58511:33505,58512:33507,58513:33503,58514:33490,58515:33524,58516:33523,58517:33530,58518:33683,58519:33539,58520:33531,58521:33529,58522:33502,58523:33542,58524:33500,58525:33545,58526:33497,58527:33589,58528:33588,58529:33558,58530:33586,58531:33585,58532:33600,58533:33593,58534:33616,58535:33605,58536:33583,58537:33579,58538:33559,58539:33560,58540:33669,58541:33690,58542:33706,58543:33695,58544:33698,58545:33686,58546:33571,58547:33678,58548:33671,58549:33674,58550:33660,58551:33717,58552:33651,58553:33653,58554:33696,58555:33673,58556:33704,58557:33780,58558:33811,58559:33771,58560:33742,58561:33789,58562:33795,58563:33752,58564:33803,58565:33729,58566:33783,58567:33799,58568:33760,58569:33778,58570:33805,58571:33826,58572:33824,58573:33725,58574:33848,58575:34054,58576:33787,58577:33901,58578:33834,58579:33852,58580:34138,58581:33924,58582:33911,58583:33899,58584:33965,58585:33902,58586:33922,58587:33897,58588:33862,58589:33836,58590:33903,58591:33913,58592:33845,58593:33994,58594:33890,58595:33977,58596:33983,58597:33951,58598:34009,58599:33997,58600:33979,58601:34010,58602:34e3,58603:33985,58604:33990,58605:34006,58606:33953,58607:34081,58608:34047,58609:34036,58610:34071,58611:34072,58612:34092,58613:34079,58614:34069,58615:34068,58616:34044,58617:34112,58618:34147,58619:34136,58620:34120,58688:34113,58689:34306,58690:34123,58691:34133,58692:34176,58693:34212,58694:34184,58695:34193,58696:34186,58697:34216,58698:34157,58699:34196,58700:34203,58701:34282,58702:34183,58703:34204,58704:34167,58705:34174,58706:34192,58707:34249,58708:34234,58709:34255,58710:34233,58711:34256,58712:34261,58713:34269,58714:34277,58715:34268,58716:34297,58717:34314,58718:34323,58719:34315,58720:34302,58721:34298,58722:34310,58723:34338,58724:34330,58725:34352,58726:34367,58727:34381,58728:20053,58729:34388,58730:34399,58731:34407,58732:34417,58733:34451,58734:34467,58735:34473,58736:34474,58737:34443,58738:34444,58739:34486,58740:34479,58741:34500,58742:34502,58743:34480,58744:34505,58745:34851,58746:34475,58747:34516,58748:34526,58749:34537,58750:34540,58752:34527,58753:34523,58754:34543,58755:34578,58756:34566,58757:34568,58758:34560,58759:34563,58760:34555,58761:34577,58762:34569,58763:34573,58764:34553,58765:34570,58766:34612,58767:34623,58768:34615,58769:34619,58770:34597,58771:34601,58772:34586,58773:34656,58774:34655,58775:34680,58776:34636,58777:34638,58778:34676,58779:34647,58780:34664,58781:34670,58782:34649,58783:34643,58784:34659,58785:34666,58786:34821,58787:34722,58788:34719,58789:34690,58790:34735,58791:34763,58792:34749,58793:34752,58794:34768,58795:38614,58796:34731,58797:34756,58798:34739,58799:34759,58800:34758,58801:34747,58802:34799,58803:34802,58804:34784,58805:34831,58806:34829,58807:34814,58808:34806,58809:34807,58810:34830,58811:34770,58812:34833,58813:34838,58814:34837,58815:34850,58816:34849,58817:34865,58818:34870,58819:34873,58820:34855,58821:34875,58822:34884,58823:34882,58824:34898,58825:34905,58826:34910,58827:34914,58828:34923,58829:34945,58830:34942,58831:34974,58832:34933,58833:34941,58834:34997,58835:34930,58836:34946,58837:34967,58838:34962,58839:34990,58840:34969,58841:34978,58842:34957,58843:34980,58844:34992,58845:35007,58846:34993,58847:35011,58848:35012,58849:35028,58850:35032,58851:35033,58852:35037,58853:35065,58854:35074,58855:35068,58856:35060,58857:35048,58858:35058,58859:35076,58860:35084,58861:35082,58862:35091,58863:35139,58864:35102,58865:35109,58866:35114,58867:35115,58868:35137,58869:35140,58870:35131,58871:35126,58872:35128,58873:35148,58874:35101,58875:35168,58876:35166,58944:35174,58945:35172,58946:35181,58947:35178,58948:35183,58949:35188,58950:35191,58951:35198,58952:35203,58953:35208,58954:35210,58955:35219,58956:35224,58957:35233,58958:35241,58959:35238,58960:35244,58961:35247,58962:35250,58963:35258,58964:35261,58965:35263,58966:35264,58967:35290,58968:35292,58969:35293,58970:35303,58971:35316,58972:35320,58973:35331,58974:35350,58975:35344,58976:35340,58977:35355,58978:35357,58979:35365,58980:35382,58981:35393,58982:35419,58983:35410,58984:35398,58985:35400,58986:35452,58987:35437,58988:35436,58989:35426,58990:35461,58991:35458,58992:35460,58993:35496,58994:35489,58995:35473,58996:35493,58997:35494,58998:35482,58999:35491,59e3:35524,59001:35533,59002:35522,59003:35546,59004:35563,59005:35571,59006:35559,59008:35556,59009:35569,59010:35604,59011:35552,59012:35554,59013:35575,59014:35550,59015:35547,59016:35596,59017:35591,59018:35610,59019:35553,59020:35606,59021:35600,59022:35607,59023:35616,59024:35635,59025:38827,59026:35622,59027:35627,59028:35646,59029:35624,59030:35649,59031:35660,59032:35663,59033:35662,59034:35657,59035:35670,59036:35675,59037:35674,59038:35691,59039:35679,59040:35692,59041:35695,59042:35700,59043:35709,59044:35712,59045:35724,59046:35726,59047:35730,59048:35731,59049:35734,59050:35737,59051:35738,59052:35898,59053:35905,59054:35903,59055:35912,59056:35916,59057:35918,59058:35920,59059:35925,59060:35938,59061:35948,59062:35960,59063:35962,59064:35970,59065:35977,59066:35973,59067:35978,59068:35981,59069:35982,59070:35988,59071:35964,59072:35992,59073:25117,59074:36013,59075:36010,59076:36029,59077:36018,59078:36019,59079:36014,59080:36022,59081:36040,59082:36033,59083:36068,59084:36067,59085:36058,59086:36093,59087:36090,59088:36091,59089:36100,59090:36101,59091:36106,59092:36103,59093:36111,59094:36109,59095:36112,59096:40782,59097:36115,59098:36045,59099:36116,59100:36118,59101:36199,59102:36205,59103:36209,59104:36211,59105:36225,59106:36249,59107:36290,59108:36286,59109:36282,59110:36303,59111:36314,59112:36310,59113:36300,59114:36315,59115:36299,59116:36330,59117:36331,59118:36319,59119:36323,59120:36348,59121:36360,59122:36361,59123:36351,59124:36381,59125:36382,59126:36368,59127:36383,59128:36418,59129:36405,59130:36400,59131:36404,59132:36426,59200:36423,59201:36425,59202:36428,59203:36432,59204:36424,59205:36441,59206:36452,59207:36448,59208:36394,59209:36451,59210:36437,59211:36470,59212:36466,59213:36476,59214:36481,59215:36487,59216:36485,59217:36484,59218:36491,59219:36490,59220:36499,59221:36497,59222:36500,59223:36505,59224:36522,59225:36513,59226:36524,59227:36528,59228:36550,59229:36529,59230:36542,59231:36549,59232:36552,59233:36555,59234:36571,59235:36579,59236:36604,59237:36603,59238:36587,59239:36606,59240:36618,59241:36613,59242:36629,59243:36626,59244:36633,59245:36627,59246:36636,59247:36639,59248:36635,59249:36620,59250:36646,59251:36659,59252:36667,59253:36665,59254:36677,59255:36674,59256:36670,59257:36684,59258:36681,59259:36678,59260:36686,59261:36695,59262:36700,59264:36706,59265:36707,59266:36708,59267:36764,59268:36767,59269:36771,59270:36781,59271:36783,59272:36791,59273:36826,59274:36837,59275:36834,59276:36842,59277:36847,59278:36999,59279:36852,59280:36869,59281:36857,59282:36858,59283:36881,59284:36885,59285:36897,59286:36877,59287:36894,59288:36886,59289:36875,59290:36903,59291:36918,59292:36917,59293:36921,59294:36856,59295:36943,59296:36944,59297:36945,59298:36946,59299:36878,59300:36937,59301:36926,59302:36950,59303:36952,59304:36958,59305:36968,59306:36975,59307:36982,59308:38568,59309:36978,59310:36994,59311:36989,59312:36993,59313:36992,59314:37002,59315:37001,59316:37007,59317:37032,59318:37039,59319:37041,59320:37045,59321:37090,59322:37092,59323:25160,59324:37083,59325:37122,59326:37138,59327:37145,59328:37170,59329:37168,59330:37194,59331:37206,59332:37208,59333:37219,59334:37221,59335:37225,59336:37235,59337:37234,59338:37259,59339:37257,59340:37250,59341:37282,59342:37291,59343:37295,59344:37290,59345:37301,59346:37300,59347:37306,59348:37312,59349:37313,59350:37321,59351:37323,59352:37328,59353:37334,59354:37343,59355:37345,59356:37339,59357:37372,59358:37365,59359:37366,59360:37406,59361:37375,59362:37396,59363:37420,59364:37397,59365:37393,59366:37470,59367:37463,59368:37445,59369:37449,59370:37476,59371:37448,59372:37525,59373:37439,59374:37451,59375:37456,59376:37532,59377:37526,59378:37523,59379:37531,59380:37466,59381:37583,59382:37561,59383:37559,59384:37609,59385:37647,59386:37626,59387:37700,59388:37678,59456:37657,59457:37666,59458:37658,59459:37667,59460:37690,59461:37685,59462:37691,59463:37724,59464:37728,59465:37756,59466:37742,59467:37718,59468:37808,59469:37804,59470:37805,59471:37780,59472:37817,59473:37846,59474:37847,59475:37864,59476:37861,59477:37848,59478:37827,59479:37853,59480:37840,59481:37832,59482:37860,59483:37914,59484:37908,59485:37907,59486:37891,59487:37895,59488:37904,59489:37942,59490:37931,59491:37941,59492:37921,59493:37946,59494:37953,59495:37970,59496:37956,59497:37979,59498:37984,59499:37986,59500:37982,59501:37994,59502:37417,59503:38e3,59504:38005,59505:38007,59506:38013,59507:37978,59508:38012,59509:38014,59510:38017,59511:38015,59512:38274,59513:38279,59514:38282,59515:38292,59516:38294,59517:38296,59518:38297,59520:38304,59521:38312,59522:38311,59523:38317,59524:38332,59525:38331,59526:38329,59527:38334,59528:38346,59529:28662,59530:38339,59531:38349,59532:38348,59533:38357,59534:38356,59535:38358,59536:38364,59537:38369,59538:38373,59539:38370,59540:38433,59541:38440,59542:38446,59543:38447,59544:38466,59545:38476,59546:38479,59547:38475,59548:38519,59549:38492,59550:38494,59551:38493,59552:38495,59553:38502,59554:38514,59555:38508,59556:38541,59557:38552,59558:38549,59559:38551,59560:38570,59561:38567,59562:38577,59563:38578,59564:38576,59565:38580,59566:38582,59567:38584,59568:38585,59569:38606,59570:38603,59571:38601,59572:38605,59573:35149,59574:38620,59575:38669,59576:38613,59577:38649,59578:38660,59579:38662,59580:38664,59581:38675,59582:38670,59583:38673,59584:38671,59585:38678,59586:38681,59587:38692,59588:38698,59589:38704,59590:38713,59591:38717,59592:38718,59593:38724,59594:38726,59595:38728,59596:38722,59597:38729,59598:38748,59599:38752,59600:38756,59601:38758,59602:38760,59603:21202,59604:38763,59605:38769,59606:38777,59607:38789,59608:38780,59609:38785,59610:38778,59611:38790,59612:38795,59613:38799,59614:38800,59615:38812,59616:38824,59617:38822,59618:38819,59619:38835,59620:38836,59621:38851,59622:38854,59623:38856,\n59624:38859,59625:38876,59626:38893,59627:40783,59628:38898,59629:31455,59630:38902,59631:38901,59632:38927,59633:38924,59634:38968,59635:38948,59636:38945,59637:38967,59638:38973,59639:38982,59640:38991,59641:38987,59642:39019,59643:39023,59644:39024,59712:39025,59713:39028,59714:39027,59715:39082,59716:39087,59717:39089,59718:39094,59719:39108,59720:39107,59721:39110,59722:39145,59723:39147,59724:39171,59725:39177,59726:39186,59727:39188,59728:39192,59729:39201,59730:39197,59731:39198,59732:39204,59733:39200,59734:39212,59735:39214,59736:39229,59737:39230,59738:39234,59739:39241,59740:39237,59741:39248,59742:39243,59743:39249,59744:39250,59745:39244,59746:39253,59747:39319,59748:39320,59749:39333,59750:39341,59751:39342,59752:39356,59753:39391,59754:39387,59755:39389,59756:39384,59757:39377,59758:39405,59759:39406,59760:39409,59761:39410,59762:39419,59763:39416,59764:39425,59765:39439,59766:39429,59767:39394,59768:39449,59769:39467,59770:39479,59771:39493,59772:39490,59773:39488,59774:39491,59776:39486,59777:39509,59778:39501,59779:39515,59780:39511,59781:39519,59782:39522,59783:39525,59784:39524,59785:39529,59786:39531,59787:39530,59788:39597,59789:39600,59790:39612,59791:39616,59792:39631,59793:39633,59794:39635,59795:39636,59796:39646,59797:39647,59798:39650,59799:39651,59800:39654,59801:39663,59802:39659,59803:39662,59804:39668,59805:39665,59806:39671,59807:39675,59808:39686,59809:39704,59810:39706,59811:39711,59812:39714,59813:39715,59814:39717,59815:39719,59816:39720,59817:39721,59818:39722,59819:39726,59820:39727,59821:39730,59822:39748,59823:39747,59824:39759,59825:39757,59826:39758,59827:39761,59828:39768,59829:39796,59830:39827,59831:39811,59832:39825,59833:39830,59834:39831,59835:39839,59836:39840,59837:39848,59838:39860,59839:39872,59840:39882,59841:39865,59842:39878,59843:39887,59844:39889,59845:39890,59846:39907,59847:39906,59848:39908,59849:39892,59850:39905,59851:39994,59852:39922,59853:39921,59854:39920,59855:39957,59856:39956,59857:39945,59858:39955,59859:39948,59860:39942,59861:39944,59862:39954,59863:39946,59864:39940,59865:39982,59866:39963,59867:39973,59868:39972,59869:39969,59870:39984,59871:40007,59872:39986,59873:40006,59874:39998,59875:40026,59876:40032,59877:40039,59878:40054,59879:40056,59880:40167,59881:40172,59882:40176,59883:40201,59884:40200,59885:40171,59886:40195,59887:40198,59888:40234,59889:40230,59890:40367,59891:40227,59892:40223,59893:40260,59894:40213,59895:40210,59896:40257,59897:40255,59898:40254,59899:40262,59900:40264,59968:40285,59969:40286,59970:40292,59971:40273,59972:40272,59973:40281,59974:40306,59975:40329,59976:40327,59977:40363,59978:40303,59979:40314,59980:40346,59981:40356,59982:40361,59983:40370,59984:40388,59985:40385,59986:40379,59987:40376,59988:40378,59989:40390,59990:40399,59991:40386,59992:40409,59993:40403,59994:40440,59995:40422,59996:40429,59997:40431,59998:40445,59999:40474,6e4:40475,60001:40478,60002:40565,60003:40569,60004:40573,60005:40577,60006:40584,60007:40587,60008:40588,60009:40594,60010:40597,60011:40593,60012:40605,60013:40613,60014:40617,60015:40632,60016:40618,60017:40621,60018:38753,60019:40652,60020:40654,60021:40655,60022:40656,60023:40660,60024:40668,60025:40670,60026:40669,60027:40672,60028:40677,60029:40680,60030:40687,60032:40692,60033:40694,60034:40695,60035:40697,60036:40699,60037:40700,60038:40701,60039:40711,60040:40712,60041:30391,60042:40725,60043:40737,60044:40748,60045:40766,60046:40778,60047:40786,60048:40788,60049:40803,60050:40799,60051:40800,60052:40801,60053:40806,60054:40807,60055:40812,60056:40810,60057:40823,60058:40818,60059:40822,60060:40853,60061:40860,60062:40864,60063:22575,60064:27079,60065:36953,60066:29796,60067:20956,60068:29081}},function(o,e,r){\"use strict\";function t(o,e,r,t){e.degree()<r.degree()&&(w=[r,e],e=w[0],r=w[1]);for(var c=e,s=r,a=o.zero,d=o.one;s.degree()>=t/2;){var n=c,l=a;if(c=s,a=d,c.isZero())return null;s=n;for(var i=o.zero,B=c.getCoefficient(c.degree()),k=o.inverse(B);s.degree()>=c.degree()&&!s.isZero();){var u=s.degree()-c.degree(),C=o.multiply(s.getCoefficient(s.degree()),k);i=i.addOrSubtract(o.buildMonomial(u,C)),s=s.addOrSubtract(c.multiplyByMonomial(u,C))}if(d=i.multiplyPoly(a).addOrSubtract(l),s.degree()>=c.degree())return null}var m=d.getCoefficient(0);if(0===m)return null;var f=o.inverse(m);return[d.multiply(f),s.multiply(f)];var w}function c(o,e){var r=e.degree();if(1===r)return[e.getCoefficient(1)];for(var t=new Array(r),c=0,s=1;s<o.size&&c<r;s++)0===e.evaluateAt(s)&&(t[c]=o.inverse(s),c++);return c!==r?null:t}function s(o,e,r){for(var t=r.length,c=new Array(t),s=0;s<t;s++){for(var a=o.inverse(r[s]),n=1,l=0;l<t;l++)s!==l&&(n=o.multiply(n,d.addOrSubtractGF(1,o.multiply(r[l],a))));c[s]=o.multiply(e.evaluateAt(a),o.inverse(n)),0!==o.generatorBase&&(c[s]=o.multiply(c[s],a))}return c}function a(o,e){var r=new Uint8ClampedArray(o.length);r.set(o);for(var a=new d.default(285,256,0),l=new n.default(a,r),i=new Uint8ClampedArray(e),B=!1,k=0;k<e;k++){var u=l.evaluateAt(a.exp(k+a.generatorBase));i[i.length-1-k]=u,0!==u&&(B=!0)}if(!B)return r;var C=new n.default(a,i),m=t(a,a.buildMonomial(e,1),C,e);if(null===m)return null;var f=c(a,m[0]);if(null==f)return null;for(var w=s(a,m[1],f),P=0;P<f.length;P++){var v=r.length-1-a.log(f[P]);if(v<0)return null;r[v]=d.addOrSubtractGF(r[v],w[P])}return r}Object.defineProperty(e,\"__esModule\",{value:!0});var d=r(1),n=r(2);e.decode=a},function(o,e,r){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.VERSIONS=[{infoBits:null,versionNumber:1,alignmentPatternCenters:[],errorCorrectionLevels:[{ecCodewordsPerBlock:7,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:19}]},{ecCodewordsPerBlock:10,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:16}]},{ecCodewordsPerBlock:13,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:13}]},{ecCodewordsPerBlock:17,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:9}]}]},{infoBits:null,versionNumber:2,alignmentPatternCenters:[6,18],errorCorrectionLevels:[{ecCodewordsPerBlock:10,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:34}]},{ecCodewordsPerBlock:16,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:28}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:22}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:16}]}]},{infoBits:null,versionNumber:3,alignmentPatternCenters:[6,22],errorCorrectionLevels:[{ecCodewordsPerBlock:15,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:55}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:44}]},{ecCodewordsPerBlock:18,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:17}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:13}]}]},{infoBits:null,versionNumber:4,alignmentPatternCenters:[6,26],errorCorrectionLevels:[{ecCodewordsPerBlock:20,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:80}]},{ecCodewordsPerBlock:18,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:32}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:24}]},{ecCodewordsPerBlock:16,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:9}]}]},{infoBits:null,versionNumber:5,alignmentPatternCenters:[6,30],errorCorrectionLevels:[{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:108}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:43}]},{ecCodewordsPerBlock:18,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:15},{numBlocks:2,dataCodewordsPerBlock:16}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:11},{numBlocks:2,dataCodewordsPerBlock:12}]}]},{infoBits:null,versionNumber:6,alignmentPatternCenters:[6,34],errorCorrectionLevels:[{ecCodewordsPerBlock:18,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:68}]},{ecCodewordsPerBlock:16,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:27}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:19}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:15}]}]},{infoBits:31892,versionNumber:7,alignmentPatternCenters:[6,22,38],errorCorrectionLevels:[{ecCodewordsPerBlock:20,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:78}]},{ecCodewordsPerBlock:18,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:31}]},{ecCodewordsPerBlock:18,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:14},{numBlocks:4,dataCodewordsPerBlock:15}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:13},{numBlocks:1,dataCodewordsPerBlock:14}]}]},{infoBits:34236,versionNumber:8,alignmentPatternCenters:[6,24,42],errorCorrectionLevels:[{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:97}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:38},{numBlocks:2,dataCodewordsPerBlock:39}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:18},{numBlocks:2,dataCodewordsPerBlock:19}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:14},{numBlocks:2,dataCodewordsPerBlock:15}]}]},{infoBits:39577,versionNumber:9,alignmentPatternCenters:[6,26,46],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:116}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:36},{numBlocks:2,dataCodewordsPerBlock:37}]},{ecCodewordsPerBlock:20,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:16},{numBlocks:4,dataCodewordsPerBlock:17}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:12},{numBlocks:4,dataCodewordsPerBlock:13}]}]},{infoBits:42195,versionNumber:10,alignmentPatternCenters:[6,28,50],errorCorrectionLevels:[{ecCodewordsPerBlock:18,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:68},{numBlocks:2,dataCodewordsPerBlock:69}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:43},{numBlocks:1,dataCodewordsPerBlock:44}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:6,dataCodewordsPerBlock:19},{numBlocks:2,dataCodewordsPerBlock:20}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:6,dataCodewordsPerBlock:15},{numBlocks:2,dataCodewordsPerBlock:16}]}]},{infoBits:48118,versionNumber:11,alignmentPatternCenters:[6,30,54],errorCorrectionLevels:[{ecCodewordsPerBlock:20,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:81}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:50},{numBlocks:4,dataCodewordsPerBlock:51}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:22},{numBlocks:4,dataCodewordsPerBlock:23}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:12},{numBlocks:8,dataCodewordsPerBlock:13}]}]},{infoBits:51042,versionNumber:12,alignmentPatternCenters:[6,32,58],errorCorrectionLevels:[{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:92},{numBlocks:2,dataCodewordsPerBlock:93}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:6,dataCodewordsPerBlock:36},{numBlocks:2,dataCodewordsPerBlock:37}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:20},{numBlocks:6,dataCodewordsPerBlock:21}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:7,dataCodewordsPerBlock:14},{numBlocks:4,dataCodewordsPerBlock:15}]}]},{infoBits:55367,versionNumber:13,alignmentPatternCenters:[6,34,62],errorCorrectionLevels:[{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:107}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:8,dataCodewordsPerBlock:37},{numBlocks:1,dataCodewordsPerBlock:38}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:8,dataCodewordsPerBlock:20},{numBlocks:4,dataCodewordsPerBlock:21}]},{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:12,dataCodewordsPerBlock:11},{numBlocks:4,dataCodewordsPerBlock:12}]}]},{infoBits:58893,versionNumber:14,alignmentPatternCenters:[6,26,46,66],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:115},{numBlocks:1,dataCodewordsPerBlock:116}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:40},{numBlocks:5,dataCodewordsPerBlock:41}]},{ecCodewordsPerBlock:20,ecBlocks:[{numBlocks:11,dataCodewordsPerBlock:16},{numBlocks:5,dataCodewordsPerBlock:17}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:11,dataCodewordsPerBlock:12},{numBlocks:5,dataCodewordsPerBlock:13}]}]},{infoBits:63784,versionNumber:15,alignmentPatternCenters:[6,26,48,70],errorCorrectionLevels:[{ecCodewordsPerBlock:22,ecBlocks:[{numBlocks:5,dataCodewordsPerBlock:87},{numBlocks:1,dataCodewordsPerBlock:88}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:5,dataCodewordsPerBlock:41},{numBlocks:5,dataCodewordsPerBlock:42}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:5,dataCodewordsPerBlock:24},{numBlocks:7,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:11,dataCodewordsPerBlock:12},{numBlocks:7,dataCodewordsPerBlock:13}]}]},{infoBits:68472,versionNumber:16,alignmentPatternCenters:[6,26,50,74],errorCorrectionLevels:[{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:5,dataCodewordsPerBlock:98},{numBlocks:1,dataCodewordsPerBlock:99}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:7,dataCodewordsPerBlock:45},{numBlocks:3,dataCodewordsPerBlock:46}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:15,dataCodewordsPerBlock:19},{numBlocks:2,dataCodewordsPerBlock:20}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:15},{numBlocks:13,dataCodewordsPerBlock:16}]}]},{infoBits:70749,versionNumber:17,alignmentPatternCenters:[6,30,54,78],errorCorrectionLevels:[{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:107},{numBlocks:5,dataCodewordsPerBlock:108}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:10,dataCodewordsPerBlock:46},{numBlocks:1,dataCodewordsPerBlock:47}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:22},{numBlocks:15,dataCodewordsPerBlock:23}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:14},{numBlocks:17,dataCodewordsPerBlock:15}]}]},{infoBits:76311,versionNumber:18,alignmentPatternCenters:[6,30,56,82],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:5,dataCodewordsPerBlock:120},{numBlocks:1,dataCodewordsPerBlock:121}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:9,dataCodewordsPerBlock:43},{numBlocks:4,dataCodewordsPerBlock:44}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:17,dataCodewordsPerBlock:22},{numBlocks:1,dataCodewordsPerBlock:23}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:14},{numBlocks:19,dataCodewordsPerBlock:15}]}]},{infoBits:79154,versionNumber:19,alignmentPatternCenters:[6,30,58,86],errorCorrectionLevels:[{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:113},{numBlocks:4,dataCodewordsPerBlock:114}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:44},{numBlocks:11,dataCodewordsPerBlock:45}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:17,dataCodewordsPerBlock:21},{numBlocks:4,dataCodewordsPerBlock:22}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:9,dataCodewordsPerBlock:13},{numBlocks:16,dataCodewordsPerBlock:14}]}]},{infoBits:84390,versionNumber:20,alignmentPatternCenters:[6,34,62,90],errorCorrectionLevels:[{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:107},{numBlocks:5,dataCodewordsPerBlock:108}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:41},{numBlocks:13,dataCodewordsPerBlock:42}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:15,dataCodewordsPerBlock:24},{numBlocks:5,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:15,dataCodewordsPerBlock:15},{numBlocks:10,dataCodewordsPerBlock:16}]}]},{infoBits:87683,versionNumber:21,alignmentPatternCenters:[6,28,50,72,94],errorCorrectionLevels:[{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:116},{numBlocks:4,dataCodewordsPerBlock:117}]},{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:17,dataCodewordsPerBlock:42}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:17,dataCodewordsPerBlock:22},{numBlocks:6,dataCodewordsPerBlock:23}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:19,dataCodewordsPerBlock:16},{numBlocks:6,dataCodewordsPerBlock:17}]}]},{infoBits:92361,versionNumber:22,alignmentPatternCenters:[6,26,50,74,98],errorCorrectionLevels:[{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:111},{numBlocks:7,dataCodewordsPerBlock:112}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:17,dataCodewordsPerBlock:46}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:7,dataCodewordsPerBlock:24},{numBlocks:16,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:24,ecBlocks:[{numBlocks:34,dataCodewordsPerBlock:13}]}]},{infoBits:96236,versionNumber:23,alignmentPatternCenters:[6,30,54,74,102],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:121},{numBlocks:5,dataCodewordsPerBlock:122}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:47},{numBlocks:14,dataCodewordsPerBlock:48}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:11,dataCodewordsPerBlock:24},{numBlocks:14,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:16,dataCodewordsPerBlock:15},{numBlocks:14,dataCodewordsPerBlock:16}]}]},{infoBits:102084,versionNumber:24,alignmentPatternCenters:[6,28,54,80,106],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:6,dataCodewordsPerBlock:117},{numBlocks:4,dataCodewordsPerBlock:118}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:6,dataCodewordsPerBlock:45},{numBlocks:14,dataCodewordsPerBlock:46}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:11,dataCodewordsPerBlock:24},{numBlocks:16,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:30,dataCodewordsPerBlock:16},{numBlocks:2,dataCodewordsPerBlock:17}]}]},{infoBits:102881,versionNumber:25,alignmentPatternCenters:[6,32,58,84,110],errorCorrectionLevels:[{ecCodewordsPerBlock:26,ecBlocks:[{numBlocks:8,dataCodewordsPerBlock:106},{numBlocks:4,dataCodewordsPerBlock:107}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:8,dataCodewordsPerBlock:47},{numBlocks:13,dataCodewordsPerBlock:48}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:7,dataCodewordsPerBlock:24},{numBlocks:22,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:22,dataCodewordsPerBlock:15},{numBlocks:13,dataCodewordsPerBlock:16}]}]},{infoBits:110507,versionNumber:26,alignmentPatternCenters:[6,30,58,86,114],errorCorrectionLevels:[{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:10,dataCodewordsPerBlock:114},{numBlocks:2,dataCodewordsPerBlock:115}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:19,dataCodewordsPerBlock:46},{numBlocks:4,dataCodewordsPerBlock:47}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:28,dataCodewordsPerBlock:22},{numBlocks:6,dataCodewordsPerBlock:23}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:33,dataCodewordsPerBlock:16},{numBlocks:4,dataCodewordsPerBlock:17}]}]},{infoBits:110734,versionNumber:27,alignmentPatternCenters:[6,34,62,90,118],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:8,dataCodewordsPerBlock:122},{numBlocks:4,dataCodewordsPerBlock:123}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:22,dataCodewordsPerBlock:45},{numBlocks:3,dataCodewordsPerBlock:46}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:8,dataCodewordsPerBlock:23},{numBlocks:26,dataCodewordsPerBlock:24}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:12,dataCodewordsPerBlock:15},{numBlocks:28,dataCodewordsPerBlock:16}]}]},{infoBits:117786,versionNumber:28,alignmentPatternCenters:[6,26,50,74,98,122],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:117},{numBlocks:10,dataCodewordsPerBlock:118}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:3,dataCodewordsPerBlock:45},{numBlocks:23,dataCodewordsPerBlock:46}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:24},{numBlocks:31,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:11,dataCodewordsPerBlock:15},{numBlocks:31,dataCodewordsPerBlock:16}]}]},{infoBits:119615,versionNumber:29,alignmentPatternCenters:[6,30,54,78,102,126],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:7,dataCodewordsPerBlock:116},{numBlocks:7,dataCodewordsPerBlock:117}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:21,dataCodewordsPerBlock:45},{numBlocks:7,dataCodewordsPerBlock:46}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:1,dataCodewordsPerBlock:23},{numBlocks:37,dataCodewordsPerBlock:24}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:19,dataCodewordsPerBlock:15},{numBlocks:26,dataCodewordsPerBlock:16}]}]},{infoBits:126325,versionNumber:30,alignmentPatternCenters:[6,26,52,78,104,130],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:5,dataCodewordsPerBlock:115},{numBlocks:10,dataCodewordsPerBlock:116}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:19,dataCodewordsPerBlock:47},{numBlocks:10,dataCodewordsPerBlock:48}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:15,dataCodewordsPerBlock:24},{numBlocks:25,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:23,dataCodewordsPerBlock:15},{numBlocks:25,dataCodewordsPerBlock:16}]}]},{infoBits:127568,versionNumber:31,alignmentPatternCenters:[6,30,56,82,108,134],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:13,dataCodewordsPerBlock:115},{numBlocks:3,dataCodewordsPerBlock:116}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:46},{numBlocks:29,dataCodewordsPerBlock:47}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:42,dataCodewordsPerBlock:24},{numBlocks:1,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:23,dataCodewordsPerBlock:15},{numBlocks:28,dataCodewordsPerBlock:16}]}]},{infoBits:133589,versionNumber:32,alignmentPatternCenters:[6,34,60,86,112,138],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:17,dataCodewordsPerBlock:115}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:10,dataCodewordsPerBlock:46},{numBlocks:23,dataCodewordsPerBlock:47}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:10,dataCodewordsPerBlock:24},{numBlocks:35,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:19,dataCodewordsPerBlock:15},{numBlocks:35,dataCodewordsPerBlock:16}]}]},{infoBits:136944,versionNumber:33,alignmentPatternCenters:[6,30,58,86,114,142],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:17,dataCodewordsPerBlock:115},{numBlocks:1,dataCodewordsPerBlock:116}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:14,dataCodewordsPerBlock:46},{numBlocks:21,dataCodewordsPerBlock:47}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:29,dataCodewordsPerBlock:24},{numBlocks:19,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:11,dataCodewordsPerBlock:15},{numBlocks:46,dataCodewordsPerBlock:16}]}]},{infoBits:141498,versionNumber:34,alignmentPatternCenters:[6,34,62,90,118,146],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:13,dataCodewordsPerBlock:115},{numBlocks:6,dataCodewordsPerBlock:116}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:14,dataCodewordsPerBlock:46},{numBlocks:23,dataCodewordsPerBlock:47}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:44,dataCodewordsPerBlock:24},{numBlocks:7,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:59,dataCodewordsPerBlock:16},{numBlocks:1,dataCodewordsPerBlock:17}]}]},{infoBits:145311,versionNumber:35,alignmentPatternCenters:[6,30,54,78,102,126,150],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:12,dataCodewordsPerBlock:121},{numBlocks:7,dataCodewordsPerBlock:122}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:12,dataCodewordsPerBlock:47},{numBlocks:26,dataCodewordsPerBlock:48}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:39,dataCodewordsPerBlock:24},{numBlocks:14,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:22,dataCodewordsPerBlock:15},{numBlocks:41,dataCodewordsPerBlock:16}]}]},{infoBits:150283,versionNumber:36,alignmentPatternCenters:[6,24,50,76,102,128,154],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:6,dataCodewordsPerBlock:121},{numBlocks:14,dataCodewordsPerBlock:122}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:6,dataCodewordsPerBlock:47},{numBlocks:34,dataCodewordsPerBlock:48}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:46,dataCodewordsPerBlock:24},{numBlocks:10,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:2,dataCodewordsPerBlock:15},{numBlocks:64,dataCodewordsPerBlock:16}]}]},{infoBits:152622,versionNumber:37,alignmentPatternCenters:[6,28,54,80,106,132,158],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:17,dataCodewordsPerBlock:122},{numBlocks:4,dataCodewordsPerBlock:123}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:29,dataCodewordsPerBlock:46},{numBlocks:14,dataCodewordsPerBlock:47}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:49,dataCodewordsPerBlock:24},{numBlocks:10,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:24,dataCodewordsPerBlock:15},{numBlocks:46,dataCodewordsPerBlock:16}]}]},{infoBits:158308,versionNumber:38,alignmentPatternCenters:[6,32,58,84,110,136,162],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:4,dataCodewordsPerBlock:122},{numBlocks:18,dataCodewordsPerBlock:123}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:13,dataCodewordsPerBlock:46},{numBlocks:32,dataCodewordsPerBlock:47}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:48,dataCodewordsPerBlock:24},{numBlocks:14,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:42,dataCodewordsPerBlock:15},{numBlocks:32,dataCodewordsPerBlock:16}]}]},{infoBits:161089,versionNumber:39,alignmentPatternCenters:[6,26,54,82,110,138,166],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:20,dataCodewordsPerBlock:117},{numBlocks:4,dataCodewordsPerBlock:118}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:40,dataCodewordsPerBlock:47},{numBlocks:7,dataCodewordsPerBlock:48}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:43,dataCodewordsPerBlock:24},{numBlocks:22,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:10,dataCodewordsPerBlock:15},{numBlocks:67,dataCodewordsPerBlock:16}]}]},{infoBits:167017,versionNumber:40,alignmentPatternCenters:[6,30,58,86,114,142,170],errorCorrectionLevels:[{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:19,dataCodewordsPerBlock:118},{numBlocks:6,dataCodewordsPerBlock:119}]},{ecCodewordsPerBlock:28,ecBlocks:[{numBlocks:18,dataCodewordsPerBlock:47},{numBlocks:31,dataCodewordsPerBlock:48}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:34,dataCodewordsPerBlock:24},{numBlocks:34,dataCodewordsPerBlock:25}]},{ecCodewordsPerBlock:30,ecBlocks:[{numBlocks:20,dataCodewordsPerBlock:15},{numBlocks:61,dataCodewordsPerBlock:16}]}]}]},function(o,e,r){\"use strict\";function t(o,e,r,t){var c=o.x-e.x+r.x-t.x,s=o.y-e.y+r.y-t.y;if(0===c&&0===s)return{a11:e.x-o.x,a12:e.y-o.y,a13:0,a21:r.x-e.x,a22:r.y-e.y,a23:0,a31:o.x,a32:o.y,a33:1};var a=e.x-r.x,d=t.x-r.x,n=e.y-r.y,l=t.y-r.y,i=a*l-d*n,B=(c*l-d*s)/i,k=(a*s-c*n)/i;return{a11:e.x-o.x+B*e.x,a12:e.y-o.y+B*e.y,a13:B,a21:t.x-o.x+k*t.x,a22:t.y-o.y+k*t.y,a23:k,a31:o.x,a32:o.y,a33:1}}function c(o,e,r,c){var s=t(o,e,r,c);return{a11:s.a22*s.a33-s.a23*s.a32,a12:s.a13*s.a32-s.a12*s.a33,a13:s.a12*s.a23-s.a13*s.a22,a21:s.a23*s.a31-s.a21*s.a33,a22:s.a11*s.a33-s.a13*s.a31,a23:s.a13*s.a21-s.a11*s.a23,a31:s.a21*s.a32-s.a22*s.a31,a32:s.a12*s.a31-s.a11*s.a32,a33:s.a11*s.a22-s.a12*s.a21}}function s(o,e){return{a11:o.a11*e.a11+o.a21*e.a12+o.a31*e.a13,a12:o.a12*e.a11+o.a22*e.a12+o.a32*e.a13,a13:o.a13*e.a11+o.a23*e.a12+o.a33*e.a13,a21:o.a11*e.a21+o.a21*e.a22+o.a31*e.a23,a22:o.a12*e.a21+o.a22*e.a22+o.a32*e.a23,a23:o.a13*e.a21+o.a23*e.a22+o.a33*e.a23,a31:o.a11*e.a31+o.a21*e.a32+o.a31*e.a33,a32:o.a12*e.a31+o.a22*e.a32+o.a32*e.a33,a33:o.a13*e.a31+o.a23*e.a32+o.a33*e.a33}}function a(o,e){for(var r=c({x:3.5,y:3.5},{x:e.dimension-3.5,y:3.5},{x:e.dimension-6.5,y:e.dimension-6.5},{x:3.5,y:e.dimension-3.5}),a=t(e.topLeft,e.topRight,e.alignmentPattern,e.bottomLeft),n=s(a,r),l=d.BitMatrix.createEmpty(e.dimension,e.dimension),i=function(o,e){var r=n.a13*o+n.a23*e+n.a33;return{x:(n.a11*o+n.a21*e+n.a31)/r,y:(n.a12*o+n.a22*e+n.a32)/r}},B=0;B<e.dimension;B++)for(var k=0;k<e.dimension;k++){var u=k+.5,C=B+.5,m=i(u,C);l.set(k,B,o.get(Math.floor(m.x),Math.floor(m.y)))}return{matrix:l,mappingFunction:i}}Object.defineProperty(e,\"__esModule\",{value:!0});var d=r(0);e.extract=a},function(o,e,r){\"use strict\";function t(o){return o.reduce(function(o,e){return o+e})}function c(o,e,r){var t,c,s,a=C(o,e),d=C(e,r),n=C(o,r);return d>=a&&d>=n?(l=[e,o,r],t=l[0],c=l[1],s=l[2]):n>=d&&n>=a?(i=[o,e,r],t=i[0],c=i[1],s=i[2]):(B=[o,r,e],t=B[0],c=B[1],s=B[2]),(s.x-c.x)*(t.y-c.y)-(s.y-c.y)*(t.x-c.x)<0&&(k=[s,t],t=k[0],s=k[1]),{bottomLeft:t,topLeft:c,topRight:s};var l,i,B,k}function s(o,e,r,c){var s=(t(d(o,r,c,5))/7+t(d(o,e,c,5))/7+t(d(r,o,c,5))/7+t(d(e,o,c,5))/7)/4;if(s<1)throw new Error(\"Invalid module size\");var a=Math.round(C(o,e)/s),n=Math.round(C(o,r)/s),l=Math.floor((a+n)/2)+7;switch(l%4){case 0:l++;break;case 2:l--}return{dimension:l,moduleSize:s}}function a(o,e,r,t){var c,s,a,d,n=[{x:Math.floor(o.x),y:Math.floor(o.y)}],l=Math.abs(e.y-o.y)>Math.abs(e.x-o.x);l?(c=Math.floor(o.y),s=Math.floor(o.x),a=Math.floor(e.y),d=Math.floor(e.x)):(c=Math.floor(o.x),s=Math.floor(o.y),a=Math.floor(e.x),d=Math.floor(e.y));for(var i=Math.abs(a-c),B=Math.abs(d-s),k=Math.floor(-i/2),u=c<a?1:-1,m=s<d?1:-1,f=!0,w=c,P=s;w!==a+u;w+=u){var v=l?P:w,h=l?w:P;if(r.get(v,h)!==f&&(f=!f,n.push({x:v,y:h}),n.length===t+1))break;if((k+=B)>0){if(P===d)break;P+=m,k-=i}}for(var p=[],y=0;y<t;y++)n[y]&&n[y+1]?p.push(C(n[y],n[y+1])):p.push(0);return p}function d(o,e,r,t){var c=e.y-o.y,s=e.x-o.x,d=a(o,e,r,Math.ceil(t/2)),n=a(o,{x:o.x-s,y:o.y-c},r,Math.ceil(t/2)),l=d.shift()+n.shift()-1;return(i=n.concat(l)).concat.apply(i,d);var i}function n(o,e){var r=t(o)/t(e),c=0;return e.forEach(function(e,t){c+=Math.pow(o[t]-e*r,2)}),{averageSize:r,error:c}}function l(o,e,r){try{var t=d(o,{x:-1,y:o.y},r,e.length),c=d(o,{x:o.x,y:-1},r,e.length),s={x:Math.max(0,o.x-o.y)-1,y:Math.max(0,o.y-o.x)-1},a=d(o,s,r,e.length),l={x:Math.min(r.width,o.x+o.y)+1,y:Math.min(r.height,o.y+o.x)+1},i=d(o,l,r,e.length),B=n(t,e),k=n(c,e),u=n(a,e),C=n(i,e),m=Math.sqrt(B.error*B.error+k.error*k.error+u.error*u.error+C.error*C.error),f=(B.averageSize+k.averageSize+u.averageSize+C.averageSize)/4;return m+(Math.pow(B.averageSize-f,2)+Math.pow(k.averageSize-f,2)+Math.pow(u.averageSize-f,2)+Math.pow(C.averageSize-f,2))/f}catch(o){return 1/0}}function i(o){for(var e=[],r=[],a=[],d=[],n=0;n<=o.height;n++)!function(c){for(var s=0,n=!1,l=[0,0,0,0,0],i=-1;i<=o.width;i++)!function(e){var a=o.get(e,c);if(a===n)s++;else{l=[l[1],l[2],l[3],l[4],s],s=1,n=a;var i=t(l)/7,B=Math.abs(l[0]-i)<i&&Math.abs(l[1]-i)<i&&Math.abs(l[2]-3*i)<3*i&&Math.abs(l[3]-i)<i&&Math.abs(l[4]-i)<i&&!a,C=t(l.slice(-3))/3,m=Math.abs(l[2]-C)<C&&Math.abs(l[3]-C)<C&&Math.abs(l[4]-C)<C&&a;if(B){var f=e-l[3]-l[4],w=f-l[2],P={startX:w,endX:f,y:c},v=r.filter(function(o){return w>=o.bottom.startX&&w<=o.bottom.endX||f>=o.bottom.startX&&w<=o.bottom.endX||w<=o.bottom.startX&&f>=o.bottom.endX&&l[2]/(o.bottom.endX-o.bottom.startX)<u&&l[2]/(o.bottom.endX-o.bottom.startX)>k});v.length>0?v[0].bottom=P:r.push({top:P,bottom:P})}if(m){var h=e-l[4],p=h-l[3],P={startX:p,y:c,endX:h},v=d.filter(function(o){return p>=o.bottom.startX&&p<=o.bottom.endX||h>=o.bottom.startX&&p<=o.bottom.endX||p<=o.bottom.startX&&h>=o.bottom.endX&&l[2]/(o.bottom.endX-o.bottom.startX)<u&&l[2]/(o.bottom.endX-o.bottom.startX)>k});v.length>0?v[0].bottom=P:d.push({top:P,bottom:P})}}}(i);e.push.apply(e,r.filter(function(o){return o.bottom.y!==c&&o.bottom.y-o.top.y>=2})),r=r.filter(function(o){return o.bottom.y===c}),a.push.apply(a,d.filter(function(o){return o.bottom.y!==c})),d=d.filter(function(o){return o.bottom.y===c})}(n);e.push.apply(e,r.filter(function(o){return o.bottom.y-o.top.y>=2})),a.push.apply(a,d);var i=e.filter(function(o){return o.bottom.y-o.top.y>=2}).map(function(e){var r=(e.top.startX+e.top.endX+e.bottom.startX+e.bottom.endX)/4,c=(e.top.y+e.bottom.y+1)/2;if(o.get(Math.round(r),Math.round(c))){\nvar s=[e.top.endX-e.top.startX,e.bottom.endX-e.bottom.startX,e.bottom.y-e.top.y+1],a=t(s)/s.length;return{score:l({x:Math.round(r),y:Math.round(c)},[1,1,3,1,1],o),x:r,y:c,size:a}}}).filter(function(o){return!!o}).sort(function(o,e){return o.score-e.score}).map(function(o,e,r){if(e>B)return null;var t=r.filter(function(o,r){return e!==r}).map(function(e){return{x:e.x,y:e.y,score:e.score+Math.pow(e.size-o.size,2)/o.size,size:e.size}}).sort(function(o,e){return o.score-e.score});if(t.length<2)return null;var c=o.score+t[0].score+t[1].score;return{points:[o].concat(t.slice(0,2)),score:c}}).filter(function(o){return!!o}).sort(function(o,e){return o.score-e.score});if(0===i.length)return null;var m,f,w=c(i[0].points[0],i[0].points[1],i[0].points[2]),P=w.topRight,v=w.topLeft,h=w.bottomLeft;try{L=s(v,P,h,o),m=L.dimension,f=L.moduleSize}catch(o){return null}var p={x:P.x-v.x+h.x,y:P.y-v.y+h.y},y=(C(v,h)+C(v,P))/2/f,b=1-3/y,g={x:v.x+b*(p.x-v.x),y:v.y+b*(p.y-v.y)},x=a.map(function(e){var r=(e.top.startX+e.top.endX+e.bottom.startX+e.bottom.endX)/4,c=(e.top.y+e.bottom.y+1)/2;if(o.get(Math.floor(r),Math.floor(c))){var s=[e.top.endX-e.top.startX,e.bottom.endX-e.bottom.startX,e.bottom.y-e.top.y+1];t(s);return{x:r,y:c,score:l({x:Math.floor(r),y:Math.floor(c)},[1,1,1],o)+C({x:r,y:c},g)}}}).filter(function(o){return!!o}).sort(function(o,e){return o.score-e.score}),M=y>=15&&x.length?x[0]:g;return{alignmentPattern:{x:M.x,y:M.y},bottomLeft:{x:h.x,y:h.y},dimension:m,topLeft:{x:v.x,y:v.y},topRight:{x:P.x,y:P.y}};var L}Object.defineProperty(e,\"__esModule\",{value:!0});var B=4,k=.5,u=1.5,C=function(o,e){return Math.sqrt(Math.pow(e.x-o.x,2)+Math.pow(e.y-o.y,2))};e.locate=i}]).default}),self.addEventListener(\"message\",function(o){var e=jsQR(o.data.data,o.data.width,o.data.height);e?postMessage(e.data):postMessage(null)});"], {
  type: 'application/javascript'
});

// Props that are allowed to change dynamicly
var propsKeys = ['delay', 'legacyMode', 'facingMode'];

module.exports = (_temp = _class = function (_Component) {
  _inherits(Reader, _Component);

  function Reader(props) {
    _classCallCheck(this, Reader);

    var _this = _possibleConstructorReturn(this, (Reader.__proto__ || Object.getPrototypeOf(Reader)).call(this, props));

    _this.els = {};


    _this.state = {
      mirrorVideo: false

      // Bind function to the class
    };_this.initiate = _this.initiate.bind(_this);
    _this.initiateLegacyMode = _this.initiateLegacyMode.bind(_this);
    _this.check = _this.check.bind(_this);
    _this.handleVideo = _this.handleVideo.bind(_this);
    _this.handleLoadStart = _this.handleLoadStart.bind(_this);
    _this.handleInputChange = _this.handleInputChange.bind(_this);
    _this.clearComponent = _this.clearComponent.bind(_this);
    _this.handleReaderLoad = _this.handleReaderLoad.bind(_this);
    _this.openImageDialog = _this.openImageDialog.bind(_this);
    _this.handleWorkerMessage = _this.handleWorkerMessage.bind(_this);
    _this.setRefFactory = _this.setRefFactory.bind(_this);
    return _this;
  }

  _createClass(Reader, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Initiate web worker execute handler according to mode.
      this.worker = new Worker(URL.createObjectURL(workerBlob));
      this.worker.onmessage = this.handleWorkerMessage;

      if (!this.props.legacyMode) {
        this.initiate();
      } else {
        this.initiateLegacyMode();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // React according to change in props
      var changedProps = havePropsChanged(this.props, nextProps, propsKeys);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = changedProps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var prop = _step.value;

          if (prop == 'facingMode') {
            this.clearComponent();
            this.initiate(nextProps);
            break;
          } else if (prop == 'delay') {
            if (this.props.delay == false && !nextProps.legacyMode) {
              this.timeout = setTimeout(this.check, nextProps.delay);
            }
            if (nextProps.delay == false) {
              clearTimeout(this.timeout);
            }
          } else if (prop == 'legacyMode') {
            if (this.props.legacyMode && !nextProps.legacyMode) {
              this.clearComponent();
              this.initiate(nextProps);
            } else {
              this.clearComponent();
              this.componentDidUpdate = this.initiateLegacyMode;
            }
            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (nextState !== this.state) {
        return true;
      }

      // Only render when the `propsKeys` have changed.
      var changedProps = havePropsChanged(this.props, nextProps, propsKeys);
      return changedProps.length > 0;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      // Stop web-worker and clear the component
      if (this.worker) {
        this.worker.terminate();
        this.worker = undefined;
      }
      this.clearComponent();
    }
  }, {
    key: 'clearComponent',
    value: function clearComponent() {
      // Remove all event listeners and variables
      if (this.timeout) {
        clearTimeout(this.timeout);
        this.timeout = undefined;
      }
      if (this.stopCamera) {
        this.stopCamera();
      }
      if (this.reader) {
        this.reader.removeEventListener('load', this.handleReaderLoad);
      }
      if (this.els.img) {
        this.els.img.removeEventListener('load', this.check);
      }
    }
  }, {
    key: 'initiate',
    value: function initiate() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var onError = props.onError,
          facingMode = props.facingMode;

      // Check browser facingMode constraint support
      // Firefox ignores facingMode or deviceId constraints

      var isFirefox = /firefox/i.test(navigator.userAgent);
      var supported = {};
      if (navigator.mediaDevices && typeof navigator.mediaDevices.getSupportedConstraints === 'function') {
        supported = navigator.mediaDevices.getSupportedConstraints();
      }
      var constraints = {};

      if (supported.facingMode) {
        constraints.facingMode = { ideal: facingMode };
      }
      if (supported.frameRate) {
        constraints.frameRate = { ideal: 25, min: 10 };
      }

      var vConstraintsPromise = supported.facingMode || isFirefox ? Promise.resolve(props.constraints || constraints) : getDeviceId(facingMode).then(function (deviceId) {
        return Object.assign({}, { deviceId: deviceId }, props.constraints);
      });

      vConstraintsPromise.then(function (video) {
        return navigator.mediaDevices.getUserMedia({ video: video });
      }).then(this.handleVideo).catch(onError);
    }
  }, {
    key: 'handleVideo',
    value: function handleVideo(stream) {
      var preview = this.els.preview;
      var facingMode = this.props.facingMode;

      // Preview element hasn't been rendered so wait for it.

      if (!preview) {
        return setTimeout(this.handleVideo, 200, stream);
      }

      // Handle different browser implementations of MediaStreams as src
      if ((preview || {}).srcObject !== undefined) {
        preview.srcObject = stream;
      } else if (preview.mozSrcObject !== undefined) {
        preview.mozSrcObject = stream;
      } else if (window.URL.createObjectURL) {
        preview.src = window.URL.createObjectURL(stream);
      } else if (window.webkitURL) {
        preview.src = window.webkitURL.createObjectURL(stream);
      } else {
        preview.src = stream;
      }

      // IOS play in fullscreen
      preview.playsInline = true;

      var streamTrack = stream.getTracks()[0];
      // Assign `stopCamera` so the track can be stopped once component is cleared
      this.stopCamera = streamTrack.stop.bind(streamTrack);

      preview.addEventListener('loadstart', this.handleLoadStart);

      this.setState({ mirrorVideo: facingMode == 'user', streamLabel: streamTrack.label });
    }
  }, {
    key: 'handleLoadStart',
    value: function handleLoadStart() {
      var _props = this.props,
          delay = _props.delay,
          onLoad = _props.onLoad;
      var _state = this.state,
          mirrorVideo = _state.mirrorVideo,
          streamLabel = _state.streamLabel;

      var preview = this.els.preview;
      preview.play();

      if (typeof onLoad == 'function') {
        onLoad({ mirrorVideo: mirrorVideo, streamLabel: streamLabel });
      }

      if (typeof delay == 'number') {
        this.timeout = setTimeout(this.check, delay);
      }

      // Some browsers call loadstart continuously
      preview.removeEventListener('loadstart', this.handleLoadStart);
    }
  }, {
    key: 'check',
    value: function check() {
      var _props2 = this.props,
          legacyMode = _props2.legacyMode,
          resolution = _props2.resolution,
          delay = _props2.delay;
      var _els = this.els,
          preview = _els.preview,
          canvas = _els.canvas,
          img = _els.img;

      // Get image/video dimensions

      var width = Math.floor(legacyMode ? img.naturalWidth : preview.videoWidth);
      var height = Math.floor(legacyMode ? img.naturalHeight : preview.videoHeight);

      // Canvas draw offsets
      var hozOffset = 0;
      var vertOffset = 0;

      // Scale image to correct resolution
      if (legacyMode) {
        // Keep image aspect ratio
        var greatestSize = width > height ? width : height;
        var ratio = resolution / greatestSize;

        height = ratio * height;
        width = ratio * width;

        canvas.width = width;
        canvas.height = height;
      } else {
        // Crop image to fit 1:1 aspect ratio
        var smallestSize = width < height ? width : height;
        var _ratio = resolution / smallestSize;

        height = _ratio * height;
        width = _ratio * width;

        vertOffset = (height - resolution) / 2 * -1;
        hozOffset = (width - resolution) / 2 * -1;

        canvas.width = resolution;
        canvas.height = resolution;
      }

      var previewIsPlaying = preview && preview.readyState === preview.HAVE_ENOUGH_DATA;

      if (legacyMode || previewIsPlaying) {
        var ctx = canvas.getContext('2d');

        ctx.drawImage(legacyMode ? img : preview, hozOffset, vertOffset, width, height);

        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        // Send data to web-worker
        this.worker.postMessage(imageData);
      } else {
        // Preview not ready -> check later
        this.timeout = setTimeout(this.check, delay);
      }
    }
  }, {
    key: 'handleWorkerMessage',
    value: function handleWorkerMessage(e) {
      var _props3 = this.props,
          onScan = _props3.onScan,
          legacyMode = _props3.legacyMode,
          delay = _props3.delay;

      var decoded = e.data;
      onScan(decoded || null);

      if (!legacyMode && typeof delay == 'number' && this.worker) {
        this.timeout = setTimeout(this.check, delay);
      }
    }
  }, {
    key: 'initiateLegacyMode',
    value: function initiateLegacyMode() {
      this.reader = new FileReader();
      this.reader.addEventListener('load', this.handleReaderLoad);
      this.els.img.addEventListener('load', this.check, false);

      // Reset componentDidUpdate
      this.componentDidUpdate = undefined;

      if (typeof this.props.onLoad == 'function') {
        this.props.onLoad();
      }
    }
  }, {
    key: 'handleInputChange',
    value: function handleInputChange(e) {
      var selectedImg = e.target.files[0];
      this.reader.readAsDataURL(selectedImg);
    }
  }, {
    key: 'handleReaderLoad',
    value: function handleReaderLoad(e) {
      // Set selected image blob as img source
      this.els.img.src = e.target.result;
    }
  }, {
    key: 'openImageDialog',
    value: function openImageDialog() {
      // Function to be executed by parent in user action context to trigger img file uploader
      this.els.input.click();
    }
  }, {
    key: 'setRefFactory',
    value: function setRefFactory(key) {
      var _this2 = this;

      return function (element) {
        _this2.els[key] = element;
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          style = _props4.style,
          className = _props4.className,
          onImageLoad = _props4.onImageLoad,
          legacyMode = _props4.legacyMode,
          showViewFinder = _props4.showViewFinder,
          facingMode = _props4.facingMode;


      var containerStyle = {
        overflow: 'hidden',
        position: 'relative',
        width: '100%',
        paddingTop: '100%'
      };
      var hiddenStyle = { display: 'none' };
      var previewStyle = {
        top: 0,
        left: 0,
        display: 'block',
        position: 'absolute',
        overflow: 'hidden',
        width: '100%',
        height: '100%'
      };
      var videoPreviewStyle = _extends({}, previewStyle, {
        objectFit: 'cover',
        transform: this.state.mirrorVideo ? 'scaleX(-1)' : undefined
      });
      var imgPreviewStyle = _extends({}, previewStyle, {
        objectFit: 'scale-down'
      });

      var viewFinderStyle = {
        top: 0,
        left: 0,
        zIndex: 1,
        boxSizing: 'border-box',
        border: '50px solid rgba(0, 0, 0, 0.3)',
        boxShadow: 'inset 0 0 0 5px rgba(255, 0, 0, 0.5)',
        position: 'absolute',
        width: '100%',
        height: '100%'
      };

      return React.createElement(
        'section',
        { className: className, style: style },
        React.createElement(
          'section',
          { style: containerStyle },
          !legacyMode && showViewFinder ? React.createElement('div', { style: viewFinderStyle }) : null,
          legacyMode ? React.createElement('input', {
            style: hiddenStyle,
            type: 'file',
            accept: 'image/*',
            ref: this.setRefFactory('input'),
            onChange: this.handleInputChange
          }) : null,
          legacyMode ? React.createElement('img', { style: imgPreviewStyle, ref: this.setRefFactory('img'), onLoad: onImageLoad }) : React.createElement('video', { style: videoPreviewStyle, ref: this.setRefFactory('preview') }),
          React.createElement('canvas', { style: hiddenStyle, ref: this.setRefFactory('canvas') })
        )
      );
    }
  }]);

  return Reader;
}(Component), _class.propTypes = {
  onScan: PropTypes.func.isRequired,
  onError: PropTypes.func.isRequired,
  onLoad: PropTypes.func,
  onImageLoad: PropTypes.func,
  delay: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
  facingMode: PropTypes.oneOf(['user', 'environment']),
  legacyMode: PropTypes.bool,
  resolution: PropTypes.number,
  showViewFinder: PropTypes.bool,
  style: PropTypes.any,
  className: PropTypes.string,
  constraints: PropTypes.object
}, _class.defaultProps = {
  delay: 500,
  resolution: 600,
  facingMode: 'environment',
  showViewFinder: true,
  constraints: null
}, _temp);

/***/ }),

/***/ 1346:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _require = __webpack_require__(1347),
    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;

function defaultDeviceIdChooser(filteredDevices, videoDevices, facingMode) {
  if (filteredDevices.length > 0) {
    return filteredDevices[0].deviceId;
  }
  if (videoDevices.length == 1 || facingMode == 'user') {
    return videoDevices[0].deviceId;
  }
  return videoDevices[1].deviceId;
}

var getFacingModePattern = function getFacingModePattern(facingMode) {
  return facingMode == 'environment' ? /rear|back|environment/ig : /front|user|face/ig;
};

function getDeviceId(facingMode) {
  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser;

  // Get manual deviceId from available devices.
  return new Promise(function (resolve, reject) {
    var enumerateDevices = void 0;
    try {
      enumerateDevices = navigator.mediaDevices.enumerateDevices();
    } catch (err) {
      reject(new NoVideoInputDevicesError());
    }
    enumerateDevices.then(function (devices) {
      // Filter out non-videoinputs
      var videoDevices = devices.filter(function (device) {
        return device.kind == 'videoinput';
      });

      if (videoDevices.length < 1) {
        reject(new NoVideoInputDevicesError());
        return;
      }

      var pattern = getFacingModePattern(facingMode);

      // Filter out video devices without the pattern
      var filteredDevices = videoDevices.filter(function (_ref) {
        var label = _ref.label;
        return pattern.test(label);
      });

      resolve(chooseDeviceId(filteredDevices, videoDevices, facingMode));
    });
  });
}

module.exports = { getDeviceId: getDeviceId, getFacingModePattern: getFacingModePattern };

/***/ }),

/***/ 1347:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function NoVideoInputDevicesError() {
  this.name = 'NoVideoInputDevicesError';
  this.message = 'No video input devices found';
}
NoVideoInputDevicesError.prototype = new Error();

module.exports = {
  NoVideoInputDevicesError: NoVideoInputDevicesError
};

/***/ }),

/***/ 1348:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function havePropsChanged(prevProps, nextProps, keys) {
  var changedProps = [];
  keys.forEach(function (key) {
    if (prevProps[key] != nextProps[key]) {
      changedProps.push(key);
    }
  });
  return changedProps;
};

/***/ }),

/***/ 1349:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * From https://gist.github.com/nolanlawson/10340255
 */
module.exports = function createBlob(parts, properties) {
  parts = parts || [];
  properties = properties || {};
  try {
    return new Blob(parts, properties);
  } catch (e) {
    if (e.name !== "TypeError") {
      throw e;
    }
    var BlobBuilder = window.BlobBuilder || window.MSBlobBuilder || window.MozBlobBuilder || window.WebKitBlobBuilder;
    var builder = new BlobBuilder();
    for (var i = 0; i < parts.length; i += 1) {
      builder.append(parts[i]);
    }
    return builder.getBlob(properties.type);
  }
};

/***/ }),

/***/ 1350:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adapter_factory_js__ = __webpack_require__(1351);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





const adapter =
  Object(__WEBPACK_IMPORTED_MODULE_0__adapter_factory_js__["a" /* adapterFactory */])({window: typeof window === 'undefined' ? undefined : window});
/* harmony default export */ __webpack_exports__["default"] = (adapter);


/***/ }),

/***/ 1351:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = adapterFactory;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(423);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__ = __webpack_require__(1352);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__edge_edge_shim__ = __webpack_require__(1355);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__ = __webpack_require__(1360);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__ = __webpack_require__(1363);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_shim__ = __webpack_require__(1364);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */


  // Browser shims.






// Shimming starts here.
function adapterFactory({window} = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimEdge: true,
  shimSafari: true,
}) {
  // Utils.
  const logging = __WEBPACK_IMPORTED_MODULE_0__utils__["h" /* log */];
  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils__["c" /* detectBrowser */](window);

  const adapter = {
    browserDetails,
    commonShim: __WEBPACK_IMPORTED_MODULE_5__common_shim__,
    extractVersion: __WEBPACK_IMPORTED_MODULE_0__utils__["f" /* extractVersion */],
    disableLog: __WEBPACK_IMPORTED_MODULE_0__utils__["d" /* disableLog */],
    disableWarnings: __WEBPACK_IMPORTED_MODULE_0__utils__["e" /* disableWarnings */]
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!__WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__ || !__WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimPeerConnection"] ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__;

      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimGetUserMedia"](window);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimMediaStream"](window);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimPeerConnection"](window);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimOnTrack"](window);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimAddTrackRemoveTrack"](window);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimGetSendersWithDtmf"](window);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimGetStats"](window);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimSenderReceiverGetStats"](window);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["fixNegotiationNeeded"](window);

      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimRTCIceCandidate"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimConnectionState"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimMaxMessageSize"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimSendThrowTypeError"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["removeAllowExtmapMixed"](window);
      break;
    case 'firefox':
      if (!__WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__ || !__WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimPeerConnection"] ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__;

      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimGetUserMedia"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimPeerConnection"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimOnTrack"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimRemoveStream"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimSenderGetStats"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimReceiverGetStats"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimRTCDataChannel"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimAddTransceiver"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimGetParameters"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimCreateOffer"](window);
      __WEBPACK_IMPORTED_MODULE_3__firefox_firefox_shim__["shimCreateAnswer"](window);

      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimRTCIceCandidate"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimConnectionState"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimMaxMessageSize"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimSendThrowTypeError"](window);
      break;
    case 'edge':
      if (!__WEBPACK_IMPORTED_MODULE_2__edge_edge_shim__ || !__WEBPACK_IMPORTED_MODULE_2__edge_edge_shim__["shimPeerConnection"] || !options.shimEdge) {
        logging('MS edge shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = __WEBPACK_IMPORTED_MODULE_2__edge_edge_shim__;

      __WEBPACK_IMPORTED_MODULE_2__edge_edge_shim__["shimGetUserMedia"](window);
      __WEBPACK_IMPORTED_MODULE_2__edge_edge_shim__["shimGetDisplayMedia"](window);
      __WEBPACK_IMPORTED_MODULE_2__edge_edge_shim__["shimPeerConnection"](window);
      __WEBPACK_IMPORTED_MODULE_2__edge_edge_shim__["shimReplaceTrack"](window);

      // the edge shim implements the full RTCIceCandidate object.

      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimMaxMessageSize"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimSendThrowTypeError"](window);
      break;
    case 'safari':
      if (!__WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__ || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__;

      __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__["shimRTCIceServerUrls"](window);
      __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__["shimCreateOfferLegacy"](window);
      __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__["shimCallbacksAPI"](window);
      __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__["shimLocalStreamsAPI"](window);
      __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__["shimRemoteStreamsAPI"](window);
      __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__["shimTrackEventTransceiver"](window);
      __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__["shimGetUserMedia"](window);
      __WEBPACK_IMPORTED_MODULE_4__safari_safari_shim__["shimAudioContext"](window);

      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimRTCIceCandidate"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimMaxMessageSize"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["shimSendThrowTypeError"](window);
      __WEBPACK_IMPORTED_MODULE_5__common_shim__["removeAllowExtmapMixed"](window);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
}


/***/ }),

/***/ 1352:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimMediaStream"] = shimMediaStream;
/* harmony export (immutable) */ __webpack_exports__["shimOnTrack"] = shimOnTrack;
/* harmony export (immutable) */ __webpack_exports__["shimGetSendersWithDtmf"] = shimGetSendersWithDtmf;
/* harmony export (immutable) */ __webpack_exports__["shimGetStats"] = shimGetStats;
/* harmony export (immutable) */ __webpack_exports__["shimSenderReceiverGetStats"] = shimSenderReceiverGetStats;
/* harmony export (immutable) */ __webpack_exports__["shimAddTrackRemoveTrackWithNative"] = shimAddTrackRemoveTrackWithNative;
/* harmony export (immutable) */ __webpack_exports__["shimAddTrackRemoveTrack"] = shimAddTrackRemoveTrack;
/* harmony export (immutable) */ __webpack_exports__["shimPeerConnection"] = shimPeerConnection;
/* harmony export (immutable) */ __webpack_exports__["fixNegotiationNeeded"] = fixNegotiationNeeded;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(423);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getusermedia__ = __webpack_require__(1353);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return __WEBPACK_IMPORTED_MODULE_1__getusermedia__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__getdisplaymedia__ = __webpack_require__(1354);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return __WEBPACK_IMPORTED_MODULE_2__getdisplaymedia__["a"]; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */






function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}

function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
      window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get() {
        return this._ontrack;
      },
      set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        if (!this._ontrackpoly) {
          this._ontrackpoly = (e) => {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', te => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === te.track.id);
              } else {
                receiver = {track: te.track};
              }

              const event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(track => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === track.id);
              } else {
                receiver = {track};
              }
              const event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
          };
          this.addEventListener('addstream', this._ontrackpoly);
        }
        return origSetRemoteDescription.apply(this, arguments);
      };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    __WEBPACK_IMPORTED_MODULE_0__utils_js__["i" /* wrapPeerConnectionEvent */](window, 'track', e => {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver',
          {value: {receiver: e.receiver}});
      }
      return e;
    });
  }
}

function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (typeof window === 'object' && window.RTCPeerConnection &&
      !('getSenders' in window.RTCPeerConnection.prototype) &&
      'createDTMFSender' in window.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function(pc, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };
      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack =
        function addTrack(track, stream) {
          let sender = origAddTrack.apply(this, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(this, track);
            this._senders.push(sender);
          }
          return sender;
        };

      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack =
        function removeTrack(sender) {
          origRemoveTrack.apply(this, arguments);
          const idx = this._senders.indexOf(sender);
          if (idx !== -1) {
            this._senders.splice(idx, 1);
          }
        };
    }
    const origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };

    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        this._senders = this._senders || [];
        origRemoveStream.apply(this, [stream]);

        stream.getTracks().forEach(track => {
          const sender = this._senders.find(s => s.track === track);
          if (sender) { // remove sender
            this._senders.splice(this._senders.indexOf(sender), 1);
          }
        });
      };
  } else if (typeof window === 'object' && window.RTCPeerConnection &&
             'getSenders' in window.RTCPeerConnection.prototype &&
             'createDTMFSender' in window.RTCPeerConnection.prototype &&
             window.RTCRtpSender &&
             !('dtmf' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };

    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}

function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }

  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 ||
        typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }

    const fixChromeStats_ = function(response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach(report => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(name => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });

      return standardReport;
    };

    // shim getStats with maplike support
    const makeMapStats = function(stats) {
      return new Map(Object.keys(stats).map(key => [key, stats[key]]));
    };

    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };

      return origGetStats.apply(this, [successCallbackWrapper_,
        selector]);
    }

    // promise-support
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [
        function(response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        }, reject]);
    }).then(onSucc, onErr);
  };
}

function shimSenderReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }

    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then(result =>
        /* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */
        __WEBPACK_IMPORTED_MODULE_0__utils_js__["g" /* filterStats */](result, sender.track, true));
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers =
        function getReceivers() {
          const receivers = origGetReceivers.apply(this, []);
          receivers.forEach(receiver => receiver._pc = this);
          return receivers;
        };
    }
    __WEBPACK_IMPORTED_MODULE_0__utils_js__["i" /* wrapPeerConnectionEvent */](window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then(result =>
        __WEBPACK_IMPORTED_MODULE_0__utils_js__["g" /* filterStats */](result, receiver.track, false));
    };
  }

  if (!('getStats' in window.RTCRtpSender.prototype &&
      'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 &&
        arguments[0] instanceof window.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach(s => {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(r => {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || (sender && receiver)) {
        return Promise.reject(new DOMException(
          'There are more than one sender or receiver for the track.',
          'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException(
        'There is no sender or receiver for the track.',
        'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}

function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams)
        .map(streamId => this._shimmedLocalStreams[streamId][0]);
    };

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      const sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders()
      .filter(newSender => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(streamId => {
          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            this._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (this._shimmedLocalStreams[streamId].length === 1) {
            delete this._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
}

function shimAddTrackRemoveTrack(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils_js__["c" /* detectBrowser */](window);
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack &&
      browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  const origGetLocalStreams = window.RTCPeerConnection.prototype
      .getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      const nativeStreams = origGetLocalStreams.apply(this);
      this._reverseStreams = this._reverseStreams || {};
      return nativeStreams.map(stream => this._reverseStreams[stream.id]);
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      const newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};

      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);
      delete this._reverseStreams[(this._streams[stream.id] ?
          this._streams[stream.id].id : stream.id)];
      delete this._streams[stream.id];
    };

  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      const streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(t => t === track)) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }

      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      const oldStream = this._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(() => {
          this.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        const newStream = new window.MediaStream([track]);
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        this.addStream(newStream);
      }
      return this.getSenders().find(s => s.track === track);
    };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
          externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
          internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function(method) {
    const nativeMethod = window.RTCPeerConnection.prototype[method];
    const methodObj = {[method]() {
      const args = arguments;
      const isLegacyCall = arguments.length &&
          typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [
          (description) => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          },
          (err) => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          }, arguments[2]
        ]);
      }
      return nativeMethod.apply(this, arguments)
      .then(description => replaceInternalStreamId(this, description));
    }};
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });

  const origSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(this, arguments);
      }
      arguments[0] = replaceExternalStreamId(this, arguments[0]);
      return origSetLocalDescription.apply(this, arguments);
    };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  const origLocalDescription = Object.getOwnPropertyDescriptor(
      window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype,
      'localDescription', {
        get() {
          const description = origLocalDescription.get.apply(this);
          if (description.type === '') {
            return description;
          }
          return replaceInternalStreamId(this, description);
        }
      });

  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      const isLocal = sender._pc === this;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
            'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      this._streams = this._streams || {};
      let stream;
      Object.keys(this._streams).forEach(streamid => {
        const hasTrack = this._streams[streamid].getTracks()
          .find(track => sender.track === track);
        if (hasTrack) {
          stream = this._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          this.removeStream(this._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        this.dispatchEvent(new Event('negotiationneeded'));
      }
    };
}

function shimPeerConnection(window) {
  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils_js__["c" /* detectBrowser */](window);

  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  const addIceCandidateNullSupported =
    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }

  // support for addIceCandidate(null or undefined)
  const nativeAddIceCandidate =
      window.RTCPeerConnection.prototype.addIceCandidate;
  window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!addIceCandidateNullSupported && !arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions. Native support planned for Chrome M77.
      if (browserDetails.version < 78 &&
        arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window) {
  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils_js__["c" /* detectBrowser */](window);
  __WEBPACK_IMPORTED_MODULE_0__utils_js__["i" /* wrapPeerConnectionEvent */](window, 'negotiationneeded', e => {
    const pc = e.target;
    if (browserDetails.version < 72 || (pc.getConfiguration &&
        pc.getConfiguration().sdpSemantics === 'plan-b')) {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}


/***/ }),

/***/ 1353:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetUserMedia;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(423);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


const logging = __WEBPACK_IMPORTED_MODULE_0__utils_js__["h" /* log */];

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (!navigator.mediaDevices) {
    return;
  }

  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils_js__["c" /* detectBrowser */](window);

  const constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    const cc = {};
    Object.keys(c).forEach(key => {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      const oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        let oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(mix => {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  const shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      const remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      let face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      const getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
          .then(devices => {
            devices = devices.filter(d => d.kind === 'videoinput');
            let dev = devices.find(d => matches.some(match =>
              d.label.toLowerCase().includes(match)));
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
                                                        {ideal: dev.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  const shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  const getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, c => {
      navigator.webkitGetUserMedia(c, onSuccess, e => {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(track => {
            track.stop();
          });
          throw new DOMException('', 'NotFoundError');
        }
        return stream;
      }, e => Promise.reject(shimError_(e))));
    };
  }
}


/***/ }),

/***/ 1354:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetDisplayMedia;
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */

function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' +
        'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      return getSourceId(constraints)
        .then(sourceId => {
          const widthSpecified = constraints.video && constraints.video.width;
          const heightSpecified = constraints.video &&
            constraints.video.height;
          const frameRateSpecified = constraints.video &&
            constraints.video.frameRate;
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: frameRateSpecified || 3
            }
          };
          if (widthSpecified) {
            constraints.video.mandatory.maxWidth = widthSpecified;
          }
          if (heightSpecified) {
            constraints.video.mandatory.maxHeight = heightSpecified;
          }
          return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
}


/***/ }),

/***/ 1355:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimPeerConnection"] = shimPeerConnection;
/* harmony export (immutable) */ __webpack_exports__["shimReplaceTrack"] = shimReplaceTrack;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(423);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__filtericeservers__ = __webpack_require__(1356);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rtcpeerconnection_shim__ = __webpack_require__(1357);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rtcpeerconnection_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rtcpeerconnection_shim__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__getusermedia__ = __webpack_require__(1358);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return __WEBPACK_IMPORTED_MODULE_3__getusermedia__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__getdisplaymedia__ = __webpack_require__(1359);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return __WEBPACK_IMPORTED_MODULE_4__getdisplaymedia__["a"]; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */









function shimPeerConnection(window) {
  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils__["c" /* detectBrowser */](window);

  if (window.RTCIceGatherer) {
    if (!window.RTCIceCandidate) {
      window.RTCIceCandidate = function RTCIceCandidate(args) {
        return args;
      };
    }
    if (!window.RTCSessionDescription) {
      window.RTCSessionDescription = function RTCSessionDescription(args) {
        return args;
      };
    }
    // this adds an additional event listener to MediaStrackTrack that signals
    // when a tracks enabled property was changed. Workaround for a bug in
    // addStream, see below. No longer required in 15025+
    if (browserDetails.version < 15025) {
      const origMSTEnabled = Object.getOwnPropertyDescriptor(
          window.MediaStreamTrack.prototype, 'enabled');
      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
        set(value) {
          origMSTEnabled.set.call(this, value);
          const ev = new Event('enabled');
          ev.enabled = value;
          this.dispatchEvent(ev);
        }
      });
    }
  }

  // ORTC defines the DTMF sender a bit different.
  // https://github.com/w3c/ortc/issues/714
  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = new window.RTCDtmfSender(this);
          } else if (this.track.kind === 'video') {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
  // Edge currently only implements the RTCDtmfSender, not the
  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*
  if (window.RTCDtmfSender && !window.RTCDTMFSender) {
    window.RTCDTMFSender = window.RTCDtmfSender;
  }

  const RTCPeerConnectionShim = __WEBPACK_IMPORTED_MODULE_2_rtcpeerconnection_shim___default()(window,
      browserDetails.version);
  window.RTCPeerConnection = function RTCPeerConnection(config) {
    if (config && config.iceServers) {
      config.iceServers = Object(__WEBPACK_IMPORTED_MODULE_1__filtericeservers__["a" /* filterIceServers */])(config.iceServers,
        browserDetails.version);
      __WEBPACK_IMPORTED_MODULE_0__utils__["h" /* log */]('ICE servers after filtering:', config.iceServers);
    }
    return new RTCPeerConnectionShim(config);
  };
  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;
}

function shimReplaceTrack(window) {
  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
  if (window.RTCRtpSender &&
      !('replaceTrack' in window.RTCRtpSender.prototype)) {
    window.RTCRtpSender.prototype.replaceTrack =
        window.RTCRtpSender.prototype.setTrack;
  }
}


/***/ }),

/***/ 1356:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = filterIceServers;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(423);
/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */



// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  let hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(server => {
    if (server && (server.urls || server.url)) {
      let urls = server.urls || server.url;
      if (server.url && !server.urls) {
        __WEBPACK_IMPORTED_MODULE_0__utils__["b" /* deprecated */]('RTCIceServer.url', 'RTCIceServer.urls');
      }
      const isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(url => {
        // filter STUN unconditionally.
        if (url.indexOf('stun:') === 0) {
          return false;
        }

        const validTurn = url.startsWith('turn') &&
            !url.startsWith('turn:[') &&
            url.includes('transport=udp');
        if (validTurn && !hasTurn) {
          hasTurn = true;
          return true;
        }
        return validTurn && !hasTurn;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}


/***/ }),

/***/ 1357:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var SDPUtils = __webpack_require__(867);

function fixStatsType(stat) {
  return {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  }[stat.type] || stat.type;
}

function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : dtlsRole || 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    var trackId = transceiver.rtpSender._initialTrackId ||
        transceiver.rtpSender.track.id;
    transceiver.rtpSender._initialTrackId = trackId;
    // spec.
    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +
        trackId + '\r\n';
    sdp += 'a=' + msid;
    // for Chrome. Legacy should no longer be required.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;

    // RTX
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
}

// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        console.warn('RTCIceServer.url is deprecated! Use urls instead.');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}

// Determines the intersection of local and remote capabilities.
function getCommonCapabilities(localCapabilities, remoteCapabilities) {
  var commonCapabilities = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: []
  };

  var findCodecByPayloadType = function(pt, codecs) {
    pt = parseInt(pt, 10);
    for (var i = 0; i < codecs.length; i++) {
      if (codecs[i].payloadType === pt ||
          codecs[i].preferredPayloadType === pt) {
        return codecs[i];
      }
    }
  };

  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {
    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
    return lCodec && rCodec &&
        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
  };

  localCapabilities.codecs.forEach(function(lCodec) {
    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
      var rCodec = remoteCapabilities.codecs[i];
      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
          lCodec.clockRate === rCodec.clockRate) {
        if (lCodec.name.toLowerCase() === 'rtx' &&
            lCodec.parameters && rCodec.parameters.apt) {
          // for RTX we need to find the local rtx that has a apt
          // which points to the same local codec as the remote one.
          if (!rtxCapabilityMatches(lCodec, rCodec,
              localCapabilities.codecs, remoteCapabilities.codecs)) {
            continue;
          }
        }
        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
        // number of channels is the highest common number of channels
        rCodec.numChannels = Math.min(lCodec.numChannels,
            rCodec.numChannels);
        // push rCodec so we reply with offerer payload type
        commonCapabilities.codecs.push(rCodec);

        // determine common feedback mechanisms
        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
            if (lCodec.rtcpFeedback[j].type === fb.type &&
                lCodec.rtcpFeedback[j].parameter === fb.parameter) {
              return true;
            }
          }
          return false;
        });
        // FIXME: also need to determine .parameters
        //  see https://github.com/openpeer/ortc/issues/569
        break;
      }
    }
  });

  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
    for (var i = 0; i < remoteCapabilities.headerExtensions.length;
         i++) {
      var rHeaderExtension = remoteCapabilities.headerExtensions[i];
      if (lHeaderExtension.uri === rHeaderExtension.uri) {
        commonCapabilities.headerExtensions.push(rHeaderExtension);
        break;
      }
    }
  });

  // FIXME: fecMechanisms
  return commonCapabilities;
}

// is action=setLocalDescription with type allowed in signalingState
function isActionAllowedInSignalingState(action, type, signalingState) {
  return {
    offer: {
      setLocalDescription: ['stable', 'have-local-offer'],
      setRemoteDescription: ['stable', 'have-remote-offer']
    },
    answer: {
      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']
    }
  }[type][action].indexOf(signalingState) !== -1;
}

function maybeAddCandidate(iceTransport, candidate) {
  // Edge's internal representation adds some fields therefore
  // not all fieldѕ are taken into account.
  var alreadyAdded = iceTransport.getRemoteCandidates()
      .find(function(remoteCandidate) {
        return candidate.foundation === remoteCandidate.foundation &&
            candidate.ip === remoteCandidate.ip &&
            candidate.port === remoteCandidate.port &&
            candidate.priority === remoteCandidate.priority &&
            candidate.protocol === remoteCandidate.protocol &&
            candidate.type === remoteCandidate.type;
      });
  if (!alreadyAdded) {
    iceTransport.addRemoteCandidate(candidate);
  }
  return !alreadyAdded;
}


function makeError(name, description) {
  var e = new Error(description);
  e.name = name;
  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names
  e.code = {
    NotSupportedError: 9,
    InvalidStateError: 11,
    InvalidAccessError: 15,
    TypeError: undefined,
    OperationError: undefined
  }[name];
  return e;
}

module.exports = function(window, edgeVersion) {
  // https://w3c.github.io/mediacapture-main/#mediastream
  // Helper function to add the track to the stream and
  // dispatch the event ourselves.
  function addTrackToStreamAndFireEvent(track, stream) {
    stream.addTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',
        {track: track}));
  }

  function removeTrackFromStreamAndFireEvent(track, stream) {
    stream.removeTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',
        {track: track}));
  }

  function fireAddTrack(pc, track, receiver, streams) {
    var trackEvent = new Event('track');
    trackEvent.track = track;
    trackEvent.receiver = receiver;
    trackEvent.transceiver = {receiver: receiver};
    trackEvent.streams = streams;
    window.setTimeout(function() {
      pc._dispatchEvent('track', trackEvent);
    });
  }

  var RTCPeerConnection = function(config) {
    var pc = this;

    var _eventTarget = document.createDocumentFragment();
    ['addEventListener', 'removeEventListener', 'dispatchEvent']
        .forEach(function(method) {
          pc[method] = _eventTarget[method].bind(_eventTarget);
        });

    this.canTrickleIceCandidates = null;

    this.needNegotiation = false;

    this.localStreams = [];
    this.remoteStreams = [];

    this._localDescription = null;
    this._remoteDescription = null;

    this.signalingState = 'stable';
    this.iceConnectionState = 'new';
    this.connectionState = 'new';
    this.iceGatheringState = 'new';

    config = JSON.parse(JSON.stringify(config || {}));

    this.usingBundle = config.bundlePolicy === 'max-bundle';
    if (config.rtcpMuxPolicy === 'negotiate') {
      throw(makeError('NotSupportedError',
          'rtcpMuxPolicy \'negotiate\' is not supported'));
    } else if (!config.rtcpMuxPolicy) {
      config.rtcpMuxPolicy = 'require';
    }

    switch (config.iceTransportPolicy) {
      case 'all':
      case 'relay':
        break;
      default:
        config.iceTransportPolicy = 'all';
        break;
    }

    switch (config.bundlePolicy) {
      case 'balanced':
      case 'max-compat':
      case 'max-bundle':
        break;
      default:
        config.bundlePolicy = 'balanced';
        break;
    }

    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);

    this._iceGatherers = [];
    if (config.iceCandidatePoolSize) {
      for (var i = config.iceCandidatePoolSize; i > 0; i--) {
        this._iceGatherers.push(new window.RTCIceGatherer({
          iceServers: config.iceServers,
          gatherPolicy: config.iceTransportPolicy
        }));
      }
    } else {
      config.iceCandidatePoolSize = 0;
    }

    this._config = config;

    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
    // everything that is needed to describe a SDP m-line.
    this.transceivers = [];

    this._sdpSessionId = SDPUtils.generateSessionId();
    this._sdpSessionVersion = 0;

    this._dtlsRole = undefined; // role for a=setup to use in answers.

    this._isClosed = false;
  };

  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {
    configurable: true,
    get: function() {
      return this._localDescription;
    }
  });
  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {
    configurable: true,
    get: function() {
      return this._remoteDescription;
    }
  });

  // set up event handlers on prototype
  RTCPeerConnection.prototype.onicecandidate = null;
  RTCPeerConnection.prototype.onaddstream = null;
  RTCPeerConnection.prototype.ontrack = null;
  RTCPeerConnection.prototype.onremovestream = null;
  RTCPeerConnection.prototype.onsignalingstatechange = null;
  RTCPeerConnection.prototype.oniceconnectionstatechange = null;
  RTCPeerConnection.prototype.onconnectionstatechange = null;
  RTCPeerConnection.prototype.onicegatheringstatechange = null;
  RTCPeerConnection.prototype.onnegotiationneeded = null;
  RTCPeerConnection.prototype.ondatachannel = null;

  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {
    if (this._isClosed) {
      return;
    }
    this.dispatchEvent(event);
    if (typeof this['on' + name] === 'function') {
      this['on' + name](event);
    }
  };

  RTCPeerConnection.prototype._emitGatheringStateChange = function() {
    var event = new Event('icegatheringstatechange');
    this._dispatchEvent('icegatheringstatechange', event);
  };

  RTCPeerConnection.prototype.getConfiguration = function() {
    return this._config;
  };

  RTCPeerConnection.prototype.getLocalStreams = function() {
    return this.localStreams;
  };

  RTCPeerConnection.prototype.getRemoteStreams = function() {
    return this.remoteStreams;
  };

  // internal helper to create a transceiver object.
  // (which is not yet the same as the WebRTC 1.0 transceiver)
  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {
    var hasBundleTransport = this.transceivers.length > 0;
    var transceiver = {
      track: null,
      iceGatherer: null,
      iceTransport: null,
      dtlsTransport: null,
      localCapabilities: null,
      remoteCapabilities: null,
      rtpSender: null,
      rtpReceiver: null,
      kind: kind,
      mid: null,
      sendEncodingParameters: null,
      recvEncodingParameters: null,
      stream: null,
      associatedRemoteMediaStreams: [],
      wantReceive: true
    };
    if (this.usingBundle && hasBundleTransport) {
      transceiver.iceTransport = this.transceivers[0].iceTransport;
      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
    } else {
      var transports = this._createIceAndDtlsTransports();
      transceiver.iceTransport = transports.iceTransport;
      transceiver.dtlsTransport = transports.dtlsTransport;
    }
    if (!doNotAdd) {
      this.transceivers.push(transceiver);
    }
    return transceiver;
  };

  RTCPeerConnection.prototype.addTrack = function(track, stream) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call addTrack on a closed peerconnection.');
    }

    var alreadyExists = this.transceivers.find(function(s) {
      return s.track === track;
    });

    if (alreadyExists) {
      throw makeError('InvalidAccessError', 'Track already exists.');
    }

    var transceiver;
    for (var i = 0; i < this.transceivers.length; i++) {
      if (!this.transceivers[i].track &&
          this.transceivers[i].kind === track.kind) {
        transceiver = this.transceivers[i];
      }
    }
    if (!transceiver) {
      transceiver = this._createTransceiver(track.kind);
    }

    this._maybeFireNegotiationNeeded();

    if (this.localStreams.indexOf(stream) === -1) {
      this.localStreams.push(stream);
    }

    transceiver.track = track;
    transceiver.stream = stream;
    transceiver.rtpSender = new window.RTCRtpSender(track,
        transceiver.dtlsTransport);
    return transceiver.rtpSender;
  };

  RTCPeerConnection.prototype.addStream = function(stream) {
    var pc = this;
    if (edgeVersion >= 15025) {
      stream.getTracks().forEach(function(track) {
        pc.addTrack(track, stream);
      });
    } else {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      // Fixed in 15025 (or earlier)
      var clonedStream = stream.clone();
      stream.getTracks().forEach(function(track, idx) {
        var clonedTrack = clonedStream.getTracks()[idx];
        track.addEventListener('enabled', function(event) {
          clonedTrack.enabled = event.enabled;
        });
      });
      clonedStream.getTracks().forEach(function(track) {
        pc.addTrack(track, clonedStream);
      });
    }
  };

  RTCPeerConnection.prototype.removeTrack = function(sender) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call removeTrack on a closed peerconnection.');
    }

    if (!(sender instanceof window.RTCRtpSender)) {
      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +
          'does not implement interface RTCRtpSender.');
    }

    var transceiver = this.transceivers.find(function(t) {
      return t.rtpSender === sender;
    });

    if (!transceiver) {
      throw makeError('InvalidAccessError',
          'Sender was not created by this connection.');
    }
    var stream = transceiver.stream;

    transceiver.rtpSender.stop();
    transceiver.rtpSender = null;
    transceiver.track = null;
    transceiver.stream = null;

    // remove the stream from the set of local streams
    var localStreams = this.transceivers.map(function(t) {
      return t.stream;
    });
    if (localStreams.indexOf(stream) === -1 &&
        this.localStreams.indexOf(stream) > -1) {
      this.localStreams.splice(this.localStreams.indexOf(stream), 1);
    }

    this._maybeFireNegotiationNeeded();
  };

  RTCPeerConnection.prototype.removeStream = function(stream) {
    var pc = this;
    stream.getTracks().forEach(function(track) {
      var sender = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (sender) {
        pc.removeTrack(sender);
      }
    });
  };

  RTCPeerConnection.prototype.getSenders = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpSender;
    })
    .map(function(transceiver) {
      return transceiver.rtpSender;
    });
  };

  RTCPeerConnection.prototype.getReceivers = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpReceiver;
    })
    .map(function(transceiver) {
      return transceiver.rtpReceiver;
    });
  };


  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,
      usingBundle) {
    var pc = this;
    if (usingBundle && sdpMLineIndex > 0) {
      return this.transceivers[0].iceGatherer;
    } else if (this._iceGatherers.length) {
      return this._iceGatherers.shift();
    }
    var iceGatherer = new window.RTCIceGatherer({
      iceServers: this._config.iceServers,
      gatherPolicy: this._config.iceTransportPolicy
    });
    Object.defineProperty(iceGatherer, 'state',
        {value: 'new', writable: true}
    );

    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];
    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {
      var end = !event.candidate || Object.keys(event.candidate).length === 0;
      // polyfill since RTCIceGatherer.state is not implemented in
      // Edge 10547 yet.
      iceGatherer.state = end ? 'completed' : 'gathering';
      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {
        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);
      }
    };
    iceGatherer.addEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    return iceGatherer;
  };

  // start gathering from an RTCIceGatherer.
  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {
    var pc = this;
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer.onlocalcandidate) {
      return;
    }
    var bufferedCandidateEvents =
      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;
    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;
    iceGatherer.removeEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    iceGatherer.onlocalcandidate = function(evt) {
      if (pc.usingBundle && sdpMLineIndex > 0) {
        // if we know that we use bundle we can drop candidates with
        // ѕdpMLineIndex > 0. If we don't do this then our state gets
        // confused since we dispose the extra ice gatherer.
        return;
      }
      var event = new Event('icecandidate');
      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

      var cand = evt.candidate;
      // Edge emits an empty object for RTCIceCandidateComplete‥
      var end = !cand || Object.keys(cand).length === 0;
      if (end) {
        // polyfill since RTCIceGatherer.state is not implemented in
        // Edge 10547 yet.
        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {
          iceGatherer.state = 'completed';
        }
      } else {
        if (iceGatherer.state === 'new') {
          iceGatherer.state = 'gathering';
        }
        // RTCIceCandidate doesn't have a component, needs to be added
        cand.component = 1;
        // also the usernameFragment. TODO: update SDP to take both variants.
        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;

        var serializedCandidate = SDPUtils.writeCandidate(cand);
        event.candidate = Object.assign(event.candidate,
            SDPUtils.parseCandidate(serializedCandidate));

        event.candidate.candidate = serializedCandidate;
        event.candidate.toJSON = function() {
          return {
            candidate: event.candidate.candidate,
            sdpMid: event.candidate.sdpMid,
            sdpMLineIndex: event.candidate.sdpMLineIndex,
            usernameFragment: event.candidate.usernameFragment
          };
        };
      }

      // update local description.
      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);
      if (!end) {
        sections[event.candidate.sdpMLineIndex] +=
            'a=' + event.candidate.candidate + '\r\n';
      } else {
        sections[event.candidate.sdpMLineIndex] +=
            'a=end-of-candidates\r\n';
      }
      pc._localDescription.sdp =
          SDPUtils.getDescription(pc._localDescription.sdp) +
          sections.join('');
      var complete = pc.transceivers.every(function(transceiver) {
        return transceiver.iceGatherer &&
            transceiver.iceGatherer.state === 'completed';
      });

      if (pc.iceGatheringState !== 'gathering') {
        pc.iceGatheringState = 'gathering';
        pc._emitGatheringStateChange();
      }

      // Emit candidate. Also emit null candidate when all gatherers are
      // complete.
      if (!end) {
        pc._dispatchEvent('icecandidate', event);
      }
      if (complete) {
        pc._dispatchEvent('icecandidate', new Event('icecandidate'));
        pc.iceGatheringState = 'complete';
        pc._emitGatheringStateChange();
      }
    };

    // emit already gathered candidates.
    window.setTimeout(function() {
      bufferedCandidateEvents.forEach(function(e) {
        iceGatherer.onlocalcandidate(e);
      });
    }, 0);
  };

  // Create ICE transport and DTLS transport.
  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {
    var pc = this;
    var iceTransport = new window.RTCIceTransport(null);
    iceTransport.onicestatechange = function() {
      pc._updateIceConnectionState();
      pc._updateConnectionState();
    };

    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);
    dtlsTransport.ondtlsstatechange = function() {
      pc._updateConnectionState();
    };
    dtlsTransport.onerror = function() {
      // onerror does not set state to failed by itself.
      Object.defineProperty(dtlsTransport, 'state',
          {value: 'failed', writable: true});
      pc._updateConnectionState();
    };

    return {
      iceTransport: iceTransport,
      dtlsTransport: dtlsTransport
    };
  };

  // Destroy ICE gatherer, ICE transport and DTLS transport.
  // Without triggering the callbacks.
  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(
      sdpMLineIndex) {
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer) {
      delete iceGatherer.onlocalcandidate;
      delete this.transceivers[sdpMLineIndex].iceGatherer;
    }
    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;
    if (iceTransport) {
      delete iceTransport.onicestatechange;
      delete this.transceivers[sdpMLineIndex].iceTransport;
    }
    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;
    if (dtlsTransport) {
      delete dtlsTransport.ondtlsstatechange;
      delete dtlsTransport.onerror;
      delete this.transceivers[sdpMLineIndex].dtlsTransport;
    }
  };

  // Start the RTP Sender and Receiver for a transceiver.
  RTCPeerConnection.prototype._transceive = function(transceiver,
      send, recv) {
    var params = getCommonCapabilities(transceiver.localCapabilities,
        transceiver.remoteCapabilities);
    if (send && transceiver.rtpSender) {
      params.encodings = transceiver.sendEncodingParameters;
      params.rtcp = {
        cname: SDPUtils.localCName,
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.recvEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
      }
      transceiver.rtpSender.send(params);
    }
    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {
      // remove RTX field in Edge 14942
      if (transceiver.kind === 'video'
          && transceiver.recvEncodingParameters
          && edgeVersion < 15019) {
        transceiver.recvEncodingParameters.forEach(function(p) {
          delete p.rtx;
        });
      }
      if (transceiver.recvEncodingParameters.length) {
        params.encodings = transceiver.recvEncodingParameters;
      } else {
        params.encodings = [{}];
      }
      params.rtcp = {
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.rtcpParameters.cname) {
        params.rtcp.cname = transceiver.rtcpParameters.cname;
      }
      if (transceiver.sendEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
      }
      transceiver.rtpReceiver.receive(params);
    }
  };

  RTCPeerConnection.prototype.setLocalDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setLocalDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set local ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var sections;
    var sessionpart;
    if (description.type === 'offer') {
      // VERY limited support for SDP munging. Limited to:
      // * changing the order of codecs
      sections = SDPUtils.splitSections(description.sdp);
      sessionpart = sections.shift();
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var caps = SDPUtils.parseRtpParameters(mediaSection);
        pc.transceivers[sdpMLineIndex].localCapabilities = caps;
      });

      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
        pc._gather(transceiver.mid, sdpMLineIndex);
      });
    } else if (description.type === 'answer') {
      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);
      sessionpart = sections.shift();
      var isIceLite = SDPUtils.matchPrefix(sessionpart,
          'a=ice-lite').length > 0;
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var transceiver = pc.transceivers[sdpMLineIndex];
        var iceGatherer = transceiver.iceGatherer;
        var iceTransport = transceiver.iceTransport;
        var dtlsTransport = transceiver.dtlsTransport;
        var localCapabilities = transceiver.localCapabilities;
        var remoteCapabilities = transceiver.remoteCapabilities;

        // treat bundle-only as not-rejected.
        var rejected = SDPUtils.isRejected(mediaSection) &&
            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;

        if (!rejected && !transceiver.rejected) {
          var remoteIceParameters = SDPUtils.getIceParameters(
              mediaSection, sessionpart);
          var remoteDtlsParameters = SDPUtils.getDtlsParameters(
              mediaSection, sessionpart);
          if (isIceLite) {
            remoteDtlsParameters.role = 'server';
          }

          if (!pc.usingBundle || sdpMLineIndex === 0) {
            pc._gather(transceiver.mid, sdpMLineIndex);
            if (iceTransport.state === 'new') {
              iceTransport.start(iceGatherer, remoteIceParameters,
                  isIceLite ? 'controlling' : 'controlled');
            }
            if (dtlsTransport.state === 'new') {
              dtlsTransport.start(remoteDtlsParameters);
            }
          }

          // Calculate intersection of capabilities.
          var params = getCommonCapabilities(localCapabilities,
              remoteCapabilities);

          // Start the RTCRtpSender. The RTCRtpReceiver for this
          // transceiver has already been started in setRemoteDescription.
          pc._transceive(transceiver,
              params.codecs.length > 0,
              false);
        }
      });
    }

    pc._localDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-local-offer');
    } else {
      pc._updateSignalingState('stable');
    }

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.setRemoteDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setRemoteDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set remote ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var streams = {};
    pc.remoteStreams.forEach(function(stream) {
      streams[stream.id] = stream;
    });
    var receiverList = [];
    var sections = SDPUtils.splitSections(description.sdp);
    var sessionpart = sections.shift();
    var isIceLite = SDPUtils.matchPrefix(sessionpart,
        'a=ice-lite').length > 0;
    var usingBundle = SDPUtils.matchPrefix(sessionpart,
        'a=group:BUNDLE ').length > 0;
    pc.usingBundle = usingBundle;
    var iceOptions = SDPUtils.matchPrefix(sessionpart,
        'a=ice-options:')[0];
    if (iceOptions) {
      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')
          .indexOf('trickle') >= 0;
    } else {
      pc.canTrickleIceCandidates = false;
    }

    sections.forEach(function(mediaSection, sdpMLineIndex) {
      var lines = SDPUtils.splitLines(mediaSection);
      var kind = SDPUtils.getKind(mediaSection);
      // treat bundle-only as not-rejected.
      var rejected = SDPUtils.isRejected(mediaSection) &&
          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;
      var protocol = lines[0].substr(2).split(' ')[2];

      var direction = SDPUtils.getDirection(mediaSection, sessionpart);
      var remoteMsid = SDPUtils.parseMsid(mediaSection);

      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();

      // Reject datachannels which are not implemented yet.
      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||
          protocol === 'UDP/DTLS/SCTP'))) {
        // TODO: this is dangerous in the case where a non-rejected m-line
        //     becomes rejected.
        pc.transceivers[sdpMLineIndex] = {
          mid: mid,
          kind: kind,
          protocol: protocol,
          rejected: true
        };
        return;
      }

      if (!rejected && pc.transceivers[sdpMLineIndex] &&
          pc.transceivers[sdpMLineIndex].rejected) {
        // recycle a rejected transceiver.
        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);
      }

      var transceiver;
      var iceGatherer;
      var iceTransport;
      var dtlsTransport;
      var rtpReceiver;
      var sendEncodingParameters;
      var recvEncodingParameters;
      var localCapabilities;

      var track;
      // FIXME: ensure the mediaSection has rtcp-mux set.
      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
      var remoteIceParameters;
      var remoteDtlsParameters;
      if (!rejected) {
        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters.role = 'client';
      }
      recvEncodingParameters =
          SDPUtils.parseRtpEncodingParameters(mediaSection);

      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);

      var isComplete = SDPUtils.matchPrefix(mediaSection,
          'a=end-of-candidates', sessionpart).length > 0;
      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
          .map(function(cand) {
            return SDPUtils.parseCandidate(cand);
          })
          .filter(function(cand) {
            return cand.component === 1;
          });

      // Check if we can use BUNDLE and dispose transports.
      if ((description.type === 'offer' || description.type === 'answer') &&
          !rejected && usingBundle && sdpMLineIndex > 0 &&
          pc.transceivers[sdpMLineIndex]) {
        pc._disposeIceAndDtlsTransports(sdpMLineIndex);
        pc.transceivers[sdpMLineIndex].iceGatherer =
            pc.transceivers[0].iceGatherer;
        pc.transceivers[sdpMLineIndex].iceTransport =
            pc.transceivers[0].iceTransport;
        pc.transceivers[sdpMLineIndex].dtlsTransport =
            pc.transceivers[0].dtlsTransport;
        if (pc.transceivers[sdpMLineIndex].rtpSender) {
          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {
          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
      }
      if (description.type === 'offer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex] ||
            pc._createTransceiver(kind);
        transceiver.mid = mid;

        if (!transceiver.iceGatherer) {
          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
              usingBundle);
        }

        if (cands.length && transceiver.iceTransport.state === 'new') {
          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {
            transceiver.iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);

        // filter RTX until additional stuff needed for RTX is implemented
        // in adapter.js
        if (edgeVersion < 15019) {
          localCapabilities.codecs = localCapabilities.codecs.filter(
              function(codec) {
                return codec.name !== 'rtx';
              });
        }

        sendEncodingParameters = transceiver.sendEncodingParameters || [{
          ssrc: (2 * sdpMLineIndex + 2) * 1001
        }];

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        var isNewTrack = false;
        if (direction === 'sendrecv' || direction === 'sendonly') {
          isNewTrack = !transceiver.rtpReceiver;
          rtpReceiver = transceiver.rtpReceiver ||
              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);

          if (isNewTrack) {
            var stream;
            track = rtpReceiver.track;
            // FIXME: does not work with Plan B.
            if (remoteMsid && remoteMsid.stream === '-') {
              // no-op. a stream id of '-' means: no associated stream.
            } else if (remoteMsid) {
              if (!streams[remoteMsid.stream]) {
                streams[remoteMsid.stream] = new window.MediaStream();
                Object.defineProperty(streams[remoteMsid.stream], 'id', {
                  get: function() {
                    return remoteMsid.stream;
                  }
                });
              }
              Object.defineProperty(track, 'id', {
                get: function() {
                  return remoteMsid.track;
                }
              });
              stream = streams[remoteMsid.stream];
            } else {
              if (!streams.default) {
                streams.default = new window.MediaStream();
              }
              stream = streams.default;
            }
            if (stream) {
              addTrackToStreamAndFireEvent(track, stream);
              transceiver.associatedRemoteMediaStreams.push(stream);
            }
            receiverList.push([track, rtpReceiver, stream]);
          }
        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {
          transceiver.associatedRemoteMediaStreams.forEach(function(s) {
            var nativeTrack = s.getTracks().find(function(t) {
              return t.id === transceiver.rtpReceiver.track.id;
            });
            if (nativeTrack) {
              removeTrackFromStreamAndFireEvent(nativeTrack, s);
            }
          });
          transceiver.associatedRemoteMediaStreams = [];
        }

        transceiver.localCapabilities = localCapabilities;
        transceiver.remoteCapabilities = remoteCapabilities;
        transceiver.rtpReceiver = rtpReceiver;
        transceiver.rtcpParameters = rtcpParameters;
        transceiver.sendEncodingParameters = sendEncodingParameters;
        transceiver.recvEncodingParameters = recvEncodingParameters;

        // Start the RTCRtpReceiver now. The RTPSender is started in
        // setLocalDescription.
        pc._transceive(pc.transceivers[sdpMLineIndex],
            false,
            isNewTrack);
      } else if (description.type === 'answer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex];
        iceGatherer = transceiver.iceGatherer;
        iceTransport = transceiver.iceTransport;
        dtlsTransport = transceiver.dtlsTransport;
        rtpReceiver = transceiver.rtpReceiver;
        sendEncodingParameters = transceiver.sendEncodingParameters;
        localCapabilities = transceiver.localCapabilities;

        pc.transceivers[sdpMLineIndex].recvEncodingParameters =
            recvEncodingParameters;
        pc.transceivers[sdpMLineIndex].remoteCapabilities =
            remoteCapabilities;
        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;

        if (cands.length && iceTransport.state === 'new') {
          if ((isIceLite || isComplete) &&
              (!usingBundle || sdpMLineIndex === 0)) {
            iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        if (!usingBundle || sdpMLineIndex === 0) {
          if (iceTransport.state === 'new') {
            iceTransport.start(iceGatherer, remoteIceParameters,
                'controlling');
          }
          if (dtlsTransport.state === 'new') {
            dtlsTransport.start(remoteDtlsParameters);
          }
        }

        // If the offer contained RTX but the answer did not,
        // remove RTX from sendEncodingParameters.
        var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

        var hasRtx = commonCapabilities.codecs.filter(function(c) {
          return c.name.toLowerCase() === 'rtx';
        }).length;
        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
          delete transceiver.sendEncodingParameters[0].rtx;
        }

        pc._transceive(transceiver,
            direction === 'sendrecv' || direction === 'recvonly',
            direction === 'sendrecv' || direction === 'sendonly');

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        if (rtpReceiver &&
            (direction === 'sendrecv' || direction === 'sendonly')) {
          track = rtpReceiver.track;
          if (remoteMsid) {
            if (!streams[remoteMsid.stream]) {
              streams[remoteMsid.stream] = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);
            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
          } else {
            if (!streams.default) {
              streams.default = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams.default);
            receiverList.push([track, rtpReceiver, streams.default]);
          }
        } else {
          // FIXME: actually the receiver should be created later.
          delete transceiver.rtpReceiver;
        }
      }
    });

    if (pc._dtlsRole === undefined) {
      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';
    }

    pc._remoteDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-remote-offer');
    } else {
      pc._updateSignalingState('stable');
    }
    Object.keys(streams).forEach(function(sid) {
      var stream = streams[sid];
      if (stream.getTracks().length) {
        if (pc.remoteStreams.indexOf(stream) === -1) {
          pc.remoteStreams.push(stream);
          var event = new Event('addstream');
          event.stream = stream;
          window.setTimeout(function() {
            pc._dispatchEvent('addstream', event);
          });
        }

        receiverList.forEach(function(item) {
          var track = item[0];
          var receiver = item[1];
          if (stream.id !== item[2].id) {
            return;
          }
          fireAddTrack(pc, track, receiver, [stream]);
        });
      }
    });
    receiverList.forEach(function(item) {
      if (item[2]) {
        return;
      }
      fireAddTrack(pc, item[0], item[1], []);
    });

    // check whether addIceCandidate({}) was called within four seconds after
    // setRemoteDescription.
    window.setTimeout(function() {
      if (!(pc && pc.transceivers)) {
        return;
      }
      pc.transceivers.forEach(function(transceiver) {
        if (transceiver.iceTransport &&
            transceiver.iceTransport.state === 'new' &&
            transceiver.iceTransport.getRemoteCandidates().length > 0) {
          console.warn('Timeout for addRemoteCandidate. Consider sending ' +
              'an end-of-candidates notification');
          transceiver.iceTransport.addRemoteCandidate({});
        }
      });
    }, 4000);

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.close = function() {
    this.transceivers.forEach(function(transceiver) {
      /* not yet
      if (transceiver.iceGatherer) {
        transceiver.iceGatherer.close();
      }
      */
      if (transceiver.iceTransport) {
        transceiver.iceTransport.stop();
      }
      if (transceiver.dtlsTransport) {
        transceiver.dtlsTransport.stop();
      }
      if (transceiver.rtpSender) {
        transceiver.rtpSender.stop();
      }
      if (transceiver.rtpReceiver) {
        transceiver.rtpReceiver.stop();
      }
    });
    // FIXME: clean up tracks, local streams, remote streams, etc
    this._isClosed = true;
    this._updateSignalingState('closed');
  };

  // Update the signaling state.
  RTCPeerConnection.prototype._updateSignalingState = function(newState) {
    this.signalingState = newState;
    var event = new Event('signalingstatechange');
    this._dispatchEvent('signalingstatechange', event);
  };

  // Determine whether to fire the negotiationneeded event.
  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {
    var pc = this;
    if (this.signalingState !== 'stable' || this.needNegotiation === true) {
      return;
    }
    this.needNegotiation = true;
    window.setTimeout(function() {
      if (pc.needNegotiation) {
        pc.needNegotiation = false;
        var event = new Event('negotiationneeded');
        pc._dispatchEvent('negotiationneeded', event);
      }
    }, 0);
  };

  // Update the ice connection state.
  RTCPeerConnection.prototype._updateIceConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      checking: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
      }
    });

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.checking > 0) {
      newState = 'checking';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    } else if (states.completed > 0) {
      newState = 'completed';
    }

    if (newState !== this.iceConnectionState) {
      this.iceConnectionState = newState;
      var event = new Event('iceconnectionstatechange');
      this._dispatchEvent('iceconnectionstatechange', event);
    }
  };

  // Update the connection state.
  RTCPeerConnection.prototype._updateConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      connecting: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && transceiver.dtlsTransport &&
          !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      }
    });
    // ICETransport.completed and connected are the same for this purpose.
    states.connected += states.completed;

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.connecting > 0) {
      newState = 'connecting';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    }

    if (newState !== this.connectionState) {
      this.connectionState = newState;
      var event = new Event('connectionstatechange');
      this._dispatchEvent('connectionstatechange', event);
    }
  };

  RTCPeerConnection.prototype.createOffer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createOffer after close'));
    }

    var numAudioTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'audio';
    }).length;
    var numVideoTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'video';
    }).length;

    // Determine number of audio and video tracks we need to send/recv.
    var offerOptions = arguments[0];
    if (offerOptions) {
      // Reject Chrome legacy constraints.
      if (offerOptions.mandatory || offerOptions.optional) {
        throw new TypeError(
            'Legacy mandatory/optional constraints not supported.');
      }
      if (offerOptions.offerToReceiveAudio !== undefined) {
        if (offerOptions.offerToReceiveAudio === true) {
          numAudioTracks = 1;
        } else if (offerOptions.offerToReceiveAudio === false) {
          numAudioTracks = 0;
        } else {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
      }
      if (offerOptions.offerToReceiveVideo !== undefined) {
        if (offerOptions.offerToReceiveVideo === true) {
          numVideoTracks = 1;
        } else if (offerOptions.offerToReceiveVideo === false) {
          numVideoTracks = 0;
        } else {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
    }

    pc.transceivers.forEach(function(transceiver) {
      if (transceiver.kind === 'audio') {
        numAudioTracks--;
        if (numAudioTracks < 0) {
          transceiver.wantReceive = false;
        }
      } else if (transceiver.kind === 'video') {
        numVideoTracks--;
        if (numVideoTracks < 0) {
          transceiver.wantReceive = false;
        }
      }
    });

    // Create M-lines for recvonly streams.
    while (numAudioTracks > 0 || numVideoTracks > 0) {
      if (numAudioTracks > 0) {
        pc._createTransceiver('audio');
        numAudioTracks--;
      }
      if (numVideoTracks > 0) {
        pc._createTransceiver('video');
        numVideoTracks--;
      }
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      // For each track, create an ice gatherer, ice transport,
      // dtls transport, potentially rtpsender and rtpreceiver.
      var track = transceiver.track;
      var kind = transceiver.kind;
      var mid = transceiver.mid || SDPUtils.generateIdentifier();
      transceiver.mid = mid;

      if (!transceiver.iceGatherer) {
        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
            pc.usingBundle);
      }

      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);
      // filter RTX until additional stuff needed for RTX is implemented
      // in adapter.js
      if (edgeVersion < 15019) {
        localCapabilities.codecs = localCapabilities.codecs.filter(
            function(codec) {
              return codec.name !== 'rtx';
            });
      }
      localCapabilities.codecs.forEach(function(codec) {
        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
        // by adding level-asymmetry-allowed=1
        if (codec.name === 'H264' &&
            codec.parameters['level-asymmetry-allowed'] === undefined) {
          codec.parameters['level-asymmetry-allowed'] = '1';
        }

        // for subsequent offers, we might have to re-use the payload
        // type of the last offer.
        if (transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.codecs) {
          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {
            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&
                codec.clockRate === remoteCodec.clockRate) {
              codec.preferredPayloadType = remoteCodec.payloadType;
            }
          });
        }
      });
      localCapabilities.headerExtensions.forEach(function(hdrExt) {
        var remoteExtensions = transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.headerExtensions || [];
        remoteExtensions.forEach(function(rHdrExt) {
          if (hdrExt.uri === rHdrExt.uri) {
            hdrExt.id = rHdrExt.id;
          }
        });
      });

      // generate an ssrc now, to be used later in rtpSender.send
      var sendEncodingParameters = transceiver.sendEncodingParameters || [{
        ssrc: (2 * sdpMLineIndex + 1) * 1001
      }];
      if (track) {
        // add RTX
        if (edgeVersion >= 15019 && kind === 'video' &&
            !sendEncodingParameters[0].rtx) {
          sendEncodingParameters[0].rtx = {
            ssrc: sendEncodingParameters[0].ssrc + 1
          };
        }
      }

      if (transceiver.wantReceive) {
        transceiver.rtpReceiver = new window.RTCRtpReceiver(
            transceiver.dtlsTransport, kind);
      }

      transceiver.localCapabilities = localCapabilities;
      transceiver.sendEncodingParameters = sendEncodingParameters;
    });

    // always offer BUNDLE and dispose on return if not supported.
    if (pc._config.bundlePolicy !== 'max-compat') {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,
          'offer', transceiver.stream, pc._dtlsRole);
      sdp += 'a=rtcp-rsize\r\n';

      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&
          (sdpMLineIndex === 0 || !pc.usingBundle)) {
        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {
          cand.component = 1;
          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\r\n';
        });

        if (transceiver.iceGatherer.state === 'completed') {
          sdp += 'a=end-of-candidates\r\n';
        }
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'offer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.createAnswer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer after close'));
    }

    if (!(pc.signalingState === 'have-remote-offer' ||
        pc.signalingState === 'have-local-pranswer')) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer in signalingState ' + pc.signalingState));
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    if (pc.usingBundle) {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    var mediaSectionsInOffer = SDPUtils.getMediaSections(
        pc._remoteDescription.sdp).length;
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {
        return;
      }
      if (transceiver.rejected) {
        if (transceiver.kind === 'application') {
          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt
            sdp += 'm=application 0 DTLS/SCTP 5000\r\n';
          } else {
            sdp += 'm=application 0 ' + transceiver.protocol +
                ' webrtc-datachannel\r\n';
          }
        } else if (transceiver.kind === 'audio') {
          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\r\n' +
              'a=rtpmap:0 PCMU/8000\r\n';
        } else if (transceiver.kind === 'video') {
          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\r\n' +
              'a=rtpmap:120 VP8/90000\r\n';
        }
        sdp += 'c=IN IP4 0.0.0.0\r\n' +
            'a=inactive\r\n' +
            'a=mid:' + transceiver.mid + '\r\n';
        return;
      }

      // FIXME: look at direction.
      if (transceiver.stream) {
        var localTrack;
        if (transceiver.kind === 'audio') {
          localTrack = transceiver.stream.getAudioTracks()[0];
        } else if (transceiver.kind === 'video') {
          localTrack = transceiver.stream.getVideoTracks()[0];
        }
        if (localTrack) {
          // add RTX
          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&
              !transceiver.sendEncodingParameters[0].rtx) {
            transceiver.sendEncodingParameters[0].rtx = {
              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1
            };
          }
        }
      }

      // Calculate intersection of capabilities.
      var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

      var hasRtx = commonCapabilities.codecs.filter(function(c) {
        return c.name.toLowerCase() === 'rtx';
      }).length;
      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
        delete transceiver.sendEncodingParameters[0].rtx;
      }

      sdp += writeMediaSection(transceiver, commonCapabilities,
          'answer', transceiver.stream, pc._dtlsRole);
      if (transceiver.rtcpParameters &&
          transceiver.rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'answer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
    var pc = this;
    var sections;
    if (candidate && !(candidate.sdpMLineIndex !== undefined ||
        candidate.sdpMid)) {
      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));
    }

    // TODO: needs to go into ops queue.
    return new Promise(function(resolve, reject) {
      if (!pc._remoteDescription) {
        return reject(makeError('InvalidStateError',
            'Can not add ICE candidate without a remote description'));
      } else if (!candidate || candidate.candidate === '') {
        for (var j = 0; j < pc.transceivers.length; j++) {
          if (pc.transceivers[j].rejected) {
            continue;
          }
          pc.transceivers[j].iceTransport.addRemoteCandidate({});
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[j] += 'a=end-of-candidates\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
          if (pc.usingBundle) {
            break;
          }
        }
      } else {
        var sdpMLineIndex = candidate.sdpMLineIndex;
        if (candidate.sdpMid) {
          for (var i = 0; i < pc.transceivers.length; i++) {
            if (pc.transceivers[i].mid === candidate.sdpMid) {
              sdpMLineIndex = i;
              break;
            }
          }
        }
        var transceiver = pc.transceivers[sdpMLineIndex];
        if (transceiver) {
          if (transceiver.rejected) {
            return resolve();
          }
          var cand = Object.keys(candidate.candidate).length > 0 ?
              SDPUtils.parseCandidate(candidate.candidate) : {};
          // Ignore Chrome's invalid candidates since Edge does not like them.
          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
            return resolve();
          }
          // Ignore RTCP candidates, we assume RTCP-MUX.
          if (cand.component && cand.component !== 1) {
            return resolve();
          }
          // when using bundle, avoid adding candidates to the wrong
          // ice transport. And avoid adding candidates added in the SDP.
          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&
              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {
            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {
              return reject(makeError('OperationError',
                  'Can not add ICE candidate'));
            }
          }

          // update the remoteDescription.
          var candidateString = candidate.candidate.trim();
          if (candidateString.indexOf('a=') === 0) {
            candidateString = candidateString.substr(2);
          }
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[sdpMLineIndex] += 'a=' +
              (cand.type ? candidateString : 'end-of-candidates')
              + '\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
        } else {
          return reject(makeError('OperationError',
              'Can not add ICE candidate'));
        }
      }
      resolve();
    });
  };

  RTCPeerConnection.prototype.getStats = function(selector) {
    if (selector && selector instanceof window.MediaStreamTrack) {
      var senderOrReceiver = null;
      this.transceivers.forEach(function(transceiver) {
        if (transceiver.rtpSender &&
            transceiver.rtpSender.track === selector) {
          senderOrReceiver = transceiver.rtpSender;
        } else if (transceiver.rtpReceiver &&
            transceiver.rtpReceiver.track === selector) {
          senderOrReceiver = transceiver.rtpReceiver;
        }
      });
      if (!senderOrReceiver) {
        throw makeError('InvalidAccessError', 'Invalid selector.');
      }
      return senderOrReceiver.getStats();
    }

    var promises = [];
    this.transceivers.forEach(function(transceiver) {
      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
          'dtlsTransport'].forEach(function(method) {
            if (transceiver[method]) {
              promises.push(transceiver[method].getStats());
            }
          });
    });
    return Promise.all(promises).then(function(allStats) {
      var results = new Map();
      allStats.forEach(function(stats) {
        stats.forEach(function(stat) {
          results.set(stat.id, stat);
        });
      });
      return results;
    });
  };

  // fix low-level stat names and return Map instead of object.
  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',
    'RTCIceTransport', 'RTCDtlsTransport'];
  ortcObjects.forEach(function(ortcObjectName) {
    var obj = window[ortcObjectName];
    if (obj && obj.prototype && obj.prototype.getStats) {
      var nativeGetstats = obj.prototype.getStats;
      obj.prototype.getStats = function() {
        return nativeGetstats.apply(this)
        .then(function(nativeStats) {
          var mapStats = new Map();
          Object.keys(nativeStats).forEach(function(id) {
            nativeStats[id].type = fixStatsType(nativeStats[id]);
            mapStats.set(id, nativeStats[id]);
          });
          return mapStats;
        });
      };
    }
  });

  // legacy callback shims. Should be moved to adapter.js some days.
  var methods = ['createOffer', 'createAnswer'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[0] === 'function' ||
          typeof args[1] === 'function') { // legacy
        return nativeMethod.apply(this, [arguments[2]])
        .then(function(description) {
          if (typeof args[0] === 'function') {
            args[0].apply(null, [description]);
          }
        }, function(error) {
          if (typeof args[1] === 'function') {
            args[1].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function' ||
          typeof args[2] === 'function') { // legacy
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        }, function(error) {
          if (typeof args[2] === 'function') {
            args[2].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  // getStats is special. It doesn't have a spec legacy method yet we support
  // getStats(something, cb) without error callbacks.
  ['getStats'].forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function') {
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  return RTCPeerConnection;
};


/***/ }),

/***/ 1358:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetUserMedia;
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  const shimError_ = function(e) {
    return {
      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
      message: e.message,
      constraint: e.constraint,
      toString() {
        return this.name;
      }
    };
  };

  // getUserMedia error shim.
  const origGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
  navigator.mediaDevices.getUserMedia = function(c) {
    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));
  };
}


/***/ }),

/***/ 1359:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetDisplayMedia;
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


function shimGetDisplayMedia(window) {
  if (!('getDisplayMedia' in window.navigator)) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    window.navigator.getDisplayMedia.bind(window.navigator);
}


/***/ }),

/***/ 1360:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimOnTrack"] = shimOnTrack;
/* harmony export (immutable) */ __webpack_exports__["shimPeerConnection"] = shimPeerConnection;
/* harmony export (immutable) */ __webpack_exports__["shimSenderGetStats"] = shimSenderGetStats;
/* harmony export (immutable) */ __webpack_exports__["shimReceiverGetStats"] = shimReceiverGetStats;
/* harmony export (immutable) */ __webpack_exports__["shimRemoveStream"] = shimRemoveStream;
/* harmony export (immutable) */ __webpack_exports__["shimRTCDataChannel"] = shimRTCDataChannel;
/* harmony export (immutable) */ __webpack_exports__["shimAddTransceiver"] = shimAddTransceiver;
/* harmony export (immutable) */ __webpack_exports__["shimGetParameters"] = shimGetParameters;
/* harmony export (immutable) */ __webpack_exports__["shimCreateOffer"] = shimCreateOffer;
/* harmony export (immutable) */ __webpack_exports__["shimCreateAnswer"] = shimCreateAnswer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(423);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getusermedia__ = __webpack_require__(1361);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return __WEBPACK_IMPORTED_MODULE_1__getusermedia__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__getdisplaymedia__ = __webpack_require__(1362);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return __WEBPACK_IMPORTED_MODULE_2__getdisplaymedia__["a"]; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */






function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCTrackEvent &&
      ('receiver' in window.RTCTrackEvent.prototype) &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimPeerConnection(window) {
  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils__["c" /* detectBrowser */](window);

  if (typeof window !== 'object' ||
      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }
  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }

  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }

  // support for addIceCandidate(null or undefined)
  // as well as ignoring {sdpMid, candidate: ""}
  if (browserDetails.version < 68) {
    const nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      if (arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  }

  const modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };

  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null])
      .then(stats => {
        if (browserDetails.version < 53 && !onSucc) {
          // Shim only promise getStats with spec-hyphens in type names
          // Leave callback version alone; misc old uses of forEach before Map
          try {
            stats.forEach(stat => {
              stat.type = modernStatsTypes[stat.type] || stat.type;
            });
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e;
            }
            // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
            stats.forEach((stat, i) => {
              stats.set(i, Object.assign({}, stat, {
                type: modernStatsTypes[stat.type] || stat.type
              }));
            });
          }
        }
        return stats;
      })
      .then(onSucc, onErr);
  };
}

function shimSenderGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
  }

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) :
        Promise.resolve(new Map());
  };
}

function shimReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach(receiver => receiver._pc = this);
      return receivers;
    };
  }
  __WEBPACK_IMPORTED_MODULE_0__utils__["i" /* wrapPeerConnectionEvent */](window, 'track', e => {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}

function shimRemoveStream(window) {
  if (!window.RTCPeerConnection ||
      'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      __WEBPACK_IMPORTED_MODULE_0__utils__["b" /* deprecated */]('removeStream', 'removeTrack');
      this.getSenders().forEach(sender => {
        if (sender.track && stream.getTracks().includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
}

function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}

function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver =
      function addTransceiver() {
        this.setParametersPromises = [];
        const initParameters = arguments[1];
        const shouldPerformCheck = initParameters &&
                                  'sendEncodings' in initParameters;
        if (shouldPerformCheck) {
          // If sendEncodings params are provided, validate grammar
          initParameters.sendEncodings.forEach((encodingParam) => {
            if ('rid' in encodingParam) {
              const ridRegex = /^[a-z0-9]{0,16}$/i;
              if (!ridRegex.test(encodingParam.rid)) {
                throw new TypeError('Invalid RID value provided.');
              }
            }
            if ('scaleResolutionDownBy' in encodingParam) {
              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                throw new RangeError('scale_resolution_down_by must be >= 1.0');
              }
            }
            if ('maxFramerate' in encodingParam) {
              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                throw new RangeError('max_framerate must be >= 0.0');
              }
            }
          });
        }
        const transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
          // Check if the init options were applied. If not we do this in an
          // asynchronous way and save the promise reference in a global object.
          // This is an ugly hack, but at the same time is way more robust than
          // checking the sender parameters before and after the createOffer
          // Also note that after the createoffer we are not 100% sure that
          // the params were asynchronously applied so we might miss the
          // opportunity to recreate offer.
          const {sender} = transceiver;
          const params = sender.getParameters();
          if (!('encodings' in params) ||
              // Avoid being fooled by patched getParameters() below.
              (params.encodings.length === 1 &&
               Object.keys(params.encodings[0]).length === 0)) {
            params.encodings = initParameters.sendEncodings;
            sender.sendEncodings = initParameters.sendEncodings;
            this.setParametersPromises.push(sender.setParameters(params)
              .then(() => {
                delete sender.sendEncodings;
              }).catch(() => {
                delete sender.sendEncodings;
              })
            );
          }
        }
        return transceiver;
      };
  }
}

function shimGetParameters(window) {
  if (!(typeof window === 'object' && window.RTCRtpSender)) {
    return;
  }
  const origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters =
      function getParameters() {
        const params = origGetParameters.apply(this, arguments);
        if (!('encodings' in params)) {
          params.encodings = [].concat(this.sendEncodings || [{}]);
        }
        return params;
      };
  }
}

function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateOffer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}

function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateAnswer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}


/***/ }),

/***/ 1361:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetUserMedia;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(423);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */




function shimGetUserMedia(window) {
  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils__["c" /* detectBrowser */](window);
  const navigator = window && window.navigator;
  const MediaStreamTrack = window && window.MediaStreamTrack;

  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    __WEBPACK_IMPORTED_MODULE_0__utils__["b" /* deprecated */]('navigator.getUserMedia',
        'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };

  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    const remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints =
        MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}


/***/ }),

/***/ 1362:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetDisplayMedia;
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      if (!(constraints && constraints.video)) {
        const err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
}


/***/ }),

/***/ 1363:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimLocalStreamsAPI"] = shimLocalStreamsAPI;
/* harmony export (immutable) */ __webpack_exports__["shimRemoteStreamsAPI"] = shimRemoteStreamsAPI;
/* harmony export (immutable) */ __webpack_exports__["shimCallbacksAPI"] = shimCallbacksAPI;
/* harmony export (immutable) */ __webpack_exports__["shimGetUserMedia"] = shimGetUserMedia;
/* harmony export (immutable) */ __webpack_exports__["shimConstraints"] = shimConstraints;
/* harmony export (immutable) */ __webpack_exports__["shimRTCIceServerUrls"] = shimRTCIceServerUrls;
/* harmony export (immutable) */ __webpack_exports__["shimTrackEventTransceiver"] = shimTrackEventTransceiver;
/* harmony export (immutable) */ __webpack_exports__["shimCreateOfferLegacy"] = shimCreateOfferLegacy;
/* harmony export (immutable) */ __webpack_exports__["shimAudioContext"] = shimAudioContext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(423);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */



function shimLocalStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams =
      function getLocalStreams() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    const _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,
        stream));
      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,
        stream));
    };

    window.RTCPeerConnection.prototype.addTrack =
      function addTrack(track, ...streams) {
        if (streams) {
          streams.forEach((stream) => {
            if (!this._localStreams) {
              this._localStreams = [stream];
            } else if (!this._localStreams.includes(stream)) {
              this._localStreams.push(stream);
            }
          });
        }
        return _addTrack.apply(this, arguments);
      };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        const index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        const tracks = stream.getTracks();
        this.getSenders().forEach(sender => {
          if (tracks.includes(sender.track)) {
            this.removeTrack(sender);
          }
        });
      };
  }
}

function shimRemoteStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams =
      function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get() {
        return this._onaddstream;
      },
      set(f) {
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = (e) => {
          e.streams.forEach(stream => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            const event = new Event('addstream');
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        const pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(stream => {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              const event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
  }
}

function shimCallbacksAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  const prototype = window.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;

  prototype.createOffer =
    function createOffer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  prototype.createAnswer =
    function createAnswer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  let withCallback = function(description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;

  withCallback = function(description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;

  withCallback = function(candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    const mediaDevices = navigator.mediaDevices;
    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = (constraints) => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }

  if (!navigator.getUserMedia && navigator.mediaDevices &&
    navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints)
      .then(cb, errcb);
    }.bind(navigator);
  }
}

function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({},
      constraints,
      {video: __WEBPACK_IMPORTED_MODULE_0__utils__["a" /* compactObject */](constraints.video)}
    );
  }

  return constraints;
}

function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  const OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection =
    function RTCPeerConnection(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        const newIceServers = [];
        for (let i = 0; i < pcConfig.iceServers.length; i++) {
          let server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') &&
              server.hasOwnProperty('url')) {
            __WEBPACK_IMPORTED_MODULE_0__utils__["b" /* deprecated */]('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}

function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (typeof window === 'object' && window.RTCTrackEvent &&
      'receiver' in window.RTCTrackEvent.prototype &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimCreateOfferLegacy(window) {
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer =
    function createOffer(offerOptions) {
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio =
            !!offerOptions.offerToReceiveAudio;
        }
        const audioTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'audio');
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          this.addTransceiver('audio');
        }

        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo =
            !!offerOptions.offerToReceiveVideo;
        }
        const videoTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'video');
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('sendonly');
            } else {
              videoTransceiver.direction = 'sendonly';
            }
          } else if (videoTransceiver.direction === 'recvonly') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('inactive');
            } else {
              videoTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          this.addTransceiver('video');
        }
      }
      return origCreateOffer.apply(this, arguments);
    };
}

function shimAudioContext(window) {
  if (typeof window !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}


/***/ }),

/***/ 1364:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimRTCIceCandidate"] = shimRTCIceCandidate;
/* harmony export (immutable) */ __webpack_exports__["shimMaxMessageSize"] = shimMaxMessageSize;
/* harmony export (immutable) */ __webpack_exports__["shimSendThrowTypeError"] = shimSendThrowTypeError;
/* harmony export (immutable) */ __webpack_exports__["shimConnectionState"] = shimConnectionState;
/* harmony export (immutable) */ __webpack_exports__["removeAllowExtmapMixed"] = removeAllowExtmapMixed;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sdp__ = __webpack_require__(867);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sdp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sdp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(423);
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
      window.RTCIceCandidate.prototype)) {
    return;
  }

  const NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (typeof args === 'object' && args.candidate &&
        args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substr(2);
    }

    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.parseCandidate(args.candidate);
      const augmentedCandidate = Object.assign(nativeCandidate,
          parsedCandidate);

      // Add a serializer that does not serialize the extra attributes.
      augmentedCandidate.toJSON = function toJSON() {
        return {
          candidate: augmentedCandidate.candidate,
          sdpMid: augmentedCandidate.sdpMid,
          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
          usernameFragment: augmentedCandidate.usernameFragment,
        };
      };
      return augmentedCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  __WEBPACK_IMPORTED_MODULE_1__utils__["i" /* wrapPeerConnectionEvent */](window, 'icecandidate', e => {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}

function shimMaxMessageSize(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = __WEBPACK_IMPORTED_MODULE_1__utils__["c" /* detectBrowser */](window);

  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }

  const sctpInDescription = function(description) {
    if (!description || !description.sdp) {
      return false;
    }
    const sections = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.splitSections(description.sdp);
    sections.shift();
    return sections.some(mediaSection => {
      const mLine = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.parseMLine(mediaSection);
      return mLine && mLine.kind === 'application'
          && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };

  const getRemoteFirefoxVersion = function(description) {
    // TODO: Is there a better solution for detecting Firefox?
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    const version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };

  const getCanSendMaxMessageSize = function(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    let canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize =
          browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };

  const getMaxMessageSize = function(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    let maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox'
         && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }

    const match = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.matchPrefix(description.sdp,
      'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substr(19), 10);
    } else if (browserDetails.browser === 'firefox' &&
                remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };

  const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
    function setRemoteDescription() {
      this._sctp = null;
      // Chrome decided to not expose .sctp in plan-b mode.
      // As usual, adapter.js has to do an 'ugly worakaround'
      // to cover up the mess.
      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
        const {sdpSemantics} = this.getConfiguration();
        if (sdpSemantics === 'plan-b') {
          Object.defineProperty(this, 'sctp', {
            get() {
              return typeof this._sctp === 'undefined' ? null : this._sctp;
            },
            enumerable: true,
            configurable: true,
          });
        }
      }

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        const isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        const canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        let maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        const sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get() {
            return maxMessageSize;
          }
        });
        this._sctp = sctp;
      }

      return origSetRemoteDescription.apply(this, arguments);
    };
}

function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection &&
      'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    const origDataChannelSend = dc.send;
    dc.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' &&
          pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' +
          pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  const origCreateDataChannel =
    window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel =
    function createDataChannel() {
      const dataChannel = origCreateDataChannel.apply(this, arguments);
      wrapDcSend(dataChannel, this);
      return dataChannel;
    };
  __WEBPACK_IMPORTED_MODULE_1__utils__["i" /* wrapPeerConnectionEvent */](window, 'datachannel', e => {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}


/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection ||
      'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange',
            this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange',
            this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });

  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {
    const origMethod = proto[method];
    proto[method] = function() {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = e => {
          const pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            const newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange',
          this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}

function removeAllowExtmapMixed(window) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = __WEBPACK_IMPORTED_MODULE_1__utils__["c" /* detectBrowser */](window);
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
  function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      desc.sdp = desc.sdp.split('\n').filter((line) => {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
    }
    return nativeSRD.apply(this, arguments);
  };
}


/***/ }),

/***/ 1370:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(41);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(15);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(16);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(42);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(46);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(17);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/eimanalwahhabi/Desktop/RecycleChain/components/QRReader.js';

var isBrowser = typeof window != 'undefined';

if (isBrowser) {
  var QrReader = __webpack_require__(1345);
}

var QRReader = function (_Component) {
  (0, _inherits3.default)(QRReader, _Component);

  function QRReader(props) {
    (0, _classCallCheck3.default)(this, QRReader);

    var _this = (0, _possibleConstructorReturn3.default)(this, (QRReader.__proto__ || (0, _getPrototypeOf2.default)(QRReader)).call(this, props));

    _this.state = {
      result: 'No result'
    };

    _this.handleScan = function (data) {
      if (data) {
        _this.setState({ result: data });
      }
    };

    _this.handleError = function (err) {
      console.error(err);
    };

    _this.state = {
      result: ''
    };
    return _this;
  }

  (0, _createClass3.default)(QRReader, [{
    key: 'render',
    value: function render() {
      return isBrowser && _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }, _react2.default.createElement(QrReader, {
        delay: 300,
        onError: this.handleError,
        onScan: this.handleScan,
        style: { width: '25%' },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }), _react2.default.createElement('p', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, this.state.result));
    }
  }]);

  return QRReader;
}(_react.Component);

exports.default = QRReader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvUVJSZWFkZXIuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJDb21wb25lbnQiLCJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJRclJlYWRlciIsInJlcXVpcmUiLCJRUlJlYWRlciIsInByb3BzIiwic3RhdGUiLCJyZXN1bHQiLCJoYW5kbGVTY2FuIiwiZGF0YSIsInNldFN0YXRlIiwiaGFuZGxlRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJlcnIiLCJ3aWR0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxBQUFPLEFBQVM7Ozs7Ozs7O0FBQ2hCLElBQU0sWUFBWSxPQUFBLEFBQU8sVUFBekIsQUFBbUM7O0FBRW5DLElBQUEsQUFBSSxXQUFXLEFBQ1g7TUFBSSxXQUFKLEFBQUksQUFBVyxBQUNsQjs7O0ksQUFHSztvQ0FFRjs7b0JBQUEsQUFBWSxPQUFPO3dDQUFBOzswSUFBQSxBQUNUOztVQURTLEFBT3JCO2NBUHFCLEFBT2IsQUFDRTtBQURGLEFBQ047O1VBUm1CLEFBV3JCLGFBQWEsZ0JBQVEsQUFDbkI7VUFBQSxBQUFJLE1BQU0sQUFDTjtjQUFBLEFBQUssU0FBUyxFQUFFLFFBQWhCLEFBQWMsQUFBVSxBQUMzQjtBQUNKO0FBZnNCOztVQUFBLEFBaUJ2QixjQUFjLGVBQU8sQUFDakI7Y0FBQSxBQUFRLE1BQVIsQUFBYyxBQUNqQjtBQW5Cc0IsQUFFZjs7VUFBQSxBQUFLO2NBRlUsQUFFZixBQUFXLEFBQ0Q7QUFEQyxBQUNUO1dBRUw7Ozs7OzZCQWdCTSxBQUNQO2FBQU8sNkJBQ0wsY0FBQTs7b0JBQUE7c0JBQUEsQUFDRTtBQURGO0FBQUEsT0FBQSxnQ0FDRSxBQUFDO2VBQUQsQUFDUyxBQUNQO2lCQUFTLEtBRlgsQUFFZ0IsQUFDZDtnQkFBUSxLQUhWLEFBR2UsQUFDYjtlQUFPLEVBQUUsT0FKWCxBQUlTLEFBQVM7O29CQUpsQjtzQkFERixBQUNFLEFBTUE7QUFOQTtBQUNFLDBCQUtGLGNBQUE7O29CQUFBO3NCQUFBLEFBQUk7QUFBSjtBQUFBLGNBQUksQUFBSyxNQVJiLEFBQ0UsQUFPRSxBQUFlLEFBR3BCOzs7OztBQUdILEEsQUF0Q3VCOztrQkFzQ3ZCLEFBQWUiLCJmaWxlIjoiUVJSZWFkZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VpbWFuYWx3YWhoYWJpL0Rlc2t0b3AvUmVjeWNsZUNoYWluIn0=

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "/Users/eimanalwahhabi/Desktop/RecycleChain/components/QRReader.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/eimanalwahhabi/Desktop/RecycleChain/components/QRReader.js"); } } })();

/***/ }),

/***/ 423:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["f"] = extractVersion;
/* harmony export (immutable) */ __webpack_exports__["i"] = wrapPeerConnectionEvent;
/* harmony export (immutable) */ __webpack_exports__["d"] = disableLog;
/* harmony export (immutable) */ __webpack_exports__["e"] = disableWarnings;
/* harmony export (immutable) */ __webpack_exports__["h"] = log;
/* harmony export (immutable) */ __webpack_exports__["b"] = deprecated;
/* harmony export (immutable) */ __webpack_exports__["c"] = detectBrowser;
/* harmony export (immutable) */ __webpack_exports__["a"] = compactObject;
/* unused harmony export walkStats */
/* harmony export (immutable) */ __webpack_exports__["g"] = filterStats;
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


let logDisabled_ = true;
let deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    const wrappedCallback = (e) => {
      const modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  const nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get() {
      return this['_on' + eventNameToWrap];
    },
    set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return (bool) ? 'adapter.js logging disabled' :
      'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}

function log() {
  if (typeof window === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
      ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  const result = {browser: null, version: null};

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }

  const {navigator} = window;

  if (navigator.mozGetUserMedia) { // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent,
        /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia ||
      (window.isSecureContext === false && window.webkitRTCPeerConnection &&
       !window.RTCIceGatherer)) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent,
        /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (navigator.mediaDevices &&
      navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) { // Edge.
    result.browser = 'edge';
    result.version = extractVersion(navigator.userAgent,
        /Edge\/(\d+).(\d+)$/, 2);
  } else if (window.RTCPeerConnection &&
      navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent,
        /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&
        'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else { // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }

  return Object.keys(data).reduce(function(accumulator, key) {
    const isObj = isObject(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, {[key]: value});
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(name => {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(id => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  const filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  const trackStats = [];
  result.forEach(value => {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(trackStat => {
    result.forEach(stats => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}



/***/ }),

/***/ 867:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-env node */


// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// returns the session description.
SDPUtils.getDescription = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parseInt(parts[1], 10),
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compability.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag
        candidate[parts[i]] = parts[i + 1];
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  var channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      if (codec.parameters[param]) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

SDPUtils.parseSsrcGroup = function(line) {
  var parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(function(ssrc) {
      return parseInt(ssrc, 10);
    })
  };
};

// Extracts the MID (RFC 5888) from a media section.
// returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

SDPUtils.parseFingerprint = function(line) {
  var parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1]
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role.
  // Note2: 'algorithm' is not case sensitive except in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  var parts = keyParams.substr(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES paramters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substr(12),
    password: pwd.substr(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function(codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }
  sdp += 'a=rtcp-mux\r\n';

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(function(extension) {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(parts) {
      return parts.attribute === 'cname';
    });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(function(line) {
      var parts = line.substr(17).split(' ');
      return parts.map(function(part) {
        return parseInt(part, 10);
      });
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  var rtcpParameters = {};

  // Gets the first SSRC. Note tha with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(obj) {
      return obj.attribute === 'cname';
    })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  var parts;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(msidParts) {
      return msidParts.attribute === 'msid';
    });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  var mline = SDPUtils.parseMLine(mediaSection);
  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  var maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize: maxMessageSize
    };
  }
  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]
      .substr(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize: maxMessageSize
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  var output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n'
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boilder plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  var sessionId;
  var version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  var user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
    transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
    transceiver.dtlsTransport.getLocalParameters(),
    type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.direction) {
    sdp += 'a=' + transceiver.direction + '\r\n';
  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    // spec.
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;

    // for Chrome.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  var parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  var lines = SDPUtils.splitLines(blob);
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ }),

/***/ 869:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = __webpack_require__(86);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(87);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = __webpack_require__(41);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(15);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(16);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(42);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(46);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(17);

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = __webpack_require__(870);

var _QRReader = __webpack_require__(1370);

var _QRReader2 = _interopRequireDefault(_QRReader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/eimanalwahhabi/Desktop/RecycleChain/pages/recycler.js?entry';
/*
This is the recycler page where a recycler scans the QR codes and view rewards
Contact used here: an instance of tracking.sol 
To run the app, use the command npm run dev
*/

//import web3 from '../ethereum/web3';
//import trackingContract from '../ethereum/tracking'; // import SC instance

var recyclerPage = function (_Component) {
    (0, _inherits3.default)(recyclerPage, _Component);

    function recyclerPage(props) {
        var _this2 = this;

        (0, _classCallCheck3.default)(this, recyclerPage);

        var _this = (0, _possibleConstructorReturn3.default)(this, (recyclerPage.__proto__ || (0, _getPrototypeOf2.default)(recyclerPage)).call(this, props));

        _this.onScan = function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();
                                if (_this.state.qr === false) _this.setState({ qr: true });else _this.setState({ qr: false });

                            case 2:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }();

        _this.state = {
            rewards: 0,
            bottleStatus: '',
            result: '',
            qr: false
        };
        return _this;
    }

    (0, _createClass3.default)(recyclerPage, [{
        key: 'renderQRReader',
        value: function renderQRReader() {
            return _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 38
                }
            }, _react2.default.createElement(QrReader, {
                delay: 300,
                onError: this.handleError,
                onScan: this.handleScan,
                style: { width: '100%' },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }), _react2.default.createElement('p', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, this.state.result));
        }
    }, {
        key: 'renderBottlesTable',
        value: function renderBottlesTable() {

            return _react2.default.createElement(_semanticUiReact.Table.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 54
                }
            }, _react2.default.createElement(_semanticUiReact.Table.Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 55
                }
            }, this.state.result), _react2.default.createElement(_semanticUiReact.Table.Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 56
                }
            }, 'Completed'));
        }
    }, {
        key: 'render',
        value: function render() {
            var qr = this.state.qr;

            return _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 68
                }
            }, _react2.default.createElement('h1', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 69
                }
            }, 'Welcome to Recycler\'s Page'), _react2.default.createElement('link', { rel: 'stylesheet',
                href: '//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css',
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            }), _react2.default.createElement(_semanticUiReact.Card, { header: 'Rewards', description: this.state.rewards, meta: 'ETH', centered: 'true', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 74
                }
            }), _react2.default.createElement('br', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            }), _react2.default.createElement('br', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 77
                }
            }), _react2.default.createElement('div', { className: 'Scanner', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 79
                }
            }, _react2.default.createElement('h2', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                }
            }, 'Dispose a Plastic Bottle '), _react2.default.createElement(_semanticUiReact.Button, { className: 'QrReader', onClick: this.onScan, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 81
                }
            }, ' Scan QR Code'), _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 82
                }
            }, ' ', this.state.qr === true && this.state.result === '' ? _react2.default.createElement(_QRReader2.default, {
                delay: this.state.delay,
                onError: this.handleError,
                onScan: this.handleScan,
                style: { width: "25%" //
                }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 82
                }
            }) : '', ' ')), _react2.default.createElement('div', { className: 'BottleTable', style: { 'width': '40%', 'margin-left': 'auto', 'margin-right': 'auto' }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 90
                }
            }, _react2.default.createElement(_semanticUiReact.Table, { unstackable: true, size: 'small', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 91
                }
            }, _react2.default.createElement(_semanticUiReact.Table.Header, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 92
                }
            }, _react2.default.createElement(_semanticUiReact.Table.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 93
                }
            }, _react2.default.createElement(_semanticUiReact.Table.HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 94
                }
            }, 'Plasitc Bottle Address'), _react2.default.createElement(_semanticUiReact.Table.HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 95
                }
            }, 'Status'))), _react2.default.createElement(_semanticUiReact.Table.Body, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                }
            }, this.renderBottlesTable()))));
        }
    }]);

    return recyclerPage;
}(_react.Component);

//At the end of each page, a component is expected to be returned 
// If not, Next.js throws an error 


exports.default = recyclerPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL3JlY3ljbGVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiQ29tcG9uZW50IiwibGF6eSIsIlN1c3BlbnNlIiwiQ2FyZCIsIlRhYmxlIiwiQnV0dG9uIiwiUVJSZWFkZXIiLCJyZWN5Y2xlclBhZ2UiLCJwcm9wcyIsIm9uU2NhbiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdGF0ZSIsInFyIiwic2V0U3RhdGUiLCJyZXdhcmRzIiwiYm90dGxlU3RhdHVzIiwicmVzdWx0IiwiaGFuZGxlRXJyb3IiLCJoYW5kbGVTY2FuIiwid2lkdGgiLCJkZWxheSIsInJlbmRlckJvdHRsZXNUYWJsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU1BLEFBQU8sQUFBUyxBQUFXLEFBQU07Ozs7QUFDakMsQUFBUyxBQUFNLEFBQU87O0FBQ3RCLEFBQU8sQUFBYzs7Ozs7OztBQVJyQjs7Ozs7O0FBVUE7QUFDQTs7SSxBQUVNOzBDQUVGOzswQkFBQSxBQUFZLE9BQU87cUJBQUE7OzRDQUFBOztzSkFBQSxBQUNUOztjQURTLEFBV25CLHFCQVhtQjtnR0FXVixpQkFBQSxBQUFPLE9BQVA7OEVBQUE7OEJBQUE7eURBQUE7aUNBQ0w7c0NBQUEsQUFBTSxBQUNOO29DQUFJLE1BQUEsQUFBSyxNQUFMLEFBQVcsT0FBZixBQUFzQixPQUNsQixNQUFBLEFBQUssU0FBUyxFQUFFLElBRHBCLEFBQ0ksQUFBYyxBQUFNLGFBRXBCLE1BQUEsQUFBSyxTQUFTLEVBQUUsSUFMZixBQUtELEFBQWMsQUFBTTs7aUNBTG5CO2lDQUFBO2dEQUFBOztBQUFBOzRCQUFBO0FBWFU7O2lDQUFBO3dDQUFBO0FBQUE7QUFFZjs7Y0FBQSxBQUFLO3FCQUFRLEFBQ0EsQUFDVDswQkFGUyxBQUVLLEFBQ2Q7b0JBSFMsQUFHRCxBQUNSO2dCQU5XLEFBRWYsQUFBYSxBQUlMO0FBSkssQUFDVDtlQUtQOzs7Ozt5Q0FZZ0IsQUFDYjttQ0FDSSxjQUFBOzs4QkFBQTtnQ0FBQSxBQUNJO0FBREo7QUFBQSxhQUFBLGdDQUNJLEFBQUM7dUJBQUQsQUFDVyxBQUNQO3lCQUFTLEtBRmIsQUFFa0IsQUFDZDt3QkFBUSxLQUhaLEFBR2lCLEFBQ2I7dUJBQU8sRUFBRSxPQUpiLEFBSVcsQUFBUzs7OEJBSnBCO2dDQURKLEFBQ0ksQUFNQTtBQU5BO0FBQ0ksZ0NBS0osY0FBQTs7OEJBQUE7Z0NBQUEsQUFBSTtBQUFKO0FBQUEsb0JBQUksQUFBSyxNQVJqQixBQUNJLEFBT0ksQUFBZSxBQUkxQjs7Ozs2Q0FFb0IsQUFFakI7O21DQUNLLGNBQUQsdUJBQUEsQUFBTzs7OEJBQVA7Z0NBQUEsQUFDSTtBQURKO0FBQUEsYUFBQSxrQkFDSyxjQUFELHVCQUFBLEFBQU87OzhCQUFQO2dDQUFBLEFBQWE7QUFBYjtBQUFBLG9CQUFhLEFBQUssTUFEdEIsQUFDSSxBQUF3QixBQUN4Qix5QkFBQyxjQUFELHVCQUFBLEFBQU87OzhCQUFQO2dDQUFBO0FBQUE7QUFBQSxlQUhSLEFBQ0ksQUFFSSxBQUtYOzs7O2lDQUVRO2dCQUFBLEFBRUUsS0FBTSxLQUZSLEFBRWEsTUFGYixBQUVFLEFBRVA7O21DQUNJLGNBQUE7OzhCQUFBO2dDQUFBLEFBQ0k7QUFESjtBQUFBLGFBQUEsa0JBQ0ksY0FBQTs7OEJBQUE7Z0NBQUE7QUFBQTtBQUFBLGVBREosQUFDSSxBQUNBLHdFQUFNLEtBQU4sQUFBVSxBQUNOO3NCQURKLEFBQ1M7OzhCQURUO2dDQUZKLEFBRUksQUFJQTtBQUpBO2dDQUlBLEFBQUMsdUNBQUssUUFBTixBQUFhLFdBQVUsYUFBYSxLQUFBLEFBQUssTUFBekMsQUFBK0MsU0FBUyxNQUF4RCxBQUE2RCxPQUFNLFVBQW5FLEFBQTRFOzhCQUE1RTtnQ0FOSixBQU1JLEFBRUE7QUFGQTs7OzhCQUVBO2dDQVJKLEFBUUksQUFDQTtBQURBO0FBQUE7OzhCQUNBO2dDQVRKLEFBU0ksQUFFQTtBQUZBO0FBQUEsZ0NBRUEsY0FBQSxTQUFLLFdBQUwsQUFBZTs4QkFBZjtnQ0FBQSxBQUNJO0FBREo7K0JBQ0ksY0FBQTs7OEJBQUE7Z0NBQUE7QUFBQTtBQUFBLGVBREosQUFDSSxBQUNBLDhDQUFBLEFBQUMseUNBQU8sV0FBUixBQUFrQixZQUFXLFNBQVMsS0FBdEMsQUFBMkM7OEJBQTNDO2dDQUFBO0FBQUE7ZUFGSixBQUVJLEFBQ0Esa0NBQUEsY0FBQTs7OEJBQUE7Z0NBQUE7QUFBQTtBQUFBLGVBQU8sVUFBQSxBQUFLLE1BQUwsQUFBVyxPQUFYLEFBQWtCLFFBQVEsS0FBQSxBQUFLLE1BQUwsQUFBVyxXQUFyQyxBQUFnRCxxQkFBSyxBQUFDO3VCQUNsRCxLQUFBLEFBQUssTUFENEMsQUFDdEMsQUFDbEI7eUJBQVMsS0FGK0MsQUFFMUMsQUFDZDt3QkFBUSxLQUhnRCxBQUczQyxBQUNiO3lCQUFTLE9BSitDLEFBSWpELEFBQVMsTUFKd0MsQUFJaEM7QUFBakI7OEJBSmlEO2dDQUFyRCxBQUFxRDtBQUFBO0FBQ3hELGFBRHdELElBQTVELEFBS0ssSUFuQmIsQUFXSSxBQUdJLEFBUUosdUJBQUEsY0FBQSxTQUFLLFdBQUwsQUFBZSxlQUFjLE9BQU8sRUFBRSxTQUFGLEFBQVcsT0FBTyxlQUFsQixBQUFpQyxRQUFRLGdCQUE3RSxBQUFvQyxBQUF5RDs4QkFBN0Y7Z0NBQUEsQUFDSTtBQURKOytCQUNJLEFBQUMsd0NBQU0sYUFBUCxNQUFtQixNQUFuQixBQUF3Qjs4QkFBeEI7Z0NBQUEsQUFDSTtBQURKOytCQUNLLGNBQUQsdUJBQUEsQUFBTzs7OEJBQVA7Z0NBQUEsQUFDSTtBQURKO0FBQUEsK0JBQ0ssY0FBRCx1QkFBQSxBQUFPOzs4QkFBUDtnQ0FBQSxBQUNJO0FBREo7QUFBQSwrQkFDSyxjQUFELHVCQUFBLEFBQU87OzhCQUFQO2dDQUFBO0FBQUE7QUFBQSxlQURKLEFBQ0ksQUFDQSwyQ0FBQyxjQUFELHVCQUFBLEFBQU87OzhCQUFQO2dDQUFBO0FBQUE7QUFBQSxlQUpaLEFBQ0ksQUFDSSxBQUVJLEFBSVIsNkJBQUMsY0FBRCx1QkFBQSxBQUFPOzs4QkFBUDtnQ0FBQSxBQUNLO0FBREw7QUFBQSxvQkFoQ2hCLEFBQ0ksQUFzQkksQUFDSSxBQVFJLEFBQ0ssQUFBSyxBQVU3Qjs7Ozs7QSxBQWhHc0I7O0FBb0czQjtBQUNBLEFBQ0E7OztrQkFBQSxBQUFlIiwiZmlsZSI6InJlY3ljbGVyLmpzP2VudHJ5Iiwic291cmNlUm9vdCI6Ii9Vc2Vycy9laW1hbmFsd2FoaGFiaS9EZXNrdG9wL1JlY3ljbGVDaGFpbiJ9

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "/Users/eimanalwahhabi/Desktop/RecycleChain/pages/recycler.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/eimanalwahhabi/Desktop/RecycleChain/pages/recycler.js"); } } })();
    (function (Component, route) {
      if (false) return
      if (false) return

      var qs = __webpack_require__(84)
      var params = qs.parse(__resourceQuery.slice(1))
      if (params.entry == null) return

      module.hot.accept()
      Component.__route = route

      if (module.hot.status() === 'idle') return

      var components = next.router.components
      for (var r in components) {
        if (!components.hasOwnProperty(r)) continue

        if (components[r].Component.__route === route) {
          next.router.update(r, Component)
        }
      }
    })(typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__.default : (module.exports.default || module.exports), "/recycler")
  
/* WEBPACK VAR INJECTION */}.call(exports, "?entry"))

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5hZDNmNmVkOWIxZmFiM2NjMzYwZi5ob3QtdXBkYXRlLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXFyLXJlYWRlci9saWIvaW5kZXguanM/ZjZjMWUyNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcXItcmVhZGVyL2xpYi9nZXREZXZpY2VJZC5qcz9mNmMxZTI0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1xci1yZWFkZXIvbGliL2Vycm9ycy5qcz9mNmMxZTI0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1xci1yZWFkZXIvbGliL2hhdmVQcm9wc0NoYW5nZWQuanM/ZjZjMWUyNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcXItcmVhZGVyL2xpYi9jcmVhdGVCbG9iLmpzP2Y2YzFlMjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2NvcmUuanM/ZjZjMWUyNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2FkYXB0ZXJfZmFjdG9yeS5qcz9mNmMxZTI0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY2hyb21lL2Nocm9tZV9zaGltLmpzP2Y2YzFlMjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9jaHJvbWUvZ2V0dXNlcm1lZGlhLmpzP2Y2YzFlMjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9jaHJvbWUvZ2V0ZGlzcGxheW1lZGlhLmpzP2Y2YzFlMjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2VkZ2Vfc2hpbS5qcz9mNmMxZTI0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9maWx0ZXJpY2VzZXJ2ZXJzLmpzP2Y2YzFlMjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J0Y3BlZXJjb25uZWN0aW9uLXNoaW0vcnRjcGVlcmNvbm5lY3Rpb24uanM/ZjZjMWUyNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2VkZ2UvZ2V0dXNlcm1lZGlhLmpzP2Y2YzFlMjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2dldGRpc3BsYXltZWRpYS5qcz9mNmMxZTI0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZmlyZWZveC9maXJlZm94X3NoaW0uanM/ZjZjMWUyNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZ2V0dXNlcm1lZGlhLmpzP2Y2YzFlMjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9maXJlZm94L2dldGRpc3BsYXltZWRpYS5qcz9mNmMxZTI0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvc2FmYXJpL3NhZmFyaV9zaGltLmpzP2Y2YzFlMjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9jb21tb25fc2hpbS5qcz9mNmMxZTI0Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvUVJSZWFkZXIuanM/ZjZjMWUyNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL3V0aWxzLmpzPzhkNWU2MmYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NkcC9zZHAuanM/YTAyNzExNyIsIndlYnBhY2s6Ly8vLi9wYWdlcy9yZWN5Y2xlci5qcz9hMDI3MTE3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9jbGFzcywgX3RlbXA7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBDb21wb25lbnQgPSBSZWFjdC5Db21wb25lbnQ7XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vZ2V0RGV2aWNlSWQnKSxcbiAgICBnZXREZXZpY2VJZCA9IF9yZXF1aXJlLmdldERldmljZUlkLFxuICAgIGdldEZhY2luZ01vZGVQYXR0ZXJuID0gX3JlcXVpcmUuZ2V0RmFjaW5nTW9kZVBhdHRlcm47XG5cbnZhciBoYXZlUHJvcHNDaGFuZ2VkID0gcmVxdWlyZSgnLi9oYXZlUHJvcHNDaGFuZ2VkJyk7XG52YXIgY3JlYXRlQmxvYiA9IHJlcXVpcmUoJy4vY3JlYXRlQmxvYicpO1xuXG4vLyBSZXF1aXJlIGFkYXB0ZXIgdG8gc3VwcG9ydCBvbGRlciBicm93c2VyIGltcGxlbWVudGF0aW9uc1xucmVxdWlyZSgnd2VicnRjLWFkYXB0ZXInKTtcblxuLy8gSW5saW5lIHdvcmtlci5qcyBhcyBhIHN0cmluZyB2YWx1ZSBvZiB3b3JrZXJCbG9iLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG52YXIgd29ya2VyQmxvYiA9IGNyZWF0ZUJsb2IoW1wiIWZ1bmN0aW9uKG8sZSl7XFxcIm9iamVjdFxcXCI9PXR5cGVvZiBleHBvcnRzJiZcXFwib2JqZWN0XFxcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XFxcIm9iamVjdFxcXCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuanNRUj1lKCk6by5qc1FSPWUoKX0oXFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihvKXtmdW5jdGlvbiBlKHQpe2lmKHJbdF0pcmV0dXJuIHJbdF0uZXhwb3J0czt2YXIgYz1yW3RdPXtpOnQsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gb1t0XS5jYWxsKGMuZXhwb3J0cyxjLGMuZXhwb3J0cyxlKSxjLmw9ITAsYy5leHBvcnRzfXZhciByPXt9O3JldHVybiBlLm09byxlLmM9cixlLmQ9ZnVuY3Rpb24obyxyLHQpe2UubyhvLHIpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxyLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6dH0pfSxlLm49ZnVuY3Rpb24obyl7dmFyIHI9byYmby5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIG8uZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gb307cmV0dXJuIGUuZChyLFxcXCJhXFxcIixyKSxyfSxlLm89ZnVuY3Rpb24obyxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sZSl9LGUucD1cXFwiXFxcIixlKGUucz0zKX0oW2Z1bmN0aW9uKG8sZSxyKXtcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO3ZhciB0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbyhvLGUpe3RoaXMud2lkdGg9ZSx0aGlzLmhlaWdodD1vLmxlbmd0aC9lLHRoaXMuZGF0YT1vfXJldHVybiBvLmNyZWF0ZUVtcHR5PWZ1bmN0aW9uKGUscil7cmV0dXJuIG5ldyBvKG5ldyBVaW50OENsYW1wZWRBcnJheShlKnIpLGUpfSxvLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24obyxlKXtyZXR1cm4hKG88MHx8bz49dGhpcy53aWR0aHx8ZTwwfHxlPj10aGlzLmhlaWdodCkmJiEhdGhpcy5kYXRhW2UqdGhpcy53aWR0aCtvXX0sby5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKG8sZSxyKXt0aGlzLmRhdGFbZSp0aGlzLndpZHRoK29dPXI/MTowfSxvLnByb3RvdHlwZS5zZXRSZWdpb249ZnVuY3Rpb24obyxlLHIsdCxjKXtmb3IodmFyIHM9ZTtzPGUrdDtzKyspZm9yKHZhciBhPW87YTxvK3I7YSsrKXRoaXMuc2V0KGEscywhIWMpfSxvfSgpO2UuQml0TWF0cml4PXR9LGZ1bmN0aW9uKG8sZSxyKXtcXFwidXNlIHN0cmljdFxcXCI7ZnVuY3Rpb24gdChvLGUpe3JldHVybiBvXmV9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO3ZhciBjPXIoMik7ZS5hZGRPclN1YnRyYWN0R0Y9dDt2YXIgcz1mdW5jdGlvbigpe2Z1bmN0aW9uIG8obyxlLHIpe3RoaXMucHJpbWl0aXZlPW8sdGhpcy5zaXplPWUsdGhpcy5nZW5lcmF0b3JCYXNlPXIsdGhpcy5leHBUYWJsZT1uZXcgQXJyYXkodGhpcy5zaXplKSx0aGlzLmxvZ1RhYmxlPW5ldyBBcnJheSh0aGlzLnNpemUpO2Zvcih2YXIgdD0xLHM9MDtzPHRoaXMuc2l6ZTtzKyspdGhpcy5leHBUYWJsZVtzXT10LCh0Kj0yKT49dGhpcy5zaXplJiYodD0odF50aGlzLnByaW1pdGl2ZSkmdGhpcy5zaXplLTEpO2Zvcih2YXIgcz0wO3M8dGhpcy5zaXplLTE7cysrKXRoaXMubG9nVGFibGVbdGhpcy5leHBUYWJsZVtzXV09czt0aGlzLnplcm89bmV3IGMuZGVmYXVsdCh0aGlzLFVpbnQ4Q2xhbXBlZEFycmF5LmZyb20oWzBdKSksdGhpcy5vbmU9bmV3IGMuZGVmYXVsdCh0aGlzLFVpbnQ4Q2xhbXBlZEFycmF5LmZyb20oWzFdKSl9cmV0dXJuIG8ucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKG8sZSl7cmV0dXJuIDA9PT1vfHwwPT09ZT8wOnRoaXMuZXhwVGFibGVbKHRoaXMubG9nVGFibGVbb10rdGhpcy5sb2dUYWJsZVtlXSklKHRoaXMuc2l6ZS0xKV19LG8ucHJvdG90eXBlLmludmVyc2U9ZnVuY3Rpb24obyl7aWYoMD09PW8pdGhyb3cgbmV3IEVycm9yKFxcXCJDYW4ndCBpbnZlcnQgMFxcXCIpO3JldHVybiB0aGlzLmV4cFRhYmxlW3RoaXMuc2l6ZS10aGlzLmxvZ1RhYmxlW29dLTFdfSxvLnByb3RvdHlwZS5idWlsZE1vbm9taWFsPWZ1bmN0aW9uKG8sZSl7aWYobzwwKXRocm93IG5ldyBFcnJvcihcXFwiSW52YWxpZCBtb25vbWlhbCBkZWdyZWUgbGVzcyB0aGFuIDBcXFwiKTtpZigwPT09ZSlyZXR1cm4gdGhpcy56ZXJvO3ZhciByPW5ldyBVaW50OENsYW1wZWRBcnJheShvKzEpO3JldHVybiByWzBdPWUsbmV3IGMuZGVmYXVsdCh0aGlzLHIpfSxvLnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24obyl7aWYoMD09PW8pdGhyb3cgbmV3IEVycm9yKFxcXCJDYW4ndCB0YWtlIGxvZygwKVxcXCIpO3JldHVybiB0aGlzLmxvZ1RhYmxlW29dfSxvLnByb3RvdHlwZS5leHA9ZnVuY3Rpb24obyl7cmV0dXJuIHRoaXMuZXhwVGFibGVbb119LG99KCk7ZS5kZWZhdWx0PXN9LGZ1bmN0aW9uKG8sZSxyKXtcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO3ZhciB0PXIoMSksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIG8obyxlKXtpZigwPT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFxcXCJObyBjb2VmZmljaWVudHMuXFxcIik7dGhpcy5maWVsZD1vO3ZhciByPWUubGVuZ3RoO2lmKHI+MSYmMD09PWVbMF0pe2Zvcih2YXIgdD0xO3Q8ciYmMD09PWVbdF07KXQrKztpZih0PT09cil0aGlzLmNvZWZmaWNpZW50cz1vLnplcm8uY29lZmZpY2llbnRzO2Vsc2V7dGhpcy5jb2VmZmljaWVudHM9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHItdCk7Zm9yKHZhciBjPTA7Yzx0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGg7YysrKXRoaXMuY29lZmZpY2llbnRzW2NdPWVbdCtjXX19ZWxzZSB0aGlzLmNvZWZmaWNpZW50cz1lfXJldHVybiBvLnByb3RvdHlwZS5kZWdyZWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoLTF9LG8ucHJvdG90eXBlLmlzWmVybz1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5jb2VmZmljaWVudHNbMF19LG8ucHJvdG90eXBlLmdldENvZWZmaWNpZW50PWZ1bmN0aW9uKG8pe3JldHVybiB0aGlzLmNvZWZmaWNpZW50c1t0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGgtMS1vXX0sby5wcm90b3R5cGUuYWRkT3JTdWJ0cmFjdD1mdW5jdGlvbihlKXtpZih0aGlzLmlzWmVybygpKXJldHVybiBlO2lmKGUuaXNaZXJvKCkpcmV0dXJuIHRoaXM7dmFyIHI9dGhpcy5jb2VmZmljaWVudHMsYz1lLmNvZWZmaWNpZW50cztyLmxlbmd0aD5jLmxlbmd0aCYmKG49W2Mscl0scj1uWzBdLGM9blsxXSk7Zm9yKHZhciBzPW5ldyBVaW50OENsYW1wZWRBcnJheShjLmxlbmd0aCksYT1jLmxlbmd0aC1yLmxlbmd0aCxkPTA7ZDxhO2QrKylzW2RdPWNbZF07Zm9yKHZhciBkPWE7ZDxjLmxlbmd0aDtkKyspc1tkXT10LmFkZE9yU3VidHJhY3RHRihyW2QtYV0sY1tkXSk7cmV0dXJuIG5ldyBvKHRoaXMuZmllbGQscyk7dmFyIG59LG8ucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKGUpe2lmKDA9PT1lKXJldHVybiB0aGlzLmZpZWxkLnplcm87aWYoMT09PWUpcmV0dXJuIHRoaXM7Zm9yKHZhciByPXRoaXMuY29lZmZpY2llbnRzLmxlbmd0aCx0PW5ldyBVaW50OENsYW1wZWRBcnJheShyKSxjPTA7YzxyO2MrKyl0W2NdPXRoaXMuZmllbGQubXVsdGlwbHkodGhpcy5jb2VmZmljaWVudHNbY10sZSk7cmV0dXJuIG5ldyBvKHRoaXMuZmllbGQsdCl9LG8ucHJvdG90eXBlLm11bHRpcGx5UG9seT1mdW5jdGlvbihlKXtpZih0aGlzLmlzWmVybygpfHxlLmlzWmVybygpKXJldHVybiB0aGlzLmZpZWxkLnplcm87Zm9yKHZhciByPXRoaXMuY29lZmZpY2llbnRzLGM9ci5sZW5ndGgscz1lLmNvZWZmaWNpZW50cyxhPXMubGVuZ3RoLGQ9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGMrYS0xKSxuPTA7bjxjO24rKylmb3IodmFyIGw9cltuXSxpPTA7aTxhO2krKylkW24raV09dC5hZGRPclN1YnRyYWN0R0YoZFtuK2ldLHRoaXMuZmllbGQubXVsdGlwbHkobCxzW2ldKSk7cmV0dXJuIG5ldyBvKHRoaXMuZmllbGQsZCl9LG8ucHJvdG90eXBlLm11bHRpcGx5QnlNb25vbWlhbD1mdW5jdGlvbihlLHIpe2lmKGU8MCl0aHJvdyBuZXcgRXJyb3IoXFxcIkludmFsaWQgZGVncmVlIGxlc3MgdGhhbiAwXFxcIik7aWYoMD09PXIpcmV0dXJuIHRoaXMuZmllbGQuemVybztmb3IodmFyIHQ9dGhpcy5jb2VmZmljaWVudHMubGVuZ3RoLGM9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHQrZSkscz0wO3M8dDtzKyspY1tzXT10aGlzLmZpZWxkLm11bHRpcGx5KHRoaXMuY29lZmZpY2llbnRzW3NdLHIpO3JldHVybiBuZXcgbyh0aGlzLmZpZWxkLGMpfSxvLnByb3RvdHlwZS5ldmFsdWF0ZUF0PWZ1bmN0aW9uKG8pe3ZhciBlPTA7aWYoMD09PW8pcmV0dXJuIHRoaXMuZ2V0Q29lZmZpY2llbnQoMCk7dmFyIHI9dGhpcy5jb2VmZmljaWVudHMubGVuZ3RoO2lmKDE9PT1vKXJldHVybiB0aGlzLmNvZWZmaWNpZW50cy5mb3JFYWNoKGZ1bmN0aW9uKG8pe2U9dC5hZGRPclN1YnRyYWN0R0YoZSxvKX0pLGU7ZT10aGlzLmNvZWZmaWNpZW50c1swXTtmb3IodmFyIGM9MTtjPHI7YysrKWU9dC5hZGRPclN1YnRyYWN0R0YodGhpcy5maWVsZC5tdWx0aXBseShvLGUpLHRoaXMuY29lZmZpY2llbnRzW2NdKTtyZXR1cm4gZX0sb30oKTtlLmRlZmF1bHQ9Y30sZnVuY3Rpb24obyxlLHIpe1xcXCJ1c2Ugc3RyaWN0XFxcIjtmdW5jdGlvbiB0KG8pe3ZhciBlPW4ubG9jYXRlKG8pO2lmKCFlKXJldHVybiBudWxsO3ZhciByPWQuZXh0cmFjdChvLGUpLHQ9YS5kZWNvZGUoci5tYXRyaXgpO3JldHVybiB0P3tiaW5hcnlEYXRhOnQuYnl0ZXMsZGF0YTp0LnRleHQsY2h1bmtzOnQuY2h1bmtzLGxvY2F0aW9uOnt0b3BSaWdodENvcm5lcjpyLm1hcHBpbmdGdW5jdGlvbihlLmRpbWVuc2lvbiwwKSx0b3BMZWZ0Q29ybmVyOnIubWFwcGluZ0Z1bmN0aW9uKDAsMCksYm90dG9tUmlnaHRDb3JuZXI6ci5tYXBwaW5nRnVuY3Rpb24oZS5kaW1lbnNpb24sZS5kaW1lbnNpb24pLGJvdHRvbUxlZnRDb3JuZXI6ci5tYXBwaW5nRnVuY3Rpb24oMCxlLmRpbWVuc2lvbiksdG9wUmlnaHRGaW5kZXJQYXR0ZXJuOmUudG9wUmlnaHQsdG9wTGVmdEZpbmRlclBhdHRlcm46ZS50b3BMZWZ0LGJvdHRvbUxlZnRGaW5kZXJQYXR0ZXJuOmUuYm90dG9tTGVmdCxib3R0b21SaWdodEFsaWdubWVudFBhdHRlcm46ZS5hbGlnbm1lbnRQYXR0ZXJufX06bnVsbH1mdW5jdGlvbiBjKG8sZSxyLGMpe3ZvaWQgMD09PWMmJihjPXt9KTt2YXIgYT1sO09iamVjdC5rZXlzKGF8fHt9KS5mb3JFYWNoKGZ1bmN0aW9uKG8pe2Fbb109Y1tvXXx8YVtvXX0pO3ZhciBkPVxcXCJhdHRlbXB0Qm90aFxcXCI9PT1hLmludmVyc2lvbkF0dGVtcHRzfHxcXFwiaW52ZXJ0Rmlyc3RcXFwiPT09YS5pbnZlcnNpb25BdHRlbXB0cyxuPVxcXCJvbmx5SW52ZXJ0XFxcIj09PWEuaW52ZXJzaW9uQXR0ZW1wdHN8fFxcXCJpbnZlcnRGaXJzdFxcXCI9PT1hLmludmVyc2lvbkF0dGVtcHRzLGk9cy5iaW5hcml6ZShvLGUscixkKSxCPWkuYmluYXJpemVkLGs9aS5pbnZlcnRlZCx1PXQobj9rOkIpO3JldHVybiB1fHxcXFwiYXR0ZW1wdEJvdGhcXFwiIT09YS5pbnZlcnNpb25BdHRlbXB0cyYmXFxcImludmVydEZpcnN0XFxcIiE9PWEuaW52ZXJzaW9uQXR0ZW1wdHN8fCh1PXQobj9COmspKSx1fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTt2YXIgcz1yKDQpLGE9cig1KSxkPXIoMTEpLG49cigxMiksbD17aW52ZXJzaW9uQXR0ZW1wdHM6XFxcImF0dGVtcHRCb3RoXFxcIn07Yy5kZWZhdWx0PWMsZS5kZWZhdWx0PWN9LGZ1bmN0aW9uKG8sZSxyKXtcXFwidXNlIHN0cmljdFxcXCI7ZnVuY3Rpb24gdChvLGUscil7cmV0dXJuIG88ZT9lOm8+cj9yOm99ZnVuY3Rpb24gYyhvLGUscixjKXtpZihvLmxlbmd0aCE9PWUqcio0KXRocm93IG5ldyBFcnJvcihcXFwiTWFsZm9ybWVkIGRhdGEgcGFzc2VkIHRvIGJpbmFyaXplci5cXFwiKTtmb3IodmFyIGw9bmV3IG4oZSxyKSxpPTA7aTxlO2krKylmb3IodmFyIEI9MDtCPHI7QisrKXt2YXIgaz1vWzQqKEIqZStpKSswXSx1PW9bNCooQiplK2kpKzFdLEM9b1s0KihCKmUraSkrMl07bC5zZXQoaSxCLC4yMTI2KmsrLjcxNTIqdSsuMDcyMipDKX1mb3IodmFyIG09TWF0aC5jZWlsKGUvYSksZj1NYXRoLmNlaWwoci9hKSx3PW5ldyBuKG0sZiksUD0wO1A8ZjtQKyspZm9yKHZhciB2PTA7djxtO3YrKyl7Zm9yKHZhciBoPTAscD0xLzAseT0wLEI9MDtCPGE7QisrKWZvcih2YXIgaT0wO2k8YTtpKyspe3ZhciBiPWwuZ2V0KHYqYStpLFAqYStCKTtoKz1iLHA9TWF0aC5taW4ocCxiKSx5PU1hdGgubWF4KHksYil9dmFyIGc9aC9NYXRoLnBvdyhhLDIpO2lmKHktcDw9ZCYmKGc9cC8yLFA+MCYmdj4wKSl7dmFyIHg9KHcuZ2V0KHYsUC0xKSsyKncuZ2V0KHYtMSxQKSt3LmdldCh2LTEsUC0xKSkvNDtwPHgmJihnPXgpfXcuc2V0KHYsUCxnKX12YXIgTT1zLkJpdE1hdHJpeC5jcmVhdGVFbXB0eShlLHIpLEw9bnVsbDtjJiYoTD1zLkJpdE1hdHJpeC5jcmVhdGVFbXB0eShlLHIpKTtmb3IodmFyIFA9MDtQPGY7UCsrKWZvcih2YXIgdj0wO3Y8bTt2Kyspe2Zvcih2YXIgTj10KHYsMixtLTMpLEk9dChQLDIsZi0zKSxoPTAsTz0tMjtPPD0yO08rKylmb3IodmFyIHo9LTI7ejw9Mjt6KyspaCs9dy5nZXQoTitPLEkreik7Zm9yKHZhciBTPWgvMjUsTz0wO088YTtPKyspZm9yKHZhciB6PTA7ejxhO3orKyl7dmFyIGk9diphK08sQj1QKmEreixYPWwuZ2V0KGksQik7TS5zZXQoaSxCLFg8PVMpLGMmJkwuc2V0KGksQiwhKFg8PVMpKX19cmV0dXJuIGM/e2JpbmFyaXplZDpNLGludmVydGVkOkx9OntiaW5hcml6ZWQ6TX19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO3ZhciBzPXIoMCksYT04LGQ9MjQsbj1mdW5jdGlvbigpe2Z1bmN0aW9uIG8obyxlKXt0aGlzLndpZHRoPW8sdGhpcy5kYXRhPW5ldyBVaW50OENsYW1wZWRBcnJheShvKmUpfXJldHVybiBvLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24obyxlKXtyZXR1cm4gdGhpcy5kYXRhW2UqdGhpcy53aWR0aCtvXX0sby5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKG8sZSxyKXt0aGlzLmRhdGFbZSp0aGlzLndpZHRoK29dPXJ9LG99KCk7ZS5iaW5hcml6ZT1jfSxmdW5jdGlvbihvLGUscil7XFxcInVzZSBzdHJpY3RcXFwiO2Z1bmN0aW9uIHQobyxlKXtmb3IodmFyIHI9b15lLHQ9MDtyOyl0KyssciY9ci0xO3JldHVybiB0fWZ1bmN0aW9uIGMobyxlKXtyZXR1cm4gZTw8MXxvfWZ1bmN0aW9uIHMobyl7dmFyIGU9MTcrNCpvLnZlcnNpb25OdW1iZXIscj1rLkJpdE1hdHJpeC5jcmVhdGVFbXB0eShlLGUpO3Iuc2V0UmVnaW9uKDAsMCw5LDksITApLHIuc2V0UmVnaW9uKGUtOCwwLDgsOSwhMCksci5zZXRSZWdpb24oMCxlLTgsOSw4LCEwKTtmb3IodmFyIHQ9MCxjPW8uYWxpZ25tZW50UGF0dGVybkNlbnRlcnM7dDxjLmxlbmd0aDt0KyspZm9yKHZhciBzPWNbdF0sYT0wLGQ9by5hbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczthPGQubGVuZ3RoO2ErKyl7dmFyIG49ZFthXTs2PT09cyYmNj09PW58fDY9PT1zJiZuPT09ZS03fHxzPT09ZS03JiY2PT09bnx8ci5zZXRSZWdpb24ocy0yLG4tMiw1LDUsITApfXJldHVybiByLnNldFJlZ2lvbig2LDksMSxlLTE3LCEwKSxyLnNldFJlZ2lvbig5LDYsZS0xNywxLCEwKSxvLnZlcnNpb25OdW1iZXI+NiYmKHIuc2V0UmVnaW9uKGUtMTEsMCwzLDYsITApLHIuc2V0UmVnaW9uKDAsZS0xMSw2LDMsITApKSxyfWZ1bmN0aW9uIGEobyxlLHIpe2Zvcih2YXIgdD13W3IuZGF0YU1hc2tdLGE9by5oZWlnaHQsZD1zKGUpLG49W10sbD0wLGk9MCxCPSEwLGs9YS0xO2s+MDtrLT0yKXs2PT09ayYmay0tO2Zvcih2YXIgdT0wO3U8YTt1KyspZm9yKHZhciBDPUI/YS0xLXU6dSxtPTA7bTwyO20rKyl7dmFyIGY9ay1tO2lmKCFkLmdldChmLEMpKXtpKys7dmFyIFA9by5nZXQoZixDKTt0KHt5OkMseDpmfSkmJihQPSFQKSxsPWMoUCxsKSw4PT09aSYmKG4ucHVzaChsKSxpPTAsbD0wKX19Qj0hQn1yZXR1cm4gbn1mdW5jdGlvbiBkKG8pe3ZhciBlPW8uaGVpZ2h0LHI9TWF0aC5mbG9vcigoZS0xNykvNCk7aWYocjw9NilyZXR1cm4gbS5WRVJTSU9OU1tyLTFdO2Zvcih2YXIgcz0wLGE9NTthPj0wO2EtLSlmb3IodmFyIGQ9ZS05O2Q+PWUtMTE7ZC0tKXM9YyhvLmdldChkLGEpLHMpO2Zvcih2YXIgbj0wLGQ9NTtkPj0wO2QtLSlmb3IodmFyIGE9ZS05O2E+PWUtMTE7YS0tKW49YyhvLmdldChkLGEpLG4pO2Zvcih2YXIgbCxpPTEvMCxCPTAsaz1tLlZFUlNJT05TO0I8ay5sZW5ndGg7QisrKXt2YXIgdT1rW0JdO2lmKHUuaW5mb0JpdHM9PT1zfHx1LmluZm9CaXRzPT09bilyZXR1cm4gdTt2YXIgQz10KHMsdS5pbmZvQml0cyk7QzxpJiYobD11LGk9QyksQz10KG4sdS5pbmZvQml0cyksQzxpJiYobD11LGk9Qyl9cmV0dXJuIGk8PTM/bDp2b2lkIDB9ZnVuY3Rpb24gbihvKXtmb3IodmFyIGU9MCxyPTA7cjw9ODtyKyspNiE9PXImJihlPWMoby5nZXQociw4KSxlKSk7Zm9yKHZhciBzPTc7cz49MDtzLS0pNiE9PXMmJihlPWMoby5nZXQoOCxzKSxlKSk7Zm9yKHZhciBhPW8uaGVpZ2h0LGQ9MCxzPWEtMTtzPj1hLTc7cy0tKWQ9YyhvLmdldCg4LHMpLGQpO2Zvcih2YXIgcj1hLTg7cjxhO3IrKylkPWMoby5nZXQociw4KSxkKTtmb3IodmFyIG49MS8wLGw9bnVsbCxpPTAsQj1mO2k8Qi5sZW5ndGg7aSsrKXt2YXIgaz1CW2ldLHU9ay5iaXRzLEM9ay5mb3JtYXRJbmZvO2lmKHU9PT1lfHx1PT09ZClyZXR1cm4gQzt2YXIgbT10KGUsdSk7bTxuJiYobD1DLG49bSksZSE9PWQmJihtPXQoZCx1KSk8biYmKGw9QyxuPW0pfXJldHVybiBuPD0zP2w6bnVsbH1mdW5jdGlvbiBsKG8sZSxyKXt2YXIgdD1lLmVycm9yQ29ycmVjdGlvbkxldmVsc1tyXSxjPVtdLHM9MDtpZih0LmVjQmxvY2tzLmZvckVhY2goZnVuY3Rpb24obyl7Zm9yKHZhciBlPTA7ZTxvLm51bUJsb2NrcztlKyspYy5wdXNoKHtudW1EYXRhQ29kZXdvcmRzOm8uZGF0YUNvZGV3b3Jkc1BlckJsb2NrLGNvZGV3b3JkczpbXX0pLHMrPW8uZGF0YUNvZGV3b3Jkc1BlckJsb2NrK3QuZWNDb2Rld29yZHNQZXJCbG9ja30pLG8ubGVuZ3RoPHMpcmV0dXJuIG51bGw7bz1vLnNsaWNlKDAscyk7Zm9yKHZhciBhPXQuZWNCbG9ja3NbMF0uZGF0YUNvZGV3b3Jkc1BlckJsb2NrLGQ9MDtkPGE7ZCsrKWZvcih2YXIgbj0wLGw9YztuPGwubGVuZ3RoO24rKyl7dmFyIGk9bFtuXTtpLmNvZGV3b3Jkcy5wdXNoKG8uc2hpZnQoKSl9aWYodC5lY0Jsb2Nrcy5sZW5ndGg+MSlmb3IodmFyIEI9dC5lY0Jsb2Nrc1swXS5udW1CbG9ja3Msaz10LmVjQmxvY2tzWzFdLm51bUJsb2NrcyxkPTA7ZDxrO2QrKyljW0IrZF0uY29kZXdvcmRzLnB1c2goby5zaGlmdCgpKTtmb3IoO28ubGVuZ3RoPjA7KWZvcih2YXIgdT0wLEM9Yzt1PEMubGVuZ3RoO3UrKyl7dmFyIGk9Q1t1XTtpLmNvZGV3b3Jkcy5wdXNoKG8uc2hpZnQoKSl9cmV0dXJuIGN9ZnVuY3Rpb24gaShvKXt2YXIgZT1kKG8pO2lmKCFlKXJldHVybiBudWxsO3ZhciByPW4obyk7aWYoIXIpcmV0dXJuIG51bGw7dmFyIHQ9YShvLGUsciksYz1sKHQsZSxyLmVycm9yQ29ycmVjdGlvbkxldmVsKTtpZighYylyZXR1cm4gbnVsbDtmb3IodmFyIHM9Yy5yZWR1Y2UoZnVuY3Rpb24obyxlKXtyZXR1cm4gbytlLm51bURhdGFDb2Rld29yZHN9LDApLGk9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHMpLEI9MCxrPTAsbT1jO2s8bS5sZW5ndGg7aysrKXt2YXIgZj1tW2tdLHc9Qy5kZWNvZGUoZi5jb2Rld29yZHMsZi5jb2Rld29yZHMubGVuZ3RoLWYubnVtRGF0YUNvZGV3b3Jkcyk7aWYoIXcpcmV0dXJuIG51bGw7Zm9yKHZhciBQPTA7UDxmLm51bURhdGFDb2Rld29yZHM7UCsrKWlbQisrXT13W1BdfXRyeXtyZXR1cm4gdS5kZWNvZGUoaSxlLnZlcnNpb25OdW1iZXIpfWNhdGNoKG8pe3JldHVybiBudWxsfX1mdW5jdGlvbiBCKG8pe2lmKG51bGw9PW8pcmV0dXJuIG51bGw7dmFyIGU9aShvKTtpZihlKXJldHVybiBlO2Zvcih2YXIgcj0wO3I8by53aWR0aDtyKyspZm9yKHZhciB0PXIrMTt0PG8uaGVpZ2h0O3QrKylvLmdldChyLHQpIT09by5nZXQodCxyKSYmKG8uc2V0KHIsdCwhby5nZXQocix0KSksby5zZXQodCxyLCFvLmdldCh0LHIpKSk7cmV0dXJuIGkobyl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO3ZhciBrPXIoMCksdT1yKDYpLEM9cig5KSxtPXIoMTApLGY9W3tiaXRzOjIxNTIyLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjEsZGF0YU1hc2s6MH19LHtiaXRzOjIwNzczLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjEsZGF0YU1hc2s6MX19LHtiaXRzOjI0MTg4LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjEsZGF0YU1hc2s6Mn19LHtiaXRzOjIzMzcxLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjEsZGF0YU1hc2s6M319LHtiaXRzOjE3OTEzLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjEsZGF0YU1hc2s6NH19LHtiaXRzOjE2NTkwLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjEsZGF0YU1hc2s6NX19LHtiaXRzOjIwMzc1LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjEsZGF0YU1hc2s6Nn19LHtiaXRzOjE5MTA0LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjEsZGF0YU1hc2s6N319LHtiaXRzOjMwNjYwLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjAsZGF0YU1hc2s6MH19LHtiaXRzOjI5NDI3LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjAsZGF0YU1hc2s6MX19LHtiaXRzOjMyMTcwLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjAsZGF0YU1hc2s6Mn19LHtiaXRzOjMwODc3LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjAsZGF0YU1hc2s6M319LHtiaXRzOjI2MTU5LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjAsZGF0YU1hc2s6NH19LHtiaXRzOjI1MzY4LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjAsZGF0YU1hc2s6NX19LHtiaXRzOjI3NzEzLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjAsZGF0YU1hc2s6Nn19LHtiaXRzOjI2OTk4LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjAsZGF0YU1hc2s6N319LHtiaXRzOjU3NjksZm9ybWF0SW5mbzp7ZXJyb3JDb3JyZWN0aW9uTGV2ZWw6MyxkYXRhTWFzazowfX0se2JpdHM6NTA1NCxmb3JtYXRJbmZvOntlcnJvckNvcnJlY3Rpb25MZXZlbDozLGRhdGFNYXNrOjF9fSx7Yml0czo3Mzk5LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjMsZGF0YU1hc2s6Mn19LHtiaXRzOjY2MDgsZm9ybWF0SW5mbzp7ZXJyb3JDb3JyZWN0aW9uTGV2ZWw6MyxkYXRhTWFzazozfX0se2JpdHM6MTg5MCxmb3JtYXRJbmZvOntlcnJvckNvcnJlY3Rpb25MZXZlbDozLGRhdGFNYXNrOjR9fSx7Yml0czo1OTcsZm9ybWF0SW5mbzp7ZXJyb3JDb3JyZWN0aW9uTGV2ZWw6MyxkYXRhTWFzazo1fX0se2JpdHM6MzM0MCxmb3JtYXRJbmZvOntlcnJvckNvcnJlY3Rpb25MZXZlbDozLGRhdGFNYXNrOjZ9fSx7Yml0czoyMTA3LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjMsZGF0YU1hc2s6N319LHtiaXRzOjEzNjYzLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjIsZGF0YU1hc2s6MH19LHtiaXRzOjEyMzkyLGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjIsZGF0YU1hc2s6MX19LHtiaXRzOjE2MTc3LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjIsZGF0YU1hc2s6Mn19LHtiaXRzOjE0ODU0LGZvcm1hdEluZm86e2Vycm9yQ29ycmVjdGlvbkxldmVsOjIsZGF0YU1hc2s6M319LHtiaXRzOjkzOTYsZm9ybWF0SW5mbzp7ZXJyb3JDb3JyZWN0aW9uTGV2ZWw6MixkYXRhTWFzazo0fX0se2JpdHM6ODU3OSxmb3JtYXRJbmZvOntlcnJvckNvcnJlY3Rpb25MZXZlbDoyLGRhdGFNYXNrOjV9fSx7Yml0czoxMTk5NCxmb3JtYXRJbmZvOntlcnJvckNvcnJlY3Rpb25MZXZlbDoyLGRhdGFNYXNrOjZ9fSx7Yml0czoxMTI0NSxmb3JtYXRJbmZvOntlcnJvckNvcnJlY3Rpb25MZXZlbDoyLGRhdGFNYXNrOjd9fV0sdz1bZnVuY3Rpb24obyl7cmV0dXJuKG8ueStvLngpJTI9PTB9LGZ1bmN0aW9uKG8pe3JldHVybiBvLnklMj09MH0sZnVuY3Rpb24obyl7cmV0dXJuIG8ueCUzPT0wfSxmdW5jdGlvbihvKXtyZXR1cm4oby55K28ueCklMz09MH0sZnVuY3Rpb24obyl7cmV0dXJuKE1hdGguZmxvb3Ioby55LzIpK01hdGguZmxvb3Ioby54LzMpKSUyPT0wfSxmdW5jdGlvbihvKXtyZXR1cm4gby54Km8ueSUyK28ueCpvLnklMz09MH0sZnVuY3Rpb24obyl7cmV0dXJuKG8ueSpvLnglMitvLnkqby54JTMpJTI9PTB9LGZ1bmN0aW9uKG8pe3JldHVybigoby55K28ueCklMitvLnkqby54JTMpJTI9PTB9XTtlLmRlY29kZT1CfSxmdW5jdGlvbihvLGUscil7XFxcInVzZSBzdHJpY3RcXFwiO2Z1bmN0aW9uIHQobyxlKXtmb3IodmFyIHI9W10sdD1cXFwiXFxcIixjPVsxMCwxMiwxNF1bZV0scz1vLnJlYWRCaXRzKGMpO3M+PTM7KXt2YXIgYT1vLnJlYWRCaXRzKDEwKTtpZihhPj0xZTMpdGhyb3cgbmV3IEVycm9yKFxcXCJJbnZhbGlkIG51bWVyaWMgdmFsdWUgYWJvdmUgOTk5XFxcIik7dmFyIGQ9TWF0aC5mbG9vcihhLzEwMCksbj1NYXRoLmZsb29yKGEvMTApJTEwLGw9YSUxMDtyLnB1c2goNDgrZCw0OCtuLDQ4K2wpLHQrPWQudG9TdHJpbmcoKStuLnRvU3RyaW5nKCkrbC50b1N0cmluZygpLHMtPTN9aWYoMj09PXMpe3ZhciBhPW8ucmVhZEJpdHMoNyk7aWYoYT49MTAwKXRocm93IG5ldyBFcnJvcihcXFwiSW52YWxpZCBudW1lcmljIHZhbHVlIGFib3ZlIDk5XFxcIik7dmFyIGQ9TWF0aC5mbG9vcihhLzEwKSxuPWElMTA7ci5wdXNoKDQ4K2QsNDgrbiksdCs9ZC50b1N0cmluZygpK24udG9TdHJpbmcoKX1lbHNlIGlmKDE9PT1zKXt2YXIgYT1vLnJlYWRCaXRzKDQpO2lmKGE+PTEwKXRocm93IG5ldyBFcnJvcihcXFwiSW52YWxpZCBudW1lcmljIHZhbHVlIGFib3ZlIDlcXFwiKTtyLnB1c2goNDgrYSksdCs9YS50b1N0cmluZygpfXJldHVybntieXRlczpyLHRleHQ6dH19ZnVuY3Rpb24gYyhvLGUpe2Zvcih2YXIgcj1bXSx0PVxcXCJcXFwiLGM9WzksMTEsMTNdW2VdLHM9by5yZWFkQml0cyhjKTtzPj0yOyl7dmFyIGE9by5yZWFkQml0cygxMSksZD1NYXRoLmZsb29yKGEvNDUpLG49YSU0NTtyLnB1c2goa1tkXS5jaGFyQ29kZUF0KDApLGtbbl0uY2hhckNvZGVBdCgwKSksdCs9a1tkXStrW25dLHMtPTJ9aWYoMT09PXMpe3ZhciBkPW8ucmVhZEJpdHMoNik7ci5wdXNoKGtbZF0uY2hhckNvZGVBdCgwKSksdCs9a1tkXX1yZXR1cm57Ynl0ZXM6cix0ZXh0OnR9fWZ1bmN0aW9uIHMobyxlKXtmb3IodmFyIHI9W10sdD1cXFwiXFxcIixjPVs4LDE2LDE2XVtlXSxzPW8ucmVhZEJpdHMoYyksYT0wO2E8czthKyspe3ZhciBkPW8ucmVhZEJpdHMoOCk7ci5wdXNoKGQpfXRyeXt0Kz1kZWNvZGVVUklDb21wb25lbnQoci5tYXAoZnVuY3Rpb24obyl7cmV0dXJuXFxcIiVcXFwiKyhcXFwiMFxcXCIrby50b1N0cmluZygxNikpLnN1YnN0cigtMil9KS5qb2luKFxcXCJcXFwiKSl9Y2F0Y2gobyl7fXJldHVybntieXRlczpyLHRleHQ6dH19ZnVuY3Rpb24gYShvLGUpe2Zvcih2YXIgcj1bXSx0PVxcXCJcXFwiLGM9WzgsMTAsMTJdW2VdLHM9by5yZWFkQml0cyhjKSxhPTA7YTxzO2ErKyl7dmFyIGQ9by5yZWFkQml0cygxMyksbj1NYXRoLmZsb29yKGQvMTkyKTw8OHxkJTE5MjtuKz1uPDc5MzY/MzMwODg6NDk0NzIsci5wdXNoKG4+PjgsMjU1Jm4pLHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoaS5zaGlmdEpJU1RhYmxlW25dKX1yZXR1cm57Ynl0ZXM6cix0ZXh0OnR9fWZ1bmN0aW9uIGQobyxlKXtmb3IodmFyIHI9bmV3IGwuQml0U3RyZWFtKG8pLGQ9ZTw9OT8wOmU8PTI2PzE6MixpPXt0ZXh0OlxcXCJcXFwiLGJ5dGVzOltdLGNodW5rczpbXX07ci5hdmFpbGFibGUoKT49NDspe3ZhciBrPXIucmVhZEJpdHMoNCk7aWYoaz09PUIuVGVybWluYXRvcilyZXR1cm4gaTtpZihrPT09Qi5FQ0kpMD09PXIucmVhZEJpdHMoMSk/aS5jaHVua3MucHVzaCh7dHlwZTpuLkVDSSxhc3NpZ25tZW50TnVtYmVyOnIucmVhZEJpdHMoNyl9KTowPT09ci5yZWFkQml0cygxKT9pLmNodW5rcy5wdXNoKHt0eXBlOm4uRUNJLGFzc2lnbm1lbnROdW1iZXI6ci5yZWFkQml0cygxNCl9KTowPT09ci5yZWFkQml0cygxKT9pLmNodW5rcy5wdXNoKHt0eXBlOm4uRUNJLGFzc2lnbm1lbnROdW1iZXI6ci5yZWFkQml0cygyMSl9KTppLmNodW5rcy5wdXNoKHt0eXBlOm4uRUNJLGFzc2lnbm1lbnROdW1iZXI6LTF9KTtlbHNlIGlmKGs9PT1CLk51bWVyaWMpe3ZhciB1PXQocixkKTtpLnRleHQrPXUudGV4dCwodz1pLmJ5dGVzKS5wdXNoLmFwcGx5KHcsdS5ieXRlcyksaS5jaHVua3MucHVzaCh7dHlwZTpuLk51bWVyaWMsdGV4dDp1LnRleHR9KX1lbHNlIGlmKGs9PT1CLkFscGhhbnVtZXJpYyl7dmFyIEM9YyhyLGQpO2kudGV4dCs9Qy50ZXh0LChQPWkuYnl0ZXMpLnB1c2guYXBwbHkoUCxDLmJ5dGVzKSxpLmNodW5rcy5wdXNoKHt0eXBlOm4uQWxwaGFudW1lcmljLHRleHQ6Qy50ZXh0fSl9ZWxzZSBpZihrPT09Qi5CeXRlKXt2YXIgbT1zKHIsZCk7aS50ZXh0Kz1tLnRleHQsKHY9aS5ieXRlcykucHVzaC5hcHBseSh2LG0uYnl0ZXMpLGkuY2h1bmtzLnB1c2goe3R5cGU6bi5CeXRlLGJ5dGVzOm0uYnl0ZXMsdGV4dDptLnRleHR9KX1lbHNlIGlmKGs9PT1CLkthbmppKXt2YXIgZj1hKHIsZCk7aS50ZXh0Kz1mLnRleHQsKGg9aS5ieXRlcykucHVzaC5hcHBseShoLGYuYnl0ZXMpLGkuY2h1bmtzLnB1c2goe3R5cGU6bi5LYW5qaSxieXRlczpmLmJ5dGVzLHRleHQ6Zi50ZXh0fSl9fXZhciB3LFAsdixofU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTt2YXIgbixsPXIoNyksaT1yKDgpOyFmdW5jdGlvbihvKXtvLk51bWVyaWM9XFxcIm51bWVyaWNcXFwiLG8uQWxwaGFudW1lcmljPVxcXCJhbHBoYW51bWVyaWNcXFwiLG8uQnl0ZT1cXFwiYnl0ZVxcXCIsby5LYW5qaT1cXFwia2FuamlcXFwiLG8uRUNJPVxcXCJlY2lcXFwifShuPWUuTW9kZXx8KGUuTW9kZT17fSkpO3ZhciBCOyFmdW5jdGlvbihvKXtvW28uVGVybWluYXRvcj0wXT1cXFwiVGVybWluYXRvclxcXCIsb1tvLk51bWVyaWM9MV09XFxcIk51bWVyaWNcXFwiLG9bby5BbHBoYW51bWVyaWM9Ml09XFxcIkFscGhhbnVtZXJpY1xcXCIsb1tvLkJ5dGU9NF09XFxcIkJ5dGVcXFwiLG9bby5LYW5qaT04XT1cXFwiS2FuamlcXFwiLG9bby5FQ0k9N109XFxcIkVDSVxcXCJ9KEJ8fChCPXt9KSk7dmFyIGs9W1xcXCIwXFxcIixcXFwiMVxcXCIsXFxcIjJcXFwiLFxcXCIzXFxcIixcXFwiNFxcXCIsXFxcIjVcXFwiLFxcXCI2XFxcIixcXFwiN1xcXCIsXFxcIjhcXFwiLFxcXCI5XFxcIixcXFwiQVxcXCIsXFxcIkJcXFwiLFxcXCJDXFxcIixcXFwiRFxcXCIsXFxcIkVcXFwiLFxcXCJGXFxcIixcXFwiR1xcXCIsXFxcIkhcXFwiLFxcXCJJXFxcIixcXFwiSlxcXCIsXFxcIktcXFwiLFxcXCJMXFxcIixcXFwiTVxcXCIsXFxcIk5cXFwiLFxcXCJPXFxcIixcXFwiUFxcXCIsXFxcIlFcXFwiLFxcXCJSXFxcIixcXFwiU1xcXCIsXFxcIlRcXFwiLFxcXCJVXFxcIixcXFwiVlxcXCIsXFxcIldcXFwiLFxcXCJYXFxcIixcXFwiWVxcXCIsXFxcIlpcXFwiLFxcXCIgXFxcIixcXFwiJFxcXCIsXFxcIiVcXFwiLFxcXCIqXFxcIixcXFwiK1xcXCIsXFxcIi1cXFwiLFxcXCIuXFxcIixcXFwiL1xcXCIsXFxcIjpcXFwiXTtlLmRlY29kZT1kfSxmdW5jdGlvbihvLGUscil7XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTt2YXIgdD1mdW5jdGlvbigpe2Z1bmN0aW9uIG8obyl7dGhpcy5ieXRlT2Zmc2V0PTAsdGhpcy5iaXRPZmZzZXQ9MCx0aGlzLmJ5dGVzPW99cmV0dXJuIG8ucHJvdG90eXBlLnJlYWRCaXRzPWZ1bmN0aW9uKG8pe2lmKG88MXx8bz4zMnx8bz50aGlzLmF2YWlsYWJsZSgpKXRocm93IG5ldyBFcnJvcihcXFwiQ2Fubm90IHJlYWQgXFxcIitvLnRvU3RyaW5nKCkrXFxcIiBiaXRzXFxcIik7dmFyIGU9MDtpZih0aGlzLmJpdE9mZnNldD4wKXt2YXIgcj04LXRoaXMuYml0T2Zmc2V0LHQ9bzxyP286cixjPXItdCxzPTI1NT4+OC10PDxjO2U9KHRoaXMuYnl0ZXNbdGhpcy5ieXRlT2Zmc2V0XSZzKT4+YyxvLT10LHRoaXMuYml0T2Zmc2V0Kz10LDg9PT10aGlzLmJpdE9mZnNldCYmKHRoaXMuYml0T2Zmc2V0PTAsdGhpcy5ieXRlT2Zmc2V0KyspfWlmKG8+MCl7Zm9yKDtvPj04OyllPWU8PDh8MjU1JnRoaXMuYnl0ZXNbdGhpcy5ieXRlT2Zmc2V0XSx0aGlzLmJ5dGVPZmZzZXQrKyxvLT04O2lmKG8+MCl7dmFyIGM9OC1vLHM9MjU1Pj5jPDxjO2U9ZTw8b3wodGhpcy5ieXRlc1t0aGlzLmJ5dGVPZmZzZXRdJnMpPj5jLHRoaXMuYml0T2Zmc2V0Kz1vfX1yZXR1cm4gZX0sby5wcm90b3R5cGUuYXZhaWxhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIDgqKHRoaXMuYnl0ZXMubGVuZ3RoLXRoaXMuYnl0ZU9mZnNldCktdGhpcy5iaXRPZmZzZXR9LG99KCk7ZS5CaXRTdHJlYW09dH0sZnVuY3Rpb24obyxlLHIpe1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksZS5zaGlmdEpJU1RhYmxlPXszMjozMiwzMzozMywzNDozNCwzNTozNSwzNjozNiwzNzozNywzODozOCwzOTozOSw0MDo0MCw0MTo0MSw0Mjo0Miw0Mzo0Myw0NDo0NCw0NTo0NSw0Njo0Niw0Nzo0Nyw0ODo0OCw0OTo0OSw1MDo1MCw1MTo1MSw1Mjo1Miw1Mzo1Myw1NDo1NCw1NTo1NSw1Njo1Niw1Nzo1Nyw1ODo1OCw1OTo1OSw2MDo2MCw2MTo2MSw2Mjo2Miw2Mzo2Myw2NDo2NCw2NTo2NSw2Njo2Niw2Nzo2Nyw2ODo2OCw2OTo2OSw3MDo3MCw3MTo3MSw3Mjo3Miw3Mzo3Myw3NDo3NCw3NTo3NSw3Njo3Niw3Nzo3Nyw3ODo3OCw3OTo3OSw4MDo4MCw4MTo4MSw4Mjo4Miw4Mzo4Myw4NDo4NCw4NTo4NSw4Njo4Niw4Nzo4Nyw4ODo4OCw4OTo4OSw5MDo5MCw5MTo5MSw5MjoxNjUsOTM6OTMsOTQ6OTQsOTU6OTUsOTY6OTYsOTc6OTcsOTg6OTgsOTk6OTksMTAwOjEwMCwxMDE6MTAxLDEwMjoxMDIsMTAzOjEwMywxMDQ6MTA0LDEwNToxMDUsMTA2OjEwNiwxMDc6MTA3LDEwODoxMDgsMTA5OjEwOSwxMTA6MTEwLDExMToxMTEsMTEyOjExMiwxMTM6MTEzLDExNDoxMTQsMTE1OjExNSwxMTY6MTE2LDExNzoxMTcsMTE4OjExOCwxMTk6MTE5LDEyMDoxMjAsMTIxOjEyMSwxMjI6MTIyLDEyMzoxMjMsMTI0OjEyNCwxMjU6MTI1LDEyNjo4MjU0LDMzMDg4OjEyMjg4LDMzMDg5OjEyMjg5LDMzMDkwOjEyMjkwLDMzMDkxOjY1MjkyLDMzMDkyOjY1Mjk0LDMzMDkzOjEyNTM5LDMzMDk0OjY1MzA2LDMzMDk1OjY1MzA3LDMzMDk2OjY1MzExLDMzMDk3OjY1MjgxLDMzMDk4OjEyNDQzLDMzMDk5OjEyNDQ0LDMzMTAwOjE4MCwzMzEwMTo2NTM0NCwzMzEwMjoxNjgsMzMxMDM6NjUzNDIsMzMxMDQ6NjU1MDcsMzMxMDU6NjUzNDMsMzMxMDY6MTI1NDEsMzMxMDc6MTI1NDIsMzMxMDg6MTI0NDUsMzMxMDk6MTI0NDYsMzMxMTA6MTIyOTEsMzMxMTE6MjAxODksMzMxMTI6MTIyOTMsMzMxMTM6MTIyOTQsMzMxMTQ6MTIyOTUsMzMxMTU6MTI1NDAsMzMxMTY6ODIxMywzMzExNzo4MjA4LDMzMTE4OjY1Mjk1LDMzMTE5OjkyLDMzMTIwOjEyMzE2LDMzMTIxOjgyMTQsMzMxMjI6NjUzNzIsMzMxMjM6ODIzMCwzMzEyNDo4MjI5LDMzMTI1OjgyMTYsMzMxMjY6ODIxNywzMzEyNzo4MjIwLDMzMTI4OjgyMjEsMzMxMjk6NjUyODgsMzMxMzA6NjUyODksMzMxMzE6MTIzMDgsMzMxMzI6MTIzMDksMzMxMzM6NjUzMzksMzMxMzQ6NjUzNDEsMzMxMzU6NjUzNzEsMzMxMzY6NjUzNzMsMzMxMzc6MTIyOTYsMzMxMzg6MTIyOTcsMzMxMzk6MTIyOTgsMzMxNDA6MTIyOTksMzMxNDE6MTIzMDAsMzMxNDI6MTIzMDEsMzMxNDM6MTIzMDIsMzMxNDQ6MTIzMDMsMzMxNDU6MTIzMDQsMzMxNDY6MTIzMDUsMzMxNDc6NjUyOTEsMzMxNDg6ODcyMiwzMzE0OToxNzcsMzMxNTA6MjE1LDMzMTUyOjI0NywzMzE1Mzo2NTMwOSwzMzE1NDo4ODAwLDMzMTU1OjY1MzA4LDMzMTU2OjY1MzEwLDMzMTU3Ojg4MDYsMzMxNTg6ODgwNywzMzE1OTo4NzM0LDMzMTYwOjg3NTYsMzMxNjE6OTc5NCwzMzE2Mjo5NzkyLDMzMTYzOjE3NiwzMzE2NDo4MjQyLDMzMTY1OjgyNDMsMzMxNjY6ODQ1MSwzMzE2Nzo2NTUwOSwzMzE2ODo2NTI4NCwzMzE2OToxNjIsMzMxNzA6MTYzLDMzMTcxOjY1Mjg1LDMzMTcyOjY1MjgzLDMzMTczOjY1Mjg2LDMzMTc0OjY1MjkwLDMzMTc1OjY1MzEyLDMzMTc2OjE2NywzMzE3Nzo5NzM0LDMzMTc4Ojk3MzMsMzMxNzk6OTY3NSwzMzE4MDo5Njc5LDMzMTgxOjk2NzgsMzMxODI6OTY3MSwzMzE4Mzo5NjcwLDMzMTg0Ojk2MzMsMzMxODU6OTYzMiwzMzE4Njo5NjUxLDMzMTg3Ojk2NTAsMzMxODg6OTY2MSwzMzE4OTo5NjYwLDMzMTkwOjgyNTEsMzMxOTE6MTIzMDYsMzMxOTI6ODU5NCwzMzE5Mzo4NTkyLDMzMTk0Ojg1OTMsMzMxOTU6ODU5NSwzMzE5NjoxMjMwNywzMzIwODo4NzEyLDMzMjA5Ojg3MTUsMzMyMTA6ODgzOCwzMzIxMTo4ODM5LDMzMjEyOjg4MzQsMzMyMTM6ODgzNSwzMzIxNDo4NzQ2LDMzMjE1Ojg3NDUsMzMyMjQ6ODc0MywzMzIyNTo4NzQ0LDMzMjI2OjE3MiwzMzIyNzo4NjU4LDMzMjI4Ojg2NjAsMzMyMjk6ODcwNCwzMzIzMDo4NzA3LDMzMjQyOjg3MzYsMzMyNDM6ODg2OSwzMzI0NDo4OTc4LDMzMjQ1Ojg3MDYsMzMyNDY6ODcxMSwzMzI0Nzo4ODAxLDMzMjQ4Ojg3ODYsMzMyNDk6ODgxMCwzMzI1MDo4ODExLDMzMjUxOjg3MzAsMzMyNTI6ODc2NSwzMzI1Mzo4NzMzLDMzMjU0Ojg3NTcsMzMyNTU6ODc0NywzMzI1Njo4NzQ4LDMzMjY0Ojg0OTEsMzMyNjU6ODI0MCwzMzI2Njo5ODM5LDMzMjY3Ojk4MzcsMzMyNjg6OTgzNCwzMzI2OTo4MjI0LDMzMjcwOjgyMjUsMzMyNzE6MTgyLDMzMjc2Ojk3MTEsMzMzNTk6NjUyOTYsMzMzNjA6NjUyOTcsMzMzNjE6NjUyOTgsMzMzNjI6NjUyOTksMzMzNjM6NjUzMDAsMzMzNjQ6NjUzMDEsMzMzNjU6NjUzMDIsMzMzNjY6NjUzMDMsMzMzNjc6NjUzMDQsMzMzNjg6NjUzMDUsMzMzNzY6NjUzMTMsMzMzNzc6NjUzMTQsMzMzNzg6NjUzMTUsMzMzNzk6NjUzMTYsMzMzODA6NjUzMTcsMzMzODE6NjUzMTgsMzMzODI6NjUzMTksMzMzODM6NjUzMjAsMzMzODQ6NjUzMjEsMzMzODU6NjUzMjIsMzMzODY6NjUzMjMsMzMzODc6NjUzMjQsMzMzODg6NjUzMjUsMzMzODk6NjUzMjYsMzMzOTA6NjUzMjcsMzMzOTE6NjUzMjgsMzMzOTI6NjUzMjksMzMzOTM6NjUzMzAsMzMzOTQ6NjUzMzEsMzMzOTU6NjUzMzIsMzMzOTY6NjUzMzMsMzMzOTc6NjUzMzQsMzMzOTg6NjUzMzUsMzMzOTk6NjUzMzYsMzM0MDA6NjUzMzcsMzM0MDE6NjUzMzgsMzM0MDk6NjUzNDUsMzM0MTA6NjUzNDYsMzM0MTE6NjUzNDcsMzM0MTI6NjUzNDgsMzM0MTM6NjUzNDksMzM0MTQ6NjUzNTAsMzM0MTU6NjUzNTEsMzM0MTY6NjUzNTIsMzM0MTc6NjUzNTMsMzM0MTg6NjUzNTQsMzM0MTk6NjUzNTUsMzM0MjA6NjUzNTYsMzM0MjE6NjUzNTcsMzM0MjI6NjUzNTgsMzM0MjM6NjUzNTksMzM0MjQ6NjUzNjAsMzM0MjU6NjUzNjEsMzM0MjY6NjUzNjIsMzM0Mjc6NjUzNjMsMzM0Mjg6NjUzNjQsMzM0Mjk6NjUzNjUsMzM0MzA6NjUzNjYsMzM0MzE6NjUzNjcsMzM0MzI6NjUzNjgsMzM0MzM6NjUzNjksMzM0MzQ6NjUzNzAsMzM0Mzk6MTIzNTMsMzM0NDA6MTIzNTQsMzM0NDE6MTIzNTUsMzM0NDI6MTIzNTYsMzM0NDM6MTIzNTcsMzM0NDQ6MTIzNTgsMzM0NDU6MTIzNTksMzM0NDY6MTIzNjAsMzM0NDc6MTIzNjEsMzM0NDg6MTIzNjIsMzM0NDk6MTIzNjMsMzM0NTA6MTIzNjQsMzM0NTE6MTIzNjUsMzM0NTI6MTIzNjYsMzM0NTM6MTIzNjcsMzM0NTQ6MTIzNjgsMzM0NTU6MTIzNjksMzM0NTY6MTIzNzAsMzM0NTc6MTIzNzEsMzM0NTg6MTIzNzIsMzM0NTk6MTIzNzMsMzM0NjA6MTIzNzQsMzM0NjE6MTIzNzUsMzM0NjI6MTIzNzYsMzM0NjM6MTIzNzcsMzM0NjQ6MTIzNzgsMzM0NjU6MTIzNzksMzM0NjY6MTIzODAsMzM0Njc6MTIzODEsMzM0Njg6MTIzODIsMzM0Njk6MTIzODMsMzM0NzA6MTIzODQsMzM0NzE6MTIzODUsMzM0NzI6MTIzODYsMzM0NzM6MTIzODcsMzM0NzQ6MTIzODgsMzM0NzU6MTIzODksMzM0NzY6MTIzOTAsMzM0Nzc6MTIzOTEsMzM0Nzg6MTIzOTIsMzM0Nzk6MTIzOTMsMzM0ODA6MTIzOTQsMzM0ODE6MTIzOTUsMzM0ODI6MTIzOTYsMzM0ODM6MTIzOTcsMzM0ODQ6MTIzOTgsMzM0ODU6MTIzOTksMzM0ODY6MTI0MDAsMzM0ODc6MTI0MDEsMzM0ODg6MTI0MDIsMzM0ODk6MTI0MDMsMzM0OTA6MTI0MDQsMzM0OTE6MTI0MDUsMzM0OTI6MTI0MDYsMzM0OTM6MTI0MDcsMzM0OTQ6MTI0MDgsMzM0OTU6MTI0MDksMzM0OTY6MTI0MTAsMzM0OTc6MTI0MTEsMzM0OTg6MTI0MTIsMzM0OTk6MTI0MTMsMzM1MDA6MTI0MTQsMzM1MDE6MTI0MTUsMzM1MDI6MTI0MTYsMzM1MDM6MTI0MTcsMzM1MDQ6MTI0MTgsMzM1MDU6MTI0MTksMzM1MDY6MTI0MjAsMzM1MDc6MTI0MjEsMzM1MDg6MTI0MjIsMzM1MDk6MTI0MjMsMzM1MTA6MTI0MjQsMzM1MTE6MTI0MjUsMzM1MTI6MTI0MjYsMzM1MTM6MTI0MjcsMzM1MTQ6MTI0MjgsMzM1MTU6MTI0MjksMzM1MTY6MTI0MzAsMzM1MTc6MTI0MzEsMzM1MTg6MTI0MzIsMzM1MTk6MTI0MzMsMzM1MjA6MTI0MzQsMzM1MjE6MTI0MzUsMzM2MDA6MTI0NDksMzM2MDE6MTI0NTAsMzM2MDI6MTI0NTEsMzM2MDM6MTI0NTIsMzM2MDQ6MTI0NTMsMzM2MDU6MTI0NTQsMzM2MDY6MTI0NTUsMzM2MDc6MTI0NTYsMzM2MDg6MTI0NTcsMzM2MDk6MTI0NTgsMzM2MTA6MTI0NTksMzM2MTE6MTI0NjAsMzM2MTI6MTI0NjEsMzM2MTM6MTI0NjIsMzM2MTQ6MTI0NjMsMzM2MTU6MTI0NjQsMzM2MTY6MTI0NjUsMzM2MTc6MTI0NjYsMzM2MTg6MTI0NjcsMzM2MTk6MTI0NjgsMzM2MjA6MTI0NjksMzM2MjE6MTI0NzAsMzM2MjI6MTI0NzEsMzM2MjM6MTI0NzIsMzM2MjQ6MTI0NzMsMzM2MjU6MTI0NzQsMzM2MjY6MTI0NzUsMzM2Mjc6MTI0NzYsMzM2Mjg6MTI0NzcsMzM2Mjk6MTI0NzgsMzM2MzA6MTI0NzksMzM2MzE6MTI0ODAsMzM2MzI6MTI0ODEsMzM2MzM6MTI0ODIsMzM2MzQ6MTI0ODMsMzM2MzU6MTI0ODQsMzM2MzY6MTI0ODUsMzM2Mzc6MTI0ODYsMzM2Mzg6MTI0ODcsMzM2Mzk6MTI0ODgsMzM2NDA6MTI0ODksMzM2NDE6MTI0OTAsMzM2NDI6MTI0OTEsMzM2NDM6MTI0OTIsMzM2NDQ6MTI0OTMsMzM2NDU6MTI0OTQsMzM2NDY6MTI0OTUsMzM2NDc6MTI0OTYsMzM2NDg6MTI0OTcsMzM2NDk6MTI0OTgsMzM2NTA6MTI0OTksMzM2NTE6MTI1MDAsMzM2NTI6MTI1MDEsMzM2NTM6MTI1MDIsMzM2NTQ6MTI1MDMsMzM2NTU6MTI1MDQsMzM2NTY6MTI1MDUsMzM2NTc6MTI1MDYsMzM2NTg6MTI1MDcsMzM2NTk6MTI1MDgsMzM2NjA6MTI1MDksMzM2NjE6MTI1MTAsMzM2NjI6MTI1MTEsMzM2NjQ6MTI1MTIsMzM2NjU6MTI1MTMsMzM2NjY6MTI1MTQsMzM2Njc6MTI1MTUsMzM2Njg6MTI1MTYsMzM2Njk6MTI1MTcsMzM2NzA6MTI1MTgsMzM2NzE6MTI1MTksMzM2NzI6MTI1MjAsMzM2NzM6MTI1MjEsMzM2NzQ6MTI1MjIsMzM2NzU6MTI1MjMsMzM2NzY6MTI1MjQsMzM2Nzc6MTI1MjUsMzM2Nzg6MTI1MjYsMzM2Nzk6MTI1MjcsMzM2ODA6MTI1MjgsMzM2ODE6MTI1MjksMzM2ODI6MTI1MzAsMzM2ODM6MTI1MzEsMzM2ODQ6MTI1MzIsMzM2ODU6MTI1MzMsMzM2ODY6MTI1MzQsMzM2OTU6OTEzLDMzNjk2OjkxNCwzMzY5Nzo5MTUsMzM2OTg6OTE2LDMzNjk5OjkxNywzMzcwMDo5MTgsMzM3MDE6OTE5LDMzNzAyOjkyMCwzMzcwMzo5MjEsMzM3MDQ6OTIyLDMzNzA1OjkyMywzMzcwNjo5MjQsMzM3MDc6OTI1LDMzNzA4OjkyNiwzMzcwOTo5MjcsMzM3MTA6OTI4LDMzNzExOjkyOSwzMzcxMjo5MzEsMzM3MTM6OTMyLDMzNzE0OjkzMywzMzcxNTo5MzQsMzM3MTY6OTM1LDMzNzE3OjkzNiwzMzcxODo5MzcsMzM3Mjc6OTQ1LDMzNzI4Ojk0NiwzMzcyOTo5NDcsMzM3MzA6OTQ4LDMzNzMxOjk0OSwzMzczMjo5NTAsMzM3MzM6OTUxLDMzNzM0Ojk1MiwzMzczNTo5NTMsMzM3MzY6OTU0LDMzNzM3Ojk1NSwzMzczODo5NTYsMzM3Mzk6OTU3LDMzNzQwOjk1OCwzMzc0MTo5NTksMzM3NDI6OTYwLDMzNzQzOjk2MSwzMzc0NDo5NjMsMzM3NDU6OTY0LDMzNzQ2Ojk2NSwzMzc0Nzo5NjYsMzM3NDg6OTY3LDMzNzQ5Ojk2OCwzMzc1MDo5NjksMzM4NTY6MTA0MCwzMzg1NzoxMDQxLDMzODU4OjEwNDIsMzM4NTk6MTA0MywzMzg2MDoxMDQ0LDMzODYxOjEwNDUsMzM4NjI6MTAyNSwzMzg2MzoxMDQ2LDMzODY0OjEwNDcsMzM4NjU6MTA0OCwzMzg2NjoxMDQ5LDMzODY3OjEwNTAsMzM4Njg6MTA1MSwzMzg2OToxMDUyLDMzODcwOjEwNTMsMzM4NzE6MTA1NCwzMzg3MjoxMDU1LDMzODczOjEwNTYsMzM4NzQ6MTA1NywzMzg3NToxMDU4LDMzODc2OjEwNTksMzM4Nzc6MTA2MCwzMzg3ODoxMDYxLDMzODc5OjEwNjIsMzM4ODA6MTA2MywzMzg4MToxMDY0LDMzODgyOjEwNjUsMzM4ODM6MTA2NiwzMzg4NDoxMDY3LDMzODg1OjEwNjgsMzM4ODY6MTA2OSwzMzg4NzoxMDcwLDMzODg4OjEwNzEsMzM5MDQ6MTA3MiwzMzkwNToxMDczLDMzOTA2OjEwNzQsMzM5MDc6MTA3NSwzMzkwODoxMDc2LDMzOTA5OjEwNzcsMzM5MTA6MTEwNSwzMzkxMToxMDc4LDMzOTEyOjEwNzksMzM5MTM6MTA4MCwzMzkxNDoxMDgxLDMzOTE1OjEwODIsMzM5MTY6MTA4MywzMzkxNzoxMDg0LDMzOTE4OjEwODUsMzM5MjA6MTA4NiwzMzkyMToxMDg3LDMzOTIyOjEwODgsMzM5MjM6MTA4OSwzMzkyNDoxMDkwLDMzOTI1OjEwOTEsMzM5MjY6MTA5MiwzMzkyNzoxMDkzLDMzOTI4OjEwOTQsMzM5Mjk6MTA5NSwzMzkzMDoxMDk2LDMzOTMxOjEwOTcsMzM5MzI6MTA5OCwzMzkzMzoxMDk5LDMzOTM0OjExMDAsMzM5MzU6MTEwMSwzMzkzNjoxMTAyLDMzOTM3OjExMDMsMzM5NTE6OTQ3MiwzMzk1Mjo5NDc0LDMzOTUzOjk0ODQsMzM5NTQ6OTQ4OCwzMzk1NTo5NDk2LDMzOTU2Ojk0OTIsMzM5NTc6OTUwMCwzMzk1ODo5NTE2LDMzOTU5Ojk1MDgsMzM5NjA6OTUyNCwzMzk2MTo5NTMyLDMzOTYyOjk0NzMsMzM5NjM6OTQ3NSwzMzk2NDo5NDg3LDMzOTY1Ojk0OTEsMzM5NjY6OTQ5OSwzMzk2Nzo5NDk1LDMzOTY4Ojk1MDcsMzM5Njk6OTUyMywzMzk3MDo5NTE1LDMzOTcxOjk1MzEsMzM5NzI6OTU0NywzMzk3Mzo5NTA0LDMzOTc0Ojk1MTksMzM5NzU6OTUxMiwzMzk3Njo5NTI3LDMzOTc3Ojk1MzUsMzM5Nzg6OTUwMSwzMzk3OTo5NTIwLDMzOTgwOjk1MDksMzM5ODE6OTUyOCwzMzk4Mjo5NTM4LDM0OTc1OjIwMTI0LDM0OTc2OjIxNzgyLDM0OTc3OjIzMDQzLDM0OTc4OjM4NDYzLDM0OTc5OjIxNjk2LDM0OTgwOjI0ODU5LDM0OTgxOjI1Mzg0LDM0OTgyOjIzMDMwLDM0OTgzOjM2ODk4LDM0OTg0OjMzOTA5LDM0OTg1OjMzNTY0LDM0OTg2OjMxMzEyLDM0OTg3OjI0NzQ2LDM0OTg4OjI1NTY5LDM0OTg5OjI4MTk3LDM0OTkwOjI2MDkzLDM0OTkxOjMzODk0LDM0OTkyOjMzNDQ2LDM0OTkzOjM5OTI1LDM0OTk0OjI2NzcxLDM0OTk1OjIyMzExLDM0OTk2OjI2MDE3LDM0OTk3OjI1MjAxLDM0OTk4OjIzNDUxLDM0OTk5OjIyOTkyLDM1ZTM6MzQ0MjcsMzUwMDE6MzkxNTYsMzUwMDI6MzIwOTgsMzUwMDM6MzIxOTAsMzUwMDQ6Mzk4MjIsMzUwMDU6MjUxMTAsMzUwMDY6MzE5MDMsMzUwMDc6MzQ5OTksMzUwMDg6MjM0MzMsMzUwMDk6MjQyNDUsMzUwMTA6MjUzNTMsMzUwMTE6MjYyNjMsMzUwMTI6MjY2OTYsMzUwMTM6MzgzNDMsMzUwMTQ6Mzg3OTcsMzUwMTU6MjY0NDcsMzUwMTY6MjAxOTcsMzUwMTc6MjAyMzQsMzUwMTg6MjAzMDEsMzUwMTk6MjAzODEsMzUwMjA6MjA1NTMsMzUwMjE6MjIyNTgsMzUwMjI6MjI4MzksMzUwMjM6MjI5OTYsMzUwMjQ6MjMwNDEsMzUwMjU6MjM1NjEsMzUwMjY6MjQ3OTksMzUwMjc6MjQ4NDcsMzUwMjg6MjQ5NDQsMzUwMjk6MjYxMzEsMzUwMzA6MjY4ODUsMzUwMzE6Mjg4NTgsMzUwMzI6MzAwMzEsMzUwMzM6MzAwNjQsMzUwMzQ6MzEyMjcsMzUwMzU6MzIxNzMsMzUwMzY6MzIyMzksMzUwMzc6MzI5NjMsMzUwMzg6MzM4MDYsMzUwMzk6MzQ5MTUsMzUwNDA6MzU1ODYsMzUwNDE6MzY5NDksMzUwNDI6MzY5ODYsMzUwNDM6MjEzMDcsMzUwNDQ6MjAxMTcsMzUwNDU6MjAxMzMsMzUwNDY6MjI0OTUsMzUwNDc6MzI5NDYsMzUwNDg6MzcwNTcsMzUwNDk6MzA5NTksMzUwNTA6MTk5NjgsMzUwNTE6MjI3NjksMzUwNTI6MjgzMjIsMzUwNTM6MzY5MjAsMzUwNTQ6MzEyODIsMzUwNTU6MzM1NzYsMzUwNTY6MzM0MTksMzUwNTc6Mzk5ODMsMzUwNTg6MjA4MDEsMzUwNTk6MjEzNjAsMzUwNjA6MjE2OTMsMzUwNjE6MjE3MjksMzUwNjI6MjIyNDAsMzUwNjM6MjMwMzUsMzUwNjQ6MjQzNDEsMzUwNjU6MzkxNTQsMzUwNjY6MjgxMzksMzUwNjc6MzI5OTYsMzUwNjg6MzQwOTMsMzUxMzY6Mzg0OTgsMzUxMzc6Mzg1MTIsMzUxMzg6Mzg1NjAsMzUxMzk6Mzg5MDcsMzUxNDA6MjE1MTUsMzUxNDE6MjE0OTEsMzUxNDI6MjM0MzEsMzUxNDM6Mjg4NzksMzUxNDQ6MzI3MDEsMzUxNDU6MzY4MDIsMzUxNDY6Mzg2MzIsMzUxNDc6MjEzNTksMzUxNDg6NDAyODQsMzUxNDk6MzE0MTgsMzUxNTA6MTk5ODUsMzUxNTE6MzA4NjcsMzUxNTI6MzMyNzYsMzUxNTM6MjgxOTgsMzUxNTQ6MjIwNDAsMzUxNTU6MjE3NjQsMzUxNTY6Mjc0MjEsMzUxNTc6MzQwNzQsMzUxNTg6Mzk5OTUsMzUxNTk6MjMwMTMsMzUxNjA6MjE0MTcsMzUxNjE6MjgwMDYsMzUxNjI6Mjk5MTYsMzUxNjM6MzgyODcsMzUxNjQ6MjIwODIsMzUxNjU6MjAxMTMsMzUxNjY6MzY5MzksMzUxNjc6Mzg2NDIsMzUxNjg6MzM2MTUsMzUxNjk6MzkxODAsMzUxNzA6MjE0NzMsMzUxNzE6MjE5NDIsMzUxNzI6MjMzNDQsMzUxNzM6MjQ0MzMsMzUxNzQ6MjYxNDQsMzUxNzU6MjYzNTUsMzUxNzY6MjY2MjgsMzUxNzc6Mjc3MDQsMzUxNzg6Mjc4OTEsMzUxNzk6Mjc5NDUsMzUxODA6Mjk3ODcsMzUxODE6MzA0MDgsMzUxODI6MzEzMTAsMzUxODM6Mzg5NjQsMzUxODQ6MzM1MjEsMzUxODU6MzQ5MDcsMzUxODY6MzU0MjQsMzUxODc6Mzc2MTMsMzUxODg6MjgwODIsMzUxODk6MzAxMjMsMzUxOTA6MzA0MTAsMzUxOTE6MzkzNjUsMzUxOTI6MjQ3NDIsMzUxOTM6MzU1ODUsMzUxOTQ6MzYyMzQsMzUxOTU6MzgzMjIsMzUxOTY6MjcwMjIsMzUxOTc6MjE0MjEsMzUxOTg6MjA4NzAsMzUyMDA6MjIyOTAsMzUyMDE6MjI1NzYsMzUyMDI6MjI4NTIsMzUyMDM6MjM0NzYsMzUyMDQ6MjQzMTAsMzUyMDU6MjQ2MTYsMzUyMDY6MjU1MTMsMzUyMDc6MjU1ODgsMzUyMDg6Mjc4MzksMzUyMDk6Mjg0MzYsMzUyMTA6Mjg4MTQsMzUyMTE6Mjg5NDgsMzUyMTI6MjkwMTcsMzUyMTM6MjkxNDEsMzUyMTQ6Mjk1MDMsMzUyMTU6MzIyNTcsMzUyMTY6MzMzOTgsMzUyMTc6MzM0ODksMzUyMTg6MzQxOTksMzUyMTk6MzY5NjAsMzUyMjA6Mzc0NjcsMzUyMjE6NDAyMTksMzUyMjI6MjI2MzMsMzUyMjM6MjYwNDQsMzUyMjQ6Mjc3MzgsMzUyMjU6Mjk5ODksMzUyMjY6MjA5ODUsMzUyMjc6MjI4MzAsMzUyMjg6MjI4ODUsMzUyMjk6MjQ0NDgsMzUyMzA6MjQ1NDAsMzUyMzE6MjUyNzYsMzUyMzI6MjYxMDYsMzUyMzM6MjcxNzgsMzUyMzQ6Mjc0MzEsMzUyMzU6Mjc1NzIsMzUyMzY6Mjk1NzksMzUyMzc6MzI3MDUsMzUyMzg6MzUxNTgsMzUyMzk6NDAyMzYsMzUyNDA6NDAyMDYsMzUyNDE6NDA2NDQsMzUyNDI6MjM3MTMsMzUyNDM6Mjc3OTgsMzUyNDQ6MzM2NTksMzUyNDU6MjA3NDAsMzUyNDY6MjM2MjcsMzUyNDc6MjUwMTQsMzUyNDg6MzMyMjIsMzUyNDk6MjY3NDIsMzUyNTA6MjkyODEsMzUyNTE6MjAwNTcsMzUyNTI6MjA0NzQsMzUyNTM6MjEzNjgsMzUyNTQ6MjQ2ODEsMzUyNTU6MjgyMDEsMzUyNTY6MzEzMTEsMzUyNTc6Mzg4OTksMzUyNTg6MTk5NzksMzUyNTk6MjEyNzAsMzUyNjA6MjAyMDYsMzUyNjE6MjAzMDksMzUyNjI6MjAyODUsMzUyNjM6MjAzODUsMzUyNjQ6MjAzMzksMzUyNjU6MjExNTIsMzUyNjY6MjE0ODcsMzUyNjc6MjIwMjUsMzUyNjg6MjI3OTksMzUyNjk6MjMyMzMsMzUyNzA6MjM0NzgsMzUyNzE6MjM1MjEsMzUyNzI6MzExODUsMzUyNzM6MjYyNDcsMzUyNzQ6MjY1MjQsMzUyNzU6MjY1NTAsMzUyNzY6Mjc0NjgsMzUyNzc6Mjc4MjcsMzUyNzg6Mjg3NzksMzUyNzk6Mjk2MzQsMzUyODA6MzExMTcsMzUyODE6MzExNjYsMzUyODI6MzEyOTIsMzUyODM6MzE2MjMsMzUyODQ6MzM0NTcsMzUyODU6MzM0OTksMzUyODY6MzM1NDAsMzUyODc6MzM2NTUsMzUyODg6MzM3NzUsMzUyODk6MzM3NDcsMzUyOTA6MzQ2NjIsMzUyOTE6MzU1MDYsMzUyOTI6MjIwNTcsMzUyOTM6MzYwMDgsMzUyOTQ6MzY4MzgsMzUyOTU6MzY5NDIsMzUyOTY6Mzg2ODYsMzUyOTc6MzQ0NDIsMzUyOTg6MjA0MjAsMzUyOTk6MjM3ODQsMzUzMDA6MjUxMDUsMzUzMDE6MjkyNzMsMzUzMDI6MzAwMTEsMzUzMDM6MzMyNTMsMzUzMDQ6MzM0NjksMzUzMDU6MzQ1NTgsMzUzMDY6MzYwMzIsMzUzMDc6Mzg1OTcsMzUzMDg6MzkxODcsMzUzMDk6MzkzODEsMzUzMTA6MjAxNzEsMzUzMTE6MjAyNTAsMzUzMTI6MzUyOTksMzUzMTM6MjIyMzgsMzUzMTQ6MjI2MDIsMzUzMTU6MjI3MzAsMzUzMTY6MjQzMTUsMzUzMTc6MjQ1NTUsMzUzMTg6MjQ2MTgsMzUzMTk6MjQ3MjQsMzUzMjA6MjQ2NzQsMzUzMjE6MjUwNDAsMzUzMjI6MjUxMDYsMzUzMjM6MjUyOTYsMzUzMjQ6MjU5MTMsMzUzOTI6Mzk3NDUsMzUzOTM6MjYyMTQsMzUzOTQ6MjY4MDAsMzUzOTU6MjgwMjMsMzUzOTY6Mjg3ODQsMzUzOTc6MzAwMjgsMzUzOTg6MzAzNDIsMzUzOTk6MzIxMTcsMzU0MDA6MzM0NDUsMzU0MDE6MzQ4MDksMzU0MDI6MzgyODMsMzU0MDM6Mzg1NDIsMzU0MDQ6MzU5OTcsMzU0MDU6MjA5NzcsMzU0MDY6MjExODIsMzU0MDc6MjI4MDYsMzU0MDg6MjE2ODMsMzU0MDk6MjM0NzUsMzU0MTA6MjM4MzAsMzU0MTE6MjQ5MzYsMzU0MTI6MjcwMTAsMzU0MTM6MjgwNzksMzU0MTQ6MzA4NjEsMzU0MTU6MzM5OTUsMzU0MTY6MzQ5MDMsMzU0MTc6MzU0NDIsMzU0MTg6Mzc3OTksMzU0MTk6Mzk2MDgsMzU0MjA6MjgwMTIsMzU0MjE6MzkzMzYsMzU0MjI6MzQ1MjEsMzU0MjM6MjI0MzUsMzU0MjQ6MjY2MjMsMzU0MjU6MzQ1MTAsMzU0MjY6MzczOTAsMzU0Mjc6MjExMjMsMzU0Mjg6MjIxNTEsMzU0Mjk6MjE1MDgsMzU0MzA6MjQyNzUsMzU0MzE6MjUzMTMsMzU0MzI6MjU3ODUsMzU0MzM6MjY2ODQsMzU0MzQ6MjY2ODAsMzU0MzU6Mjc1NzksMzU0MzY6Mjk1NTQsMzU0Mzc6MzA5MDYsMzU0Mzg6MzEzMzksMzU0Mzk6MzUyMjYsMzU0NDA6MzUyODIsMzU0NDE6MzYyMDMsMzU0NDI6MzY2MTEsMzU0NDM6MzcxMDEsMzU0NDQ6MzgzMDcsMzU0NDU6Mzg1NDgsMzU0NDY6Mzg3NjEsMzU0NDc6MjMzOTgsMzU0NDg6MjM3MzEsMzU0NDk6MjcwMDUsMzU0NTA6Mzg5ODksMzU0NTE6Mzg5OTAsMzU0NTI6MjU0OTksMzU0NTM6MzE1MjAsMzU0NTQ6MjcxNzksMzU0NTY6MjcyNjMsMzU0NTc6MjY4MDYsMzU0NTg6Mzk5NDksMzU0NTk6Mjg1MTEsMzU0NjA6MjExMDYsMzU0NjE6MjE5MTcsMzU0NjI6MjQ2ODgsMzU0NjM6MjUzMjQsMzU0NjQ6Mjc5NjMsMzU0NjU6MjgxNjcsMzU0NjY6MjgzNjksMzU0Njc6MzM4ODMsMzU0Njg6MzUwODgsMzU0Njk6MzY2NzYsMzU0NzA6MTk5ODgsMzU0NzE6Mzk5OTMsMzU0NzI6MjE0OTQsMzU0NzM6MjY5MDcsMzU0NzQ6MjcxOTQsMzU0NzU6Mzg3ODgsMzU0NzY6MjY2NjYsMzU0Nzc6MjA4MjgsMzU0Nzg6MzE0MjcsMzU0Nzk6MzM5NzAsMzU0ODA6MzczNDAsMzU0ODE6Mzc3NzIsMzU0ODI6MjIxMDcsMzU0ODM6NDAyMzIsMzU0ODQ6MjY2NTgsMzU0ODU6MzM1NDEsMzU0ODY6MzM4NDEsMzU0ODc6MzE5MDksMzU0ODg6MjFlMywzNTQ4OTozMzQ3NywzNTQ5MDoyOTkyNiwzNTQ5MToyMDA5NCwzNTQ5MjoyMDM1NSwzNTQ5MzoyMDg5NiwzNTQ5NDoyMzUwNiwzNTQ5NToyMTAwMiwzNTQ5NjoyMTIwOCwzNTQ5NzoyMTIyMywzNTQ5ODoyNDA1OSwzNTQ5OToyMTkxNCwzNTUwMDoyMjU3MCwzNTUwMToyMzAxNCwzNTUwMjoyMzQzNiwzNTUwMzoyMzQ0OCwzNTUwNDoyMzUxNSwzNTUwNToyNDE3OCwzNTUwNjoyNDE4NSwzNTUwNzoyNDczOSwzNTUwODoyNDg2MywzNTUwOToyNDkzMSwzNTUxMDoyNTAyMiwzNTUxMToyNTU2MywzNTUxMjoyNTk1NCwzNTUxMzoyNjU3NywzNTUxNDoyNjcwNywzNTUxNToyNjg3NCwzNTUxNjoyNzQ1NCwzNTUxNzoyNzQ3NSwzNTUxODoyNzczNSwzNTUxOToyODQ1MCwzNTUyMDoyODU2NywzNTUyMToyODQ4NSwzNTUyMjoyOTg3MiwzNTUyMzoyOTk3NiwzNTUyNDozMDQzNSwzNTUyNTozMDQ3NSwzNTUyNjozMTQ4NywzNTUyNzozMTY0OSwzNTUyODozMTc3NywzNTUyOTozMjIzMywzNTUzMDozMjU2NiwzNTUzMTozMjc1MiwzNTUzMjozMjkyNSwzNTUzMzozMzM4MiwzNTUzNDozMzY5NCwzNTUzNTozNTI1MSwzNTUzNjozNTUzMiwzNTUzNzozNjAxMSwzNTUzODozNjk5NiwzNTUzOTozNzk2OSwzNTU0MDozODI5MSwzNTU0MTozODI4OSwzNTU0MjozODMwNiwzNTU0MzozODUwMSwzNTU0NDozODg2NywzNTU0NTozOTIwOCwzNTU0NjozMzMwNCwzNTU0NzoyMDAyNCwzNTU0ODoyMTU0NywzNTU0OToyMzczNiwzNTU1MDoyNDAxMiwzNTU1MToyOTYwOSwzNTU1MjozMDI4NCwzNTU1MzozMDUyNCwzNTU1NDoyMzcyMSwzNTU1NTozMjc0NywzNTU1NjozNjEwNywzNTU1NzozODU5MywzNTU1ODozODkyOSwzNTU1OTozODk5NiwzNTU2MDozOWUzLDM1NTYxOjIwMjI1LDM1NTYyOjIwMjM4LDM1NTYzOjIxMzYxLDM1NTY0OjIxOTE2LDM1NTY1OjIyMTIwLDM1NTY2OjIyNTIyLDM1NTY3OjIyODU1LDM1NTY4OjIzMzA1LDM1NTY5OjIzNDkyLDM1NTcwOjIzNjk2LDM1NTcxOjI0MDc2LDM1NTcyOjI0MTkwLDM1NTczOjI0NTI0LDM1NTc0OjI1NTgyLDM1NTc1OjI2NDI2LDM1NTc2OjI2MDcxLDM1NTc3OjI2MDgyLDM1NTc4OjI2Mzk5LDM1NTc5OjI2ODI3LDM1NTgwOjI2ODIwLDM1NjQ4OjI3MjMxLDM1NjQ5OjI0MTEyLDM1NjUwOjI3NTg5LDM1NjUxOjI3NjcxLDM1NjUyOjI3NzczLDM1NjUzOjMwMDc5LDM1NjU0OjMxMDQ4LDM1NjU1OjIzMzk1LDM1NjU2OjMxMjMyLDM1NjU3OjMyZTMsMzU2NTg6MjQ1MDksMzU2NTk6MzUyMTUsMzU2NjA6MzUzNTIsMzU2NjE6MzYwMjAsMzU2NjI6MzYyMTUsMzU2NjM6MzY1NTYsMzU2NjQ6MzY2MzcsMzU2NjU6MzkxMzgsMzU2NjY6Mzk0MzgsMzU2Njc6Mzk3NDAsMzU2Njg6MjAwOTYsMzU2Njk6MjA2MDUsMzU2NzA6MjA3MzYsMzU2NzE6MjI5MzEsMzU2NzI6MjM0NTIsMzU2NzM6MjUxMzUsMzU2NzQ6MjUyMTYsMzU2NzU6MjU4MzYsMzU2NzY6Mjc0NTAsMzU2Nzc6MjkzNDQsMzU2Nzg6MzAwOTcsMzU2Nzk6MzEwNDcsMzU2ODA6MzI2ODEsMzU2ODE6MzQ4MTEsMzU2ODI6MzU1MTYsMzU2ODM6MzU2OTYsMzU2ODQ6MjU1MTYsMzU2ODU6MzM3MzgsMzU2ODY6Mzg4MTYsMzU2ODc6MjE1MTMsMzU2ODg6MjE1MDcsMzU2ODk6MjE5MzEsMzU2OTA6MjY3MDgsMzU2OTE6MjcyMjQsMzU2OTI6MzU0NDAsMzU2OTM6MzA3NTksMzU2OTQ6MjY0ODUsMzU2OTU6NDA2NTMsMzU2OTY6MjEzNjQsMzU2OTc6MjM0NTgsMzU2OTg6MzMwNTAsMzU2OTk6MzQzODQsMzU3MDA6MzY4NzAsMzU3MDE6MTk5OTIsMzU3MDI6MjAwMzcsMzU3MDM6MjAxNjcsMzU3MDQ6MjAyNDEsMzU3MDU6MjE0NTAsMzU3MDY6MjE1NjAsMzU3MDc6MjM0NzAsMzU3MDg6MjQzMzksMzU3MDk6MjQ2MTMsMzU3MTA6MjU5MzcsMzU3MTI6MjY0MjksMzU3MTM6Mjc3MTQsMzU3MTQ6Mjc3NjIsMzU3MTU6Mjc4NzUsMzU3MTY6Mjg3OTIsMzU3MTc6Mjk2OTksMzU3MTg6MzEzNTAsMzU3MTk6MzE0MDYsMzU3MjA6MzE0OTYsMzU3MjE6MzIwMjYsMzU3MjI6MzE5OTgsMzU3MjM6MzIxMDIsMzU3MjQ6MjYwODcsMzU3MjU6MjkyNzUsMzU3MjY6MjE0MzUsMzU3Mjc6MjM2MjEsMzU3Mjg6MjQwNDAsMzU3Mjk6MjUyOTgsMzU3MzA6MjUzMTIsMzU3MzE6MjUzNjksMzU3MzI6MjgxOTIsMzU3MzM6MzQzOTQsMzU3MzQ6MzUzNzcsMzU3MzU6MzYzMTcsMzU3MzY6Mzc2MjQsMzU3Mzc6Mjg0MTcsMzU3Mzg6MzExNDIsMzU3Mzk6Mzk3NzAsMzU3NDA6MjAxMzYsMzU3NDE6MjAxMzksMzU3NDI6MjAxNDAsMzU3NDM6MjAzNzksMzU3NDQ6MjAzODQsMzU3NDU6MjA2ODksMzU3NDY6MjA4MDcsMzU3NDc6MzE0NzgsMzU3NDg6MjA4NDksMzU3NDk6MjA5ODIsMzU3NTA6MjEzMzIsMzU3NTE6MjEyODEsMzU3NTI6MjEzNzUsMzU3NTM6MjE0ODMsMzU3NTQ6MjE5MzIsMzU3NTU6MjI2NTksMzU3NTY6MjM3NzcsMzU3NTc6MjQzNzUsMzU3NTg6MjQzOTQsMzU3NTk6MjQ2MjMsMzU3NjA6MjQ2NTYsMzU3NjE6MjQ2ODUsMzU3NjI6MjUzNzUsMzU3NjM6MjU5NDUsMzU3NjQ6MjcyMTEsMzU3NjU6Mjc4NDEsMzU3NjY6MjkzNzgsMzU3Njc6Mjk0MjEsMzU3Njg6MzA3MDMsMzU3Njk6MzMwMTYsMzU3NzA6MzMwMjksMzU3NzE6MzMyODgsMzU3NzI6MzQxMjYsMzU3NzM6MzcxMTEsMzU3NzQ6Mzc4NTcsMzU3NzU6Mzg5MTEsMzU3NzY6MzkyNTUsMzU3Nzc6Mzk1MTQsMzU3Nzg6MjAyMDgsMzU3Nzk6MjA5NTcsMzU3ODA6MjM1OTcsMzU3ODE6MjYyNDEsMzU3ODI6MjY5ODksMzU3ODM6MjM2MTYsMzU3ODQ6MjYzNTQsMzU3ODU6MjY5OTcsMzU3ODY6Mjk1NzcsMzU3ODc6MjY3MDQsMzU3ODg6MzE4NzMsMzU3ODk6MjA2NzcsMzU3OTA6MjEyMjAsMzU3OTE6MjIzNDMsMzU3OTI6MjQwNjIsMzU3OTM6Mzc2NzAsMzU3OTQ6MjYwMjAsMzU3OTU6Mjc0MjcsMzU3OTY6Mjc0NTMsMzU3OTc6Mjk3NDgsMzU3OTg6MzExMDUsMzU3OTk6MzExNjUsMzU4MDA6MzE1NjMsMzU4MDE6MzIyMDIsMzU4MDI6MzM0NjUsMzU4MDM6MzM3NDAsMzU4MDQ6MzQ5NDMsMzU4MDU6MzUxNjcsMzU4MDY6MzU2NDEsMzU4MDc6MzY4MTcsMzU4MDg6MzczMjksMzU4MDk6MjE1MzUsMzU4MTA6Mzc1MDQsMzU4MTE6MjAwNjEsMzU4MTI6MjA1MzQsMzU4MTM6MjE0NzcsMzU4MTQ6MjEzMDYsMzU4MTU6MjkzOTksMzU4MTY6Mjk1OTAsMzU4MTc6MzA2OTcsMzU4MTg6MzM1MTAsMzU4MTk6MzY1MjcsMzU4MjA6MzkzNjYsMzU4MjE6MzkzNjgsMzU4MjI6MzkzNzgsMzU4MjM6MjA4NTUsMzU4MjQ6MjQ4NTgsMzU4MjU6MzQzOTgsMzU4MjY6MjE5MzYsMzU4Mjc6MzEzNTQsMzU4Mjg6MjA1OTgsMzU4Mjk6MjM1MDcsMzU4MzA6MzY5MzUsMzU4MzE6Mzg1MzMsMzU4MzI6MjAwMTgsMzU4MzM6MjczNTUsMzU4MzQ6MzczNTEsMzU4MzU6MjM2MzMsMzU4MzY6MjM2MjQsMzU5MDQ6MjU0OTYsMzU5MDU6MzEzOTEsMzU5MDY6Mjc3OTUsMzU5MDc6Mzg3NzIsMzU5MDg6MzY3MDUsMzU5MDk6MzE0MDIsMzU5MTA6MjkwNjYsMzU5MTE6Mzg1MzYsMzU5MTI6MzE4NzQsMzU5MTM6MjY2NDcsMzU5MTQ6MzIzNjgsMzU5MTU6MjY3MDUsMzU5MTY6Mzc3NDAsMzU5MTc6MjEyMzQsMzU5MTg6MjE1MzEsMzU5MTk6MzQyMTksMzU5MjA6MzUzNDcsMzU5MjE6MzI2NzYsMzU5MjI6MzY1NTcsMzU5MjM6MzcwODksMzU5MjQ6MjEzNTAsMzU5MjU6MzQ5NTIsMzU5MjY6MzEwNDEsMzU5Mjc6MjA0MTgsMzU5Mjg6MjA2NzAsMzU5Mjk6MjEwMDksMzU5MzA6MjA4MDQsMzU5MzE6MjE4NDMsMzU5MzI6MjIzMTcsMzU5MzM6Mjk2NzQsMzU5MzQ6MjI0MTEsMzU5MzU6MjI4NjUsMzU5MzY6MjQ0MTgsMzU5Mzc6MjQ0NTIsMzU5Mzg6MjQ2OTMsMzU5Mzk6MjQ5NTAsMzU5NDA6MjQ5MzUsMzU5NDE6MjUwMDEsMzU5NDI6MjU1MjIsMzU5NDM6MjU2NTgsMzU5NDQ6MjU5NjQsMzU5NDU6MjYyMjMsMzU5NDY6MjY2OTAsMzU5NDc6MjgxNzksMzU5NDg6MzAwNTQsMzU5NDk6MzEyOTMsMzU5NTA6MzE5OTUsMzU5NTE6MzIwNzYsMzU5NTI6MzIxNTMsMzU5NTM6MzIzMzEsMzU5NTQ6MzI2MTksMzU5NTU6MzM1NTAsMzU5NTY6MzM2MTAsMzU5NTc6MzQ1MDksMzU5NTg6MzUzMzYsMzU5NTk6MzU0MjcsMzU5NjA6MzU2ODYsMzU5NjE6MzY2MDUsMzU5NjI6Mzg5MzgsMzU5NjM6NDAzMzUsMzU5NjQ6MzM0NjQsMzU5NjU6MzY4MTQsMzU5NjY6Mzk5MTIsMzU5Njg6MjExMjcsMzU5Njk6MjUxMTksMzU5NzA6MjU3MzEsMzU5NzE6Mjg2MDgsMzU5NzI6Mzg1NTMsMzU5NzM6MjY2ODksMzU5NzQ6MjA2MjUsMzU5NzU6Mjc0MjQsMzU5NzY6Mjc3NzAsMzU5Nzc6Mjg1MDAsMzU5Nzg6MzEzNDgsMzU5Nzk6MzIwODAsMzU5ODA6MzQ4ODAsMzU5ODE6MzUzNjMsMzU5ODI6MjYzNzYsMzU5ODM6MjAyMTQsMzU5ODQ6MjA1MzcsMzU5ODU6MjA1MTgsMzU5ODY6MjA1ODEsMzU5ODc6MjA4NjAsMzU5ODg6MjEwNDgsMzU5ODk6MjEwOTEsMzU5OTA6MjE5MjcsMzU5OTE6MjIyODcsMzU5OTI6MjI1MzMsMzU5OTM6MjMyNDQsMzU5OTQ6MjQzMTQsMzU5OTU6MjUwMTAsMzU5OTY6MjUwODAsMzU5OTc6MjUzMzEsMzU5OTg6MjU0NTgsMzU5OTk6MjY5MDgsMzZlMzoyNzE3NywzNjAwMToyOTMwOSwzNjAwMjoyOTM1NiwzNjAwMzoyOTQ4NiwzNjAwNDozMDc0MCwzNjAwNTozMDgzMSwzNjAwNjozMjEyMSwzNjAwNzozMDQ3NiwzNjAwODozMjkzNywzNjAwOTozNTIxMSwzNjAxMDozNTYwOSwzNjAxMTozNjA2NixcXG4zNjAxMjozNjU2MiwzNjAxMzozNjk2MywzNjAxNDozNzc0OSwzNjAxNTozODUyMiwzNjAxNjozODk5NywzNjAxNzozOTQ0MywzNjAxODo0MDU2OCwzNjAxOToyMDgwMywzNjAyMDoyMTQwNywzNjAyMToyMTQyNywzNjAyMjoyNDE4NywzNjAyMzoyNDM1OCwzNjAyNDoyODE4NywzNjAyNToyODMwNCwzNjAyNjoyOTU3MiwzNjAyNzoyOTY5NCwzNjAyODozMjA2NywzNjAyOTozMzMzNSwzNjAzMDozNTMyOCwzNjAzMTozNTU3OCwzNjAzMjozODQ4MCwzNjAzMzoyMDA0NiwzNjAzNDoyMDQ5MSwzNjAzNToyMTQ3NiwzNjAzNjoyMTYyOCwzNjAzNzoyMjI2NiwzNjAzODoyMjk5MywzNjAzOToyMzM5NiwzNjA0MDoyNDA0OSwzNjA0MToyNDIzNSwzNjA0MjoyNDM1OSwzNjA0MzoyNTE0NCwzNjA0NDoyNTkyNSwzNjA0NToyNjU0MywzNjA0NjoyODI0NiwzNjA0NzoyOTM5MiwzNjA0ODozMTk0NiwzNjA0OTozNDk5NiwzNjA1MDozMjkyOSwzNjA1MTozMjk5MywzNjA1MjozMzc3NiwzNjA1MzozNDM4MiwzNjA1NDozNTQ2MywzNjA1NTozNjMyOCwzNjA1NjozNzQzMSwzNjA1NzozODU5OSwzNjA1ODozOTAxNSwzNjA1OTo0MDcyMywzNjA2MDoyMDExNiwzNjA2MToyMDExNCwzNjA2MjoyMDIzNywzNjA2MzoyMTMyMCwzNjA2NDoyMTU3NywzNjA2NToyMTU2NiwzNjA2NjoyMzA4NywzNjA2NzoyNDQ2MCwzNjA2ODoyNDQ4MSwzNjA2OToyNDczNSwzNjA3MDoyNjc5MSwzNjA3MToyNzI3OCwzNjA3MjoyOTc4NiwzNjA3MzozMDg0OSwzNjA3NDozNTQ4NiwzNjA3NTozNTQ5MiwzNjA3NjozNTcwMywzNjA3NzozNzI2NCwzNjA3ODoyMDA2MiwzNjA3OTozOTg4MSwzNjA4MDoyMDEzMiwzNjA4MToyMDM0OCwzNjA4MjoyMDM5OSwzNjA4MzoyMDUwNSwzNjA4NDoyMDUwMiwzNjA4NToyMDgwOSwzNjA4NjoyMDg0NCwzNjA4NzoyMTE1MSwzNjA4ODoyMTE3NywzNjA4OToyMTI0NiwzNjA5MDoyMTQwMiwzNjA5MToyMTQ3NSwzNjA5MjoyMTUyMSwzNjE2MDoyMTUxOCwzNjE2MToyMTg5NywzNjE2MjoyMjM1MywzNjE2MzoyMjQzNCwzNjE2NDoyMjkwOSwzNjE2NToyMzM4MCwzNjE2NjoyMzM4OSwzNjE2NzoyMzQzOSwzNjE2ODoyNDAzNywzNjE2OToyNDAzOSwzNjE3MDoyNDA1NSwzNjE3MToyNDE4NCwzNjE3MjoyNDE5NSwzNjE3MzoyNDIxOCwzNjE3NDoyNDI0NywzNjE3NToyNDM0NCwzNjE3NjoyNDY1OCwzNjE3NzoyNDkwOCwzNjE3ODoyNTIzOSwzNjE3OToyNTMwNCwzNjE4MDoyNTUxMSwzNjE4MToyNTkxNSwzNjE4MjoyNjExNCwzNjE4MzoyNjE3OSwzNjE4NDoyNjM1NiwzNjE4NToyNjQ3NywzNjE4NjoyNjY1NywzNjE4NzoyNjc3NSwzNjE4ODoyNzA4MywzNjE4OToyNzc0MywzNjE5MDoyNzk0NiwzNjE5MToyODAwOSwzNjE5MjoyODIwNywzNjE5MzoyODMxNywzNjE5NDozMDAwMiwzNjE5NTozMDM0MywzNjE5NjozMDgyOCwzNjE5NzozMTI5NSwzNjE5ODozMTk2OCwzNjE5OTozMjAwNSwzNjIwMDozMjAyNCwzNjIwMTozMjA5NCwzNjIwMjozMjE3NywzNjIwMzozMjc4OSwzNjIwNDozMjc3MSwzNjIwNTozMjk0MywzNjIwNjozMjk0NSwzNjIwNzozMzEwOCwzNjIwODozMzE2NywzNjIwOTozMzMyMiwzNjIxMDozMzYxOCwzNjIxMTozNDg5MiwzNjIxMjozNDkxMywzNjIxMzozNTYxMSwzNjIxNDozNjAwMiwzNjIxNTozNjA5MiwzNjIxNjozNzA2NiwzNjIxNzozNzIzNywzNjIxODozNzQ4OSwzNjIxOTozMDc4MywzNjIyMDozNzYyOCwzNjIyMTozODMwOCwzNjIyMjozODQ3NywzNjIyNDozODkxNywzNjIyNTozOTMyMSwzNjIyNjozOTY0MCwzNjIyNzo0MDI1MSwzNjIyODoyMTA4MywzNjIyOToyMTE2MywzNjIzMDoyMTQ5NSwzNjIzMToyMTUxMiwzNjIzMjoyMjc0MSwzNjIzMzoyNTMzNSwzNjIzNDoyODY0MCwzNjIzNTozNTk0NiwzNjIzNjozNjcwMywzNjIzNzo0MDYzMywzNjIzODoyMDgxMSwzNjIzOToyMTA1MSwzNjI0MDoyMTU3OCwzNjI0MToyMjI2OSwzNjI0MjozMTI5NiwzNjI0MzozNzIzOSwzNjI0NDo0MDI4OCwzNjI0NTo0MDY1OCwzNjI0NjoyOTUwOCwzNjI0NzoyODQyNSwzNjI0ODozMzEzNiwzNjI0OToyOTk2OSwzNjI1MDoyNDU3MywzNjI1MToyNDc5NCwzNjI1MjozOTU5MiwzNjI1MzoyOTQwMywzNjI1NDozNjc5NiwzNjI1NToyNzQ5MiwzNjI1NjozODkxNSwzNjI1NzoyMDE3MCwzNjI1ODoyMjI1NiwzNjI1OToyMjM3MiwzNjI2MDoyMjcxOCwzNjI2MToyMzEzMCwzNjI2MjoyNDY4MCwzNjI2MzoyNTAzMSwzNjI2NDoyNjEyNywzNjI2NToyNjExOCwzNjI2NjoyNjY4MSwzNjI2NzoyNjgwMSwzNjI2ODoyODE1MSwzNjI2OTozMDE2NSwzNjI3MDozMjA1OCwzNjI3MTozMzM5MCwzNjI3MjozOTc0NiwzNjI3MzoyMDEyMywzNjI3NDoyMDMwNCwzNjI3NToyMTQ0OSwzNjI3NjoyMTc2NiwzNjI3NzoyMzkxOSwzNjI3ODoyNDAzOCwzNjI3OToyNDA0NiwzNjI4MDoyNjYxOSwzNjI4MToyNzgwMSwzNjI4MjoyOTgxMSwzNjI4MzozMDcyMiwzNjI4NDozNTQwOCwzNjI4NTozNzc4MiwzNjI4NjozNTAzOSwzNjI4NzoyMjM1MiwzNjI4ODoyNDIzMSwzNjI4OToyNTM4NywzNjI5MDoyMDY2MSwzNjI5MToyMDY1MiwzNjI5MjoyMDg3NywzNjI5MzoyNjM2OCwzNjI5NDoyMTcwNSwzNjI5NToyMjYyMiwzNjI5NjoyMjk3MSwzNjI5NzoyMzQ3MiwzNjI5ODoyNDQyNSwzNjI5OToyNTE2NSwzNjMwMDoyNTUwNSwzNjMwMToyNjY4NSwzNjMwMjoyNzUwNywzNjMwMzoyODE2OCwzNjMwNDoyODc5NywzNjMwNTozNzMxOSwzNjMwNjoyOTMxMiwzNjMwNzozMDc0MSwzNjMwODozMDc1OCwzNjMwOTozMTA4NSwzNjMxMDoyNTk5OCwzNjMxMTozMjA0OCwzNjMxMjozMzc1NiwzNjMxMzozNTAwOSwzNjMxNDozNjYxNywzNjMxNTozODU1NSwzNjMxNjoyMTA5MiwzNjMxNzoyMjMxMiwzNjMxODoyNjQ0OCwzNjMxOTozMjYxOCwzNjMyMDozNjAwMSwzNjMyMToyMDkxNiwzNjMyMjoyMjMzOCwzNjMyMzozODQ0MiwzNjMyNDoyMjU4NiwzNjMyNToyNzAxOCwzNjMyNjozMjk0OCwzNjMyNzoyMTY4MiwzNjMyODoyMzgyMiwzNjMyOToyMjUyNCwzNjMzMDozMDg2OSwzNjMzMTo0MDQ0MiwzNjMzMjoyMDMxNiwzNjMzMzoyMTA2NiwzNjMzNDoyMTY0MywzNjMzNToyNTY2MiwzNjMzNjoyNjE1MiwzNjMzNzoyNjM4OCwzNjMzODoyNjYxMywzNjMzOTozMTM2NCwzNjM0MDozMTU3NCwzNjM0MTozMjAzNCwzNjM0MjozNzY3OSwzNjM0MzoyNjcxNiwzNjM0NDozOTg1MywzNjM0NTozMTU0NSwzNjM0NjoyMTI3MywzNjM0NzoyMDg3NCwzNjM0ODoyMTA0NywzNjQxNjoyMzUxOSwzNjQxNzoyNTMzNCwzNjQxODoyNTc3NCwzNjQxOToyNTgzMCwzNjQyMDoyNjQxMywzNjQyMToyNzU3OCwzNjQyMjozNDIxNywzNjQyMzozODYwOSwzNjQyNDozMDM1MiwzNjQyNTozOTg5NCwzNjQyNjoyNTQyMCwzNjQyNzozNzYzOCwzNjQyODozOTg1MSwzNjQyOTozMDM5OSwzNjQzMDoyNjE5NCwzNjQzMToxOTk3NywzNjQzMjoyMDYzMiwzNjQzMzoyMTQ0MiwzNjQzNDoyMzY2NSwzNjQzNToyNDgwOCwzNjQzNjoyNTc0NiwzNjQzNzoyNTk1NSwzNjQzODoyNjcxOSwzNjQzOToyOTE1OCwzNjQ0MDoyOTY0MiwzNjQ0MToyOTk4NywzNjQ0MjozMTYzOSwzNjQ0MzozMjM4NiwzNjQ0NDozNDQ1MywzNjQ0NTozNTcxNSwzNjQ0NjozNjA1OSwzNjQ0NzozNzI0MCwzNjQ0ODozOTE4NCwzNjQ0OToyNjAyOCwzNjQ1MDoyNjI4MywzNjQ1MToyNzUzMSwzNjQ1MjoyMDE4MSwzNjQ1MzoyMDE4MCwzNjQ1NDoyMDI4MiwzNjQ1NToyMDM1MSwzNjQ1NjoyMTA1MCwzNjQ1NzoyMTQ5NiwzNjQ1ODoyMTQ5MCwzNjQ1OToyMTk4NywzNjQ2MDoyMjIzNSwzNjQ2MToyMjc2MywzNjQ2MjoyMjk4NywzNjQ2MzoyMjk4NSwzNjQ2NDoyMzAzOSwzNjQ2NToyMzM3NiwzNjQ2NjoyMzYyOSwzNjQ2NzoyNDA2NiwzNjQ2ODoyNDEwNywzNjQ2OToyNDUzNSwzNjQ3MDoyNDYwNSwzNjQ3MToyNTM1MSwzNjQ3MjoyNTkwMywzNjQ3MzoyMzM4OCwzNjQ3NDoyNjAzMSwzNjQ3NToyNjA0NSwzNjQ3NjoyNjA4OCwzNjQ3NzoyNjUyNSwzNjQ3ODoyNzQ5MCwzNjQ4MDoyNzUxNSwzNjQ4MToyNzY2MywzNjQ4MjoyOTUwOSwzNjQ4MzozMTA0OSwzNjQ4NDozMTE2OSwzNjQ4NTozMTk5MiwzNjQ4NjozMjAyNSwzNjQ4NzozMjA0MywzNjQ4ODozMjkzMCwzNjQ4OTozMzAyNiwzNjQ5MDozMzI2NywzNjQ5MTozNTIyMiwzNjQ5MjozNTQyMiwzNjQ5MzozNTQzMywzNjQ5NDozNTQzMCwzNjQ5NTozNTQ2OCwzNjQ5NjozNTU2NiwzNjQ5NzozNjAzOSwzNjQ5ODozNjA2MCwzNjQ5OTozODYwNCwzNjUwMDozOTE2NCwzNjUwMToyNzUwMywzNjUwMjoyMDEwNywzNjUwMzoyMDI4NCwzNjUwNDoyMDM2NSwzNjUwNToyMDgxNiwzNjUwNjoyMzM4MywzNjUwNzoyMzU0NiwzNjUwODoyNDkwNCwzNjUwOToyNTM0NSwzNjUxMDoyNjE3OCwzNjUxMToyNzQyNSwzNjUxMjoyODM2MywzNjUxMzoyNzgzNSwzNjUxNDoyOTI0NiwzNjUxNToyOTg4NSwzNjUxNjozMDE2NCwzNjUxNzozMDkxMywzNjUxODozMTAzNCwzNjUxOTozMjc4MCwzNjUyMDozMjgxOSwzNjUyMTozMzI1OCwzNjUyMjozMzk0MCwzNjUyMzozNjc2NiwzNjUyNDoyNzcyOCwzNjUyNTo0MDU3NSwzNjUyNjoyNDMzNSwzNjUyNzozNTY3MiwzNjUyODo0MDIzNSwzNjUyOTozMTQ4MiwzNjUzMDozNjYwMCwzNjUzMToyMzQzNywzNjUzMjozODYzNSwzNjUzMzoxOTk3MSwzNjUzNDoyMTQ4OSwzNjUzNToyMjUxOSwzNjUzNjoyMjgzMywzNjUzNzoyMzI0MSwzNjUzODoyMzQ2MCwzNjUzOToyNDcxMywzNjU0MDoyODI4NywzNjU0MToyODQyMiwzNjU0MjozMDE0MiwzNjU0MzozNjA3NCwzNjU0NDoyMzQ1NSwzNjU0NTozNDA0OCwzNjU0NjozMTcxMiwzNjU0NzoyMDU5NCwzNjU0ODoyNjYxMiwzNjU0OTozMzQzNywzNjU1MDoyMzY0OSwzNjU1MTozNDEyMiwzNjU1MjozMjI4NiwzNjU1MzozMzI5NCwzNjU1NDoyMDg4OSwzNjU1NToyMzU1NiwzNjU1NjoyNTQ0OCwzNjU1NzozNjE5OCwzNjU1ODoyNjAxMiwzNjU1OToyOTAzOCwzNjU2MDozMTAzOCwzNjU2MTozMjAyMywzNjU2MjozMjc3MywzNjU2MzozNTYxMywzNjU2NDozNjU1NCwzNjU2NTozNjk3NCwzNjU2NjozNDUwMywzNjU2NzozNzAzNCwzNjU2ODoyMDUxMSwzNjU2OToyMTI0MiwzNjU3MDoyMzYxMCwzNjU3MToyNjQ1MSwzNjU3MjoyODc5NiwzNjU3MzoyOTIzNywzNjU3NDozNzE5NiwzNjU3NTozNzMyMCwzNjU3NjozNzY3NSwzNjU3NzozMzUwOSwzNjU3ODoyMzQ5MCwzNjU3OToyNDM2OSwzNjU4MDoyNDgyNSwzNjU4MToyMDAyNywzNjU4MjoyMTQ2MiwzNjU4MzoyMzQzMiwzNjU4NDoyNTE2MywzNjU4NToyNjQxNywzNjU4NjoyNzUzMCwzNjU4NzoyOTQxNywzNjU4ODoyOTY2NCwzNjU4OTozMTI3OCwzNjU5MDozMzEzMSwzNjU5MTozNjI1OSwzNjU5MjozNzIwMiwzNjU5MzozOTMxOCwzNjU5NDoyMDc1NCwzNjU5NToyMTQ2MywzNjU5NjoyMTYxMCwzNjU5NzoyMzU1MSwzNjU5ODoyNTQ4MCwzNjU5OToyNzE5MywzNjYwMDozMjE3MiwzNjYwMTozODY1NiwzNjYwMjoyMjIzNCwzNjYwMzoyMTQ1NCwzNjYwNDoyMTYwOCwzNjY3MjoyMzQ0NywzNjY3MzoyMzYwMSwzNjY3NDoyNDAzMCwzNjY3NToyMDQ2MiwzNjY3NjoyNDgzMywzNjY3NzoyNTM0MiwzNjY3ODoyNzk1NCwzNjY3OTozMTE2OCwzNjY4MDozMTE3OSwzNjY4MTozMjA2NiwzNjY4MjozMjMzMywzNjY4MzozMjcyMiwzNjY4NDozMzI2MSwzNjY4NTozMzMxMSwzNjY4NjozMzkzNiwzNjY4NzozNDg4NiwzNjY4ODozNTE4NiwzNjY4OTozNTcyOCwzNjY5MDozNjQ2OCwzNjY5MTozNjY1NSwzNjY5MjozNjkxMywzNjY5MzozNzE5NSwzNjY5NDozNzIyOCwzNjY5NTozODU5OCwzNjY5NjozNzI3NiwzNjY5NzoyMDE2MCwzNjY5ODoyMDMwMywzNjY5OToyMDgwNSwzNjcwMDoyMTMxMywzNjcwMToyNDQ2NywzNjcwMjoyNTEwMiwzNjcwMzoyNjU4MCwzNjcwNDoyNzcxMywzNjcwNToyODE3MSwzNjcwNjoyOTUzOSwzNjcwNzozMjI5NCwzNjcwODozNzMyNSwzNjcwOTozNzUwNywzNjcxMDoyMTQ2MCwzNjcxMToyMjgwOSwzNjcxMjoyMzQ4NywzNjcxMzoyODExMywzNjcxNDozMTA2OSwzNjcxNTozMjMwMiwzNjcxNjozMTg5OSwzNjcxNzoyMjY1NCwzNjcxODoyOTA4NywzNjcxOToyMDk4NiwzNjcyMDozNDg5OSwzNjcyMTozNjg0OCwzNjcyMjoyMDQyNiwzNjcyMzoyMzgwMywzNjcyNDoyNjE0OSwzNjcyNTozMDYzNiwzNjcyNjozMTQ1OSwzNjcyNzozMzMwOCwzNjcyODozOTQyMywzNjcyOToyMDkzNCwzNjczMDoyNDQ5MCwzNjczMToyNjA5MiwzNjczMjoyNjk5MSwzNjczMzoyNzUyOSwzNjczNDoyODE0NywzNjczNjoyODMxMCwzNjczNzoyODUxNiwzNjczODozMDQ2MiwzNjczOTozMjAyMCwzNjc0MDoyNDAzMywzNjc0MTozNjk4MSwzNjc0MjozNzI1NSwzNjc0MzozODkxOCwzNjc0NDoyMDk2NiwzNjc0NToyMTAyMSwzNjc0NjoyNTE1MiwzNjc0NzoyNjI1NywzNjc0ODoyNjMyOSwzNjc0OToyODE4NiwzNjc1MDoyNDI0NiwzNjc1MTozMjIxMCwzNjc1MjozMjYyNiwzNjc1MzoyNjM2MCwzNjc1NDozNDIyMywzNjc1NTozNDI5NSwzNjc1NjozNTU3NiwzNjc1NzoyMTE2MSwzNjc1ODoyMTQ2NSwzNjc1OToyMjg5OSwzNjc2MDoyNDIwNywzNjc2MToyNDQ2NCwzNjc2MjoyNDY2MSwzNjc2MzozNzYwNCwzNjc2NDozODUwMCwzNjc2NToyMDY2MywzNjc2NjoyMDc2NywzNjc2NzoyMTIxMywzNjc2ODoyMTI4MCwzNjc2OToyMTMxOSwzNjc3MDoyMTQ4NCwzNjc3MToyMTczNiwzNjc3MjoyMTgzMCwzNjc3MzoyMTgwOSwzNjc3NDoyMjAzOSwzNjc3NToyMjg4OCwzNjc3NjoyMjk3NCwzNjc3NzoyMzEwMCwzNjc3ODoyMzQ3NywzNjc3OToyMzU1OCwzNjc4MDoyMzU2NywzNjc4MToyMzU2OSwzNjc4MjoyMzU3OCwzNjc4MzoyNDE5NiwzNjc4NDoyNDIwMiwzNjc4NToyNDI4OCwzNjc4NjoyNDQzMiwzNjc4NzoyNTIxNSwzNjc4ODoyNTIyMCwzNjc4OToyNTMwNywzNjc5MDoyNTQ4NCwzNjc5MToyNTQ2MywzNjc5MjoyNjExOSwzNjc5MzoyNjEyNCwzNjc5NDoyNjE1NywzNjc5NToyNjIzMCwzNjc5NjoyNjQ5NCwzNjc5NzoyNjc4NiwzNjc5ODoyNzE2NywzNjc5OToyNzE4OSwzNjgwMDoyNzgzNiwzNjgwMToyODA0MCwzNjgwMjoyODE2OSwzNjgwMzoyODI0OCwzNjgwNDoyODk4OCwzNjgwNToyODk2NiwzNjgwNjoyOTAzMSwzNjgwNzozMDE1MSwzNjgwODozMDQ2NSwzNjgwOTozMDgxMywzNjgxMDozMDk3NywzNjgxMTozMTA3NywzNjgxMjozMTIxNiwzNjgxMzozMTQ1NiwzNjgxNDozMTUwNSwzNjgxNTozMTkxMSwzNjgxNjozMjA1NywzNjgxNzozMjkxOCwzNjgxODozMzc1MCwzNjgxOTozMzkzMSwzNjgyMDozNDEyMSwzNjgyMTozNDkwOSwzNjgyMjozNTA1OSwzNjgyMzozNTM1OSwzNjgyNDozNTM4OCwzNjgyNTozNTQxMiwzNjgyNjozNTQ0MywzNjgyNzozNTkzNywzNjgyODozNjA2MiwzNjgyOTozNzI4NCwzNjgzMDozNzQ3OCwzNjgzMTozNzc1OCwzNjgzMjozNzkxMiwzNjgzMzozODU1NiwzNjgzNDozODgwOCwzNjgzNToxOTk3OCwzNjgzNjoxOTk3NiwzNjgzNzoxOTk5OCwzNjgzODoyMDA1NSwzNjgzOToyMDg4NywzNjg0MDoyMTEwNCwzNjg0MToyMjQ3OCwzNjg0MjoyMjU4MCwzNjg0MzoyMjczMiwzNjg0NDoyMzMzMCwzNjg0NToyNDEyMCwzNjg0NjoyNDc3MywzNjg0NzoyNTg1NCwzNjg0ODoyNjQ2NSwzNjg0OToyNjQ1NCwzNjg1MDoyNzk3MiwzNjg1MToyOTM2NiwzNjg1MjozMDA2NywzNjg1MzozMTMzMSwzNjg1NDozMzk3NiwzNjg1NTozNTY5OCwzNjg1NjozNzMwNCwzNjg1NzozNzY2NCwzNjg1ODoyMjA2NSwzNjg1OToyMjUxNiwzNjg2MDozOTE2NiwzNjkyODoyNTMyNSwzNjkyOToyNjg5MywzNjkzMDoyNzU0MiwzNjkzMToyOTE2NSwzNjkzMjozMjM0MCwzNjkzMzozMjg4NywzNjkzNDozMzM5NCwzNjkzNTozNTMwMiwzNjkzNjozOTEzNSwzNjkzNzozNDY0NSwzNjkzODozNjc4NSwzNjkzOToyMzYxMSwzNjk0MDoyMDI4MCwzNjk0MToyMDQ0OSwzNjk0MjoyMDQwNSwzNjk0MzoyMTc2NywzNjk0NDoyMzA3MiwzNjk0NToyMzUxNywzNjk0NjoyMzUyOSwzNjk0NzoyNDUxNSwzNjk0ODoyNDkxMCwzNjk0OToyNTM5MSwzNjk1MDoyNjAzMiwzNjk1MToyNjE4NywzNjk1MjoyNjg2MiwzNjk1MzoyNzAzNSwzNjk1NDoyODAyNCwzNjk1NToyODE0NSwzNjk1NjozMDAwMywzNjk1NzozMDEzNywzNjk1ODozMDQ5NSwzNjk1OTozMTA3MCwzNjk2MDozMTIwNiwzNjk2MTozMjA1MSwzNjk2MjozMzI1MSwzNjk2MzozMzQ1NSwzNjk2NDozNDIxOCwzNjk2NTozNTI0MiwzNjk2NjozNTM4NiwzNjk2NzozNjUyMywzNjk2ODozNjc2MywzNjk2OTozNjkxNCwzNjk3MDozNzM0MSwzNjk3MTozODY2MywzNjk3MjoyMDE1NCwzNjk3MzoyMDE2MSwzNjk3NDoyMDk5NSwzNjk3NToyMjY0NSwzNjk3NjoyMjc2NCwzNjk3NzoyMzU2MywzNjk3ODoyOTk3OCwzNjk3OToyMzYxMywzNjk4MDozMzEwMiwzNjk4MTozNTMzOCwzNjk4MjozNjgwNSwzNjk4MzozODQ5OSwzNjk4NDozODc2NSwzNjk4NTozMTUyNSwzNjk4NjozNTUzNSwzNjk4NzozODkyMCwzNjk4ODozNzIxOCwzNjk4OToyMjI1OSwzNjk5MDoyMTQxNiwzNjk5MjozNjg4NywzNjk5MzoyMTU2MSwzNjk5NDoyMjQwMiwzNjk5NToyNDEwMSwzNjk5NjoyNTUxMiwzNjk5NzoyNzcwMCwzNjk5ODoyODgxMCwzNjk5OTozMDU2MSwzN2UzOjMxODgzLDM3MDAxOjMyNzM2LDM3MDAyOjM0OTI4LDM3MDAzOjM2OTMwLDM3MDA0OjM3MjA0LDM3MDA1OjM3NjQ4LDM3MDA2OjM3NjU2LDM3MDA3OjM4NTQzLDM3MDA4OjI5NzkwLDM3MDA5OjM5NjIwLDM3MDEwOjIzODE1LDM3MDExOjIzOTEzLDM3MDEyOjI1OTY4LDM3MDEzOjI2NTMwLDM3MDE0OjM2MjY0LDM3MDE1OjM4NjE5LDM3MDE2OjI1NDU0LDM3MDE3OjI2NDQxLDM3MDE4OjI2OTA1LDM3MDE5OjMzNzMzLDM3MDIwOjM4OTM1LDM3MDIxOjM4NTkyLDM3MDIyOjM1MDcwLDM3MDIzOjI4NTQ4LDM3MDI0OjI1NzIyLDM3MDI1OjIzNTQ0LDM3MDI2OjE5OTkwLDM3MDI3OjI4NzE2LDM3MDI4OjMwMDQ1LDM3MDI5OjI2MTU5LDM3MDMwOjIwOTMyLDM3MDMxOjIxMDQ2LDM3MDMyOjIxMjE4LDM3MDMzOjIyOTk1LDM3MDM0OjI0NDQ5LDM3MDM1OjI0NjE1LDM3MDM2OjI1MTA0LDM3MDM3OjI1OTE5LDM3MDM4OjI1OTcyLDM3MDM5OjI2MTQzLDM3MDQwOjI2MjI4LDM3MDQxOjI2ODY2LDM3MDQyOjI2NjQ2LDM3MDQzOjI3NDkxLDM3MDQ0OjI4MTY1LDM3MDQ1OjI5Mjk4LDM3MDQ2OjI5OTgzLDM3MDQ3OjMwNDI3LDM3MDQ4OjMxOTM0LDM3MDQ5OjMyODU0LDM3MDUwOjIyNzY4LDM3MDUxOjM1MDY5LDM3MDUyOjM1MTk5LDM3MDUzOjM1NDg4LDM3MDU0OjM1NDc1LDM3MDU1OjM1NTMxLDM3MDU2OjM2ODkzLDM3MDU3OjM3MjY2LDM3MDU4OjM4NzM4LDM3MDU5OjM4NzQ1LDM3MDYwOjI1OTkzLDM3MDYxOjMxMjQ2LDM3MDYyOjMzMDMwLDM3MDYzOjM4NTg3LDM3MDY0OjI0MTA5LDM3MDY1OjI0Nzk2LDM3MDY2OjI1MTE0LDM3MDY3OjI2MDIxLDM3MDY4OjI2MTMyLDM3MDY5OjI2NTEyLDM3MDcwOjMwNzA3LDM3MDcxOjMxMzA5LDM3MDcyOjMxODIxLDM3MDczOjMyMzE4LDM3MDc0OjMzMDM0LDM3MDc1OjM2MDEyLDM3MDc2OjM2MTk2LDM3MDc3OjM2MzIxLDM3MDc4OjM2NDQ3LDM3MDc5OjMwODg5LDM3MDgwOjIwOTk5LDM3MDgxOjI1MzA1LDM3MDgyOjI1NTA5LDM3MDgzOjI1NjY2LDM3MDg0OjI1MjQwLDM3MDg1OjM1MzczLDM3MDg2OjMxMzYzLDM3MDg3OjMxNjgwLDM3MDg4OjM1NTAwLDM3MDg5OjM4NjM0LDM3MDkwOjMyMTE4LDM3MDkxOjMzMjkyLDM3MDkyOjM0NjMzLDM3MDkzOjIwMTg1LDM3MDk0OjIwODA4LDM3MDk1OjIxMzE1LDM3MDk2OjIxMzQ0LDM3MDk3OjIzNDU5LDM3MDk4OjIzNTU0LDM3MDk5OjIzNTc0LDM3MTAwOjI0MDI5LDM3MTAxOjI1MTI2LDM3MTAyOjI1MTU5LDM3MTAzOjI1Nzc2LDM3MTA0OjI2NjQzLDM3MTA1OjI2Njc2LDM3MTA2OjI3ODQ5LDM3MTA3OjI3OTczLDM3MTA4OjI3OTI3LDM3MTA5OjI2NTc5LDM3MTEwOjI4NTA4LDM3MTExOjI5MDA2LDM3MTEyOjI5MDUzLDM3MTEzOjI2MDU5LDM3MTE0OjMxMzU5LDM3MTE1OjMxNjYxLDM3MTE2OjMyMjE4LDM3MTg0OjMyMzMwLDM3MTg1OjMyNjgwLDM3MTg2OjMzMTQ2LDM3MTg3OjMzMzA3LDM3MTg4OjMzMzM3LDM3MTg5OjM0MjE0LDM3MTkwOjM1NDM4LDM3MTkxOjM2MDQ2LDM3MTkyOjM2MzQxLDM3MTkzOjM2OTg0LDM3MTk0OjM2OTgzLDM3MTk1OjM3NTQ5LDM3MTk2OjM3NTIxLDM3MTk3OjM4Mjc1LDM3MTk4OjM5ODU0LDM3MTk5OjIxMDY5LDM3MjAwOjIxODkyLDM3MjAxOjI4NDcyLDM3MjAyOjI4OTgyLDM3MjAzOjIwODQwLDM3MjA0OjMxMTA5LDM3MjA1OjMyMzQxLDM3MjA2OjMzMjAzLDM3MjA3OjMxOTUwLDM3MjA4OjIyMDkyLDM3MjA5OjIyNjA5LDM3MjEwOjIzNzIwLDM3MjExOjI1NTE0LDM3MjEyOjI2MzY2LDM3MjEzOjI2MzY1LDM3MjE0OjI2OTcwLDM3MjE1OjI5NDAxLDM3MjE2OjMwMDk1LDM3MjE3OjMwMDk0LDM3MjE4OjMwOTkwLDM3MjE5OjMxMDYyLDM3MjIwOjMxMTk5LDM3MjIxOjMxODk1LDM3MjIyOjMyMDMyLDM3MjIzOjMyMDY4LDM3MjI0OjM0MzExLDM3MjI1OjM1MzgwLDM3MjI2OjM4NDU5LDM3MjI3OjM2OTYxLDM3MjI4OjQwNzM2LDM3MjI5OjIwNzExLDM3MjMwOjIxMTA5LDM3MjMxOjIxNDUyLDM3MjMyOjIxNDc0LDM3MjMzOjIwNDg5LDM3MjM0OjIxOTMwLDM3MjM1OjIyNzY2LDM3MjM2OjIyODYzLDM3MjM3OjI5MjQ1LDM3MjM4OjIzNDM1LDM3MjM5OjIzNjUyLDM3MjQwOjIxMjc3LDM3MjQxOjI0ODAzLDM3MjQyOjI0ODE5LDM3MjQzOjI1NDM2LDM3MjQ0OjI1NDc1LDM3MjQ1OjI1NDA3LDM3MjQ2OjI1NTMxLDM3MjQ4OjI1ODA1LDM3MjQ5OjI2MDg5LDM3MjUwOjI2MzYxLDM3MjUxOjI0MDM1LDM3MjUyOjI3MDg1LDM3MjUzOjI3MTMzLDM3MjU0OjI4NDM3LDM3MjU1OjI5MTU3LDM3MjU2OjIwMTA1LDM3MjU3OjMwMTg1LDM3MjU4OjMwNDU2LDM3MjU5OjMxMzc5LDM3MjYwOjMxOTY3LDM3MjYxOjMyMjA3LDM3MjYyOjMyMTU2LDM3MjYzOjMyODY1LDM3MjY0OjMzNjA5LDM3MjY1OjMzNjI0LDM3MjY2OjMzOTAwLDM3MjY3OjMzOTgwLDM3MjY4OjM0Mjk5LDM3MjY5OjM1MDEzLDM3MjcwOjM2MjA4LDM3MjcxOjM2ODY1LDM3MjcyOjM2OTczLDM3MjczOjM3NzgzLDM3Mjc0OjM4Njg0LDM3Mjc1OjM5NDQyLDM3Mjc2OjIwNjg3LDM3Mjc3OjIyNjc5LDM3Mjc4OjI0OTc0LDM3Mjc5OjMzMjM1LDM3MjgwOjM0MTAxLDM3MjgxOjM2MTA0LDM3MjgyOjM2ODk2LDM3MjgzOjIwNDE5LDM3Mjg0OjIwNTk2LDM3Mjg1OjIxMDYzLDM3Mjg2OjIxMzYzLDM3Mjg3OjI0Njg3LDM3Mjg4OjI1NDE3LDM3Mjg5OjI2NDYzLDM3MjkwOjI4MjA0LDM3MjkxOjM2Mjc1LDM3MjkyOjM2ODk1LDM3MjkzOjIwNDM5LDM3Mjk0OjIzNjQ2LDM3Mjk1OjM2MDQyLDM3Mjk2OjI2MDYzLDM3Mjk3OjMyMTU0LDM3Mjk4OjIxMzMwLDM3Mjk5OjM0OTY2LDM3MzAwOjIwODU0LDM3MzAxOjI1NTM5LDM3MzAyOjIzMzg0LDM3MzAzOjIzNDAzLDM3MzA0OjIzNTYyLDM3MzA1OjI1NjEzLDM3MzA2OjI2NDQ5LDM3MzA3OjM2OTU2LDM3MzA4OjIwMTgyLDM3MzA5OjIyODEwLDM3MzEwOjIyODI2LDM3MzExOjI3NzYwLDM3MzEyOjM1NDA5LDM3MzEzOjIxODIyLDM3MzE0OjIyNTQ5LDM3MzE1OjIyOTQ5LDM3MzE2OjI0ODE2LDM3MzE3OjI1MTcxLDM3MzE4OjI2NTYxLDM3MzE5OjMzMzMzLDM3MzIwOjI2OTY1LDM3MzIxOjM4NDY0LDM3MzIyOjM5MzY0LDM3MzIzOjM5NDY0LDM3MzI0OjIwMzA3LDM3MzI1OjIyNTM0LDM3MzI2OjIzNTUwLDM3MzI3OjMyNzg0LDM3MzI4OjIzNzI5LDM3MzI5OjI0MTExLDM3MzMwOjI0NDUzLDM3MzMxOjI0NjA4LDM3MzMyOjI0OTA3LDM3MzMzOjI1MTQwLDM3MzM0OjI2MzY3LDM3MzM1OjI3ODg4LDM3MzM2OjI4MzgyLDM3MzM3OjMyOTc0LDM3MzM4OjMzMTUxLDM3MzM5OjMzNDkyLDM3MzQwOjM0OTU1LDM3MzQxOjM2MDI0LDM3MzQyOjM2ODY0LDM3MzQzOjM2OTEwLDM3MzQ0OjM4NTM4LDM3MzQ1OjQwNjY3LDM3MzQ2OjM5ODk5LDM3MzQ3OjIwMTk1LDM3MzQ4OjIxNDg4LDM3MzQ5OjIyODIzLDM3MzUwOjMxNTMyLDM3MzUxOjM3MjYxLDM3MzUyOjM4OTg4LDM3MzUzOjQwNDQxLDM3MzU0OjI4MzgxLDM3MzU1OjI4NzExLDM3MzU2OjIxMzMxLDM3MzU3OjIxODI4LDM3MzU4OjIzNDI5LDM3MzU5OjI1MTc2LDM3MzYwOjI1MjQ2LDM3MzYxOjI1Mjk5LDM3MzYyOjI3ODEwLDM3MzYzOjI4NjU1LDM3MzY0OjI5NzMwLDM3MzY1OjM1MzUxLDM3MzY2OjM3OTQ0LDM3MzY3OjI4NjA5LDM3MzY4OjM1NTgyLDM3MzY5OjMzNTkyLDM3MzcwOjIwOTY3LDM3MzcxOjM0NTUyLDM3MzcyOjIxNDgyLDM3NDQwOjIxNDgxLDM3NDQxOjIwMjk0LDM3NDQyOjM2OTQ4LDM3NDQzOjM2Nzg0LDM3NDQ0OjIyODkwLDM3NDQ1OjMzMDczLDM3NDQ2OjI0MDYxLDM3NDQ3OjMxNDY2LDM3NDQ4OjM2Nzk5LDM3NDQ5OjI2ODQyLDM3NDUwOjM1ODk1LDM3NDUxOjI5NDMyLDM3NDUyOjQwMDA4LDM3NDUzOjI3MTk3LDM3NDU0OjM1NTA0LDM3NDU1OjIwMDI1LDM3NDU2OjIxMzM2LDM3NDU3OjIyMDIyLDM3NDU4OjIyMzc0LDM3NDU5OjI1Mjg1LDM3NDYwOjI1NTA2LDM3NDYxOjI2MDg2LDM3NDYyOjI3NDcwLDM3NDYzOjI4MTI5LDM3NDY0OjI4MjUxLDM3NDY1OjI4ODQ1LDM3NDY2OjMwNzAxLDM3NDY3OjMxNDcxLDM3NDY4OjMxNjU4LDM3NDY5OjMyMTg3LDM3NDcwOjMyODI5LDM3NDcxOjMyOTY2LDM3NDcyOjM0NTA3LDM3NDczOjM1NDc3LDM3NDc0OjM3NzIzLDM3NDc1OjIyMjQzLDM3NDc2OjIyNzI3LDM3NDc3OjI0MzgyLDM3NDc4OjI2MDI5LDM3NDc5OjI2MjYyLDM3NDgwOjI3MjY0LDM3NDgxOjI3NTczLDM3NDgyOjMwMDA3LDM3NDgzOjM1NTI3LDM3NDg0OjIwNTE2LDM3NDg1OjMwNjkzLDM3NDg2OjIyMzIwLDM3NDg3OjI0MzQ3LDM3NDg4OjI0Njc3LDM3NDg5OjI2MjM0LDM3NDkwOjI3NzQ0LDM3NDkxOjMwMTk2LDM3NDkyOjMxMjU4LDM3NDkzOjMyNjIyLDM3NDk0OjMzMjY4LDM3NDk1OjM0NTg0LDM3NDk2OjM2OTMzLDM3NDk3OjM5MzQ3LDM3NDk4OjMxNjg5LDM3NDk5OjMwMDQ0LDM3NTAwOjMxNDgxLDM3NTAxOjMxNTY5LDM3NTAyOjMzOTg4LDM3NTA0OjM2ODgwLDM3NTA1OjMxMjA5LDM3NTA2OjMxMzc4LDM3NTA3OjMzNTkwLDM3NTA4OjIzMjY1LDM3NTA5OjMwNTI4LDM3NTEwOjIwMDEzLDM3NTExOjIwMjEwLDM3NTEyOjIzNDQ5LDM3NTEzOjI0NTQ0LDM3NTE0OjI1Mjc3LDM3NTE1OjI2MTcyLDM3NTE2OjI2NjA5LDM3NTE3OjI3ODgwLDM3NTE4OjM0NDExLDM3NTE5OjM0OTM1LDM3NTIwOjM1Mzg3LDM3NTIxOjM3MTk4LDM3NTIyOjM3NjE5LDM3NTIzOjM5Mzc2LDM3NTI0OjI3MTU5LDM3NTI1OjI4NzEwLDM3NTI2OjI5NDgyLDM3NTI3OjMzNTExLDM3NTI4OjMzODc5LDM3NTI5OjM2MDE1LDM3NTMwOjE5OTY5LDM3NTMxOjIwODA2LDM3NTMyOjIwOTM5LDM3NTMzOjIxODk5LDM3NTM0OjIzNTQxLDM3NTM1OjI0MDg2LDM3NTM2OjI0MTE1LDM3NTM3OjI0MTkzLDM3NTM4OjI0MzQwLDM3NTM5OjI0MzczLDM3NTQwOjI0NDI3LDM3NTQxOjI0NTAwLDM3NTQyOjI1MDc0LDM3NTQzOjI1MzYxLDM3NTQ0OjI2Mjc0LDM3NTQ1OjI2Mzk3LDM3NTQ2OjI4NTI2LDM3NTQ3OjI5MjY2LDM3NTQ4OjMwMDEwLDM3NTQ5OjMwNTIyLDM3NTUwOjMyODg0LDM3NTUxOjMzMDgxLDM3NTUyOjMzMTQ0LDM3NTUzOjM0Njc4LDM3NTU0OjM1NTE5LDM3NTU1OjM1NTQ4LDM3NTU2OjM2MjI5LDM3NTU3OjM2MzM5LDM3NTU4OjM3NTMwLDM3NTU5OjM4MjYzLDM3NTYwOjM4OTE0LDM3NTYxOjQwMTY1LDM3NTYyOjIxMTg5LDM3NTYzOjI1NDMxLDM3NTY0OjMwNDUyLDM3NTY1OjI2Mzg5LDM3NTY2OjI3Nzg0LDM3NTY3OjI5NjQ1LDM3NTY4OjM2MDM1LDM3NTY5OjM3ODA2LDM3NTcwOjM4NTE1LDM3NTcxOjI3OTQxLDM3NTcyOjIyNjg0LDM3NTczOjI2ODk0LDM3NTc0OjI3MDg0LDM3NTc1OjM2ODYxLDM3NTc2OjM3Nzg2LDM3NTc3OjMwMTcxLDM3NTc4OjM2ODkwLDM3NTc5OjIyNjE4LDM3NTgwOjI2NjI2LDM3NTgxOjI1NTI0LDM3NTgyOjI3MTMxLDM3NTgzOjIwMjkxLDM3NTg0OjI4NDYwLDM3NTg1OjI2NTg0LDM3NTg2OjM2Nzk1LDM3NTg3OjM0MDg2LDM3NTg4OjMyMTgwLDM3NTg5OjM3NzE2LDM3NTkwOjI2OTQzLDM3NTkxOjI4NTI4LDM3NTkyOjIyMzc4LDM3NTkzOjIyNzc1LDM3NTk0OjIzMzQwLDM3NTk1OjMyMDQ0LDM3NTk2OjI5MjI2LDM3NTk3OjIxNTE0LDM3NTk4OjM3MzQ3LDM3NTk5OjQwMzcyLDM3NjAwOjIwMTQxLDM3NjAxOjIwMzAyLDM3NjAyOjIwNTcyLDM3NjAzOjIwNTk3LDM3NjA0OjIxMDU5LDM3NjA1OjM1OTk4LDM3NjA2OjIxNTc2LDM3NjA3OjIyNTY0LDM3NjA4OjIzNDUwLDM3NjA5OjI0MDkzLDM3NjEwOjI0MjEzLDM3NjExOjI0MjM3LDM3NjEyOjI0MzExLDM3NjEzOjI0MzUxLDM3NjE0OjI0NzE2LDM3NjE1OjI1MjY5LDM3NjE2OjI1NDAyLDM3NjE3OjI1NTUyLDM3NjE4OjI2Nzk5LDM3NjE5OjI3NzEyLDM3NjIwOjMwODU1LDM3NjIxOjMxMTE4LDM3NjIyOjMxMjQzLDM3NjIzOjMyMjI0LDM3NjI0OjMzMzUxLDM3NjI1OjM1MzMwLDM3NjI2OjM1NTU4LDM3NjI3OjM2NDIwLDM3NjI4OjM2ODgzLDM3Njk2OjM3MDQ4LDM3Njk3OjM3MTY1LDM3Njk4OjM3MzM2LDM3Njk5OjQwNzE4LDM3NzAwOjI3ODc3LDM3NzAxOjI1Njg4LDM3NzAyOjI1ODI2LDM3NzAzOjI1OTczLDM3NzA0OjI4NDA0LDM3NzA1OjMwMzQwLDM3NzA2OjMxNTE1LDM3NzA3OjM2OTY5LDM3NzA4OjM3ODQxLDM3NzA5OjI4MzQ2LDM3NzEwOjIxNzQ2LDM3NzExOjI0NTA1LDM3NzEyOjI1NzY0LDM3NzEzOjM2Njg1LDM3NzE0OjM2ODQ1LDM3NzE1OjM3NDQ0LDM3NzE2OjIwODU2LDM3NzE3OjIyNjM1LDM3NzE4OjIyODI1LDM3NzE5OjIzNjM3LDM3NzIwOjI0MjE1LDM3NzIxOjI4MTU1LDM3NzIyOjMyMzk5LDM3NzIzOjI5OTgwLDM3NzI0OjM2MDI4LDM3NzI1OjM2NTc4LDM3NzI2OjM5MDAzLDM3NzI3OjI4ODU3LDM3NzI4OjIwMjUzLDM3NzI5OjI3NTgzLDM3NzMwOjI4NTkzLDM3NzMxOjNlNCwzNzczMjozODY1MSwzNzczMzoyMDgxNCwzNzczNDoyMTUyMCwzNzczNToyMjU4MSwzNzczNjoyMjYxNSwzNzczNzoyMjk1NiwzNzczODoyMzY0OCwzNzczOToyNDQ2NiwzNzc0MDoyNjAwNywzNzc0MToyNjQ2MCwzNzc0MjoyODE5MywzNzc0MzozMDMzMSwzNzc0NDozMzc1OSwzNzc0NTozNjA3NywzNzc0NjozNjg4NCwzNzc0NzozNzExNywzNzc0ODozNzcwOSwzNzc0OTozMDc1NywzNzc1MDozMDc3OCwzNzc1MToyMTE2MiwzNzc1MjoyNDIzMCwzNzc1MzoyMjMwMywzNzc1NDoyMjkwMCwzNzc1NToyNDU5NCwzNzc1NjoyMDQ5OCwzNzc1NzoyMDgyNiwzNzc1ODoyMDkwOCwzNzc2MDoyMDk0MSwzNzc2MToyMDk5MiwzNzc2MjoyMTc3NiwzNzc2MzoyMjYxMiwzNzc2NDoyMjYxNiwzNzc2NToyMjg3MSwzNzc2NjoyMzQ0NSwzNzc2NzoyMzc5OCwzNzc2ODoyMzk0NywzNzc2OToyNDc2NCwzNzc3MDoyNTIzNywzNzc3MToyNTY0NSwzNzc3MjoyNjQ4MSwzNzc3MzoyNjY5MSwzNzc3NDoyNjgxMiwzNzc3NToyNjg0NywzNzc3NjozMDQyMywzNzc3NzoyODEyMCwzNzc3ODoyODI3MSwzNzc3OToyODA1OSwzNzc4MDoyODc4MywzNzc4MToyOTEyOCwzNzc4MjoyNDQwMywzNzc4MzozMDE2OCwzNzc4NDozMTA5NSwzNzc4NTozMTU2MSwzNzc4NjozMTU3MiwzNzc4NzozMTU3MCwzNzc4ODozMTk1OCwzNzc4OTozMjExMywzNzc5MDoyMTA0MCwzNzc5MTozMzg5MSwzNzc5MjozNDE1MywzNzc5MzozNDI3NiwzNzc5NDozNTM0MiwzNzc5NTozNTU4OCwzNzc5NjozNTkxMCwzNzc5NzozNjM2NywzNzc5ODozNjg2NywzNzc5OTozNjg3OSwzNzgwMDozNzkxMywzNzgwMTozODUxOCwzNzgwMjozODk1NywzNzgwMzozOTQ3MiwzNzgwNDozODM2MCwzNzgwNToyMDY4NSwzNzgwNjoyMTIwNSwzNzgwNzoyMTUxNiwzNzgwODoyMjUzMCwzNzgwOToyMzU2NiwzNzgxMDoyNDk5OSwzNzgxMToyNTc1OCwzNzgxMjoyNzkzNCwzNzgxMzozMDY0MywzNzgxNDozMTQ2MSwzNzgxNTozMzAxMiwzNzgxNjozMzc5NiwzNzgxNzozNjk0NywzNzgxODozNzUwOSwzNzgxOToyMzc3NiwzNzgyMDo0MDE5OSwzNzgyMToyMTMxMSwzNzgyMjoyNDQ3MSwzNzgyMzoyNDQ5OSwzNzgyNDoyODA2MCwzNzgyNToyOTMwNSwzNzgyNjozMDU2MywzNzgyNzozMTE2NywzNzgyODozMTcxNiwzNzgyOToyNzYwMiwzNzgzMDoyOTQyMCwzNzgzMTozNTUwMSwzNzgzMjoyNjYyNywzNzgzMzoyNzIzMywzNzgzNDoyMDk4NCwzNzgzNTozMTM2MSwzNzgzNjoyNjkzMiwzNzgzNzoyMzYyNiwzNzgzODo0MDE4MiwzNzgzOTozMzUxNSwzNzg0MDoyMzQ5MywzNzg0MTozNzE5MywzNzg0MjoyODcwMiwzNzg0MzoyMjEzNiwzNzg0NDoyMzY2MywzNzg0NToyNDc3NSwzNzg0NjoyNTk1OCwzNzg0NzoyNzc4OCwzNzg0ODozNTkzMCwzNzg0OTozNjkyOSwzNzg1MDozODkzMSwzNzg1MToyMTU4NSwzNzg1MjoyNjMxMSwzNzg1MzozNzM4OSwzNzg1NDoyMjg1NiwzNzg1NTozNzAyNywzNzg1NjoyMDg2OSwzNzg1NzoyMDA0NSwzNzg1ODoyMDk3MCwzNzg1OTozNDIwMSwzNzg2MDozNTU5OCwzNzg2MToyODc2MCwzNzg2MjoyNTQ2NiwzNzg2MzozNzcwNywzNzg2NDoyNjk3OCwzNzg2NTozOTM0OCwzNzg2NjozMjI2MCwzNzg2NzozMDA3MSwzNzg2ODoyMTMzNSwzNzg2OToyNjk3NiwzNzg3MDozNjU3NSwzNzg3MTozODYyNywzNzg3MjoyNzc0MSwzNzg3MzoyMDEwOCwzNzg3NDoyMzYxMiwzNzg3NToyNDMzNiwzNzg3NjozNjg0MSwzNzg3NzoyMTI1MCwzNzg3ODozNjA0OSwzNzg3OTozMjkwNSwzNzg4MDozNDQyNSwzNzg4MToyNDMxOSwzNzg4MjoyNjA4NSwzNzg4MzoyMDA4MywzNzg4NDoyMDgzNywzNzk1MjoyMjkxNCwzNzk1MzoyMzYxNSwzNzk1NDozODg5NCwzNzk1NToyMDIxOSwzNzk1NjoyMjkyMiwzNzk1NzoyNDUyNSwzNzk1ODozNTQ2OSwzNzk1OToyODY0MSwzNzk2MDozMTE1MiwzNzk2MTozMTA3NCwzNzk2MjoyMzUyNywzNzk2MzozMzkwNSwzNzk2NDoyOTQ4MywzNzk2NToyOTEwNSwzNzk2NjoyNDE4MCwzNzk2NzoyNDU2NSwzNzk2ODoyNTQ2NywzNzk2OToyNTc1NCwzNzk3MDoyOTEyMywzNzk3MTozMTg5NiwzNzk3MjoyMDAzNSwzNzk3MzoyNDMxNiwzNzk3NDoyMDA0MywzNzk3NToyMjQ5MiwzNzk3NjoyMjE3OCwzNzk3NzoyNDc0NSwzNzk3ODoyODYxMSwzNzk3OTozMjAxMywzNzk4MDozMzAyMSwzNzk4MTozMzA3NSwzNzk4MjozMzIxNSwzNzk4MzozNjc4NiwzNzk4NDozNTIyMywzNzk4NTozNDQ2OCwzNzk4NjoyNDA1MiwzNzk4NzoyNTIyNiwzNzk4ODoyNTc3MywzNzk4OTozNTIwNywzNzk5MDoyNjQ4NywzNzk5MToyNzg3NCwzNzk5MjoyNzk2NiwzNzk5MzoyOTc1MCwzNzk5NDozMDc3MiwzNzk5NToyMzExMCwzNzk5NjozMjYyOSwzNzk5NzozMzQ1MywzNzk5ODozOTM0MCwzNzk5OToyMDQ2NywzOGUzOjI0MjU5LDM4MDAxOjI1MzA5LDM4MDAyOjI1NDkwLDM4MDAzOjI1OTQzLDM4MDA0OjI2NDc5LDM4MDA1OjMwNDAzLDM4MDA2OjI5MjYwLDM4MDA3OjMyOTcyLDM4MDA4OjMyOTU0LDM4MDA5OjM2NjQ5LDM4MDEwOjM3MTk3LDM4MDExOjIwNDkzLDM4MDEyOjIyNTIxLDM4MDEzOjIzMTg2LDM4MDE0OjI2NzU3LDM4MDE2OjI2OTk1LDM4MDE3OjI5MDI4LDM4MDE4OjI5NDM3LDM4MDE5OjM2MDIzLDM4MDIwOjIyNzcwLDM4MDIxOjM2MDY0LDM4MDIyOjM4NTA2LDM4MDIzOjM2ODg5LDM4MDI0OjM0Njg3LDM4MDI1OjMxMjA0LDM4MDI2OjMwNjk1LDM4MDI3OjMzODMzLDM4MDI4OjIwMjcxLDM4MDI5OjIxMDkzLDM4MDMwOjIxMzM4LDM4MDMxOjI1MjkzLDM4MDMyOjI2NTc1LDM4MDMzOjI3ODUwLDM4MDM0OjMwMzMzLDM4MDM1OjMxNjM2LDM4MDM2OjMxODkzLDM4MDM3OjMzMzM0LDM4MDM4OjM0MTgwLDM4MDM5OjM2ODQzLDM4MDQwOjI2MzMzLDM4MDQxOjI4NDQ4LDM4MDQyOjI5MTkwLDM4MDQzOjMyMjgzLDM4MDQ0OjMzNzA3LDM4MDQ1OjM5MzYxLDM4MDQ2OjQwNjE0LDM4MDQ3OjIwOTg5LDM4MDQ4OjMxNjY1LDM4MDQ5OjMwODM0LDM4MDUwOjMxNjcyLDM4MDUxOjMyOTAzLDM4MDUyOjMxNTYwLDM4MDUzOjI3MzY4LDM4MDU0OjI0MTYxLDM4MDU1OjMyOTA4LDM4MDU2OjMwMDMzLDM4MDU3OjMwMDQ4LDM4MDU4OjIwODQzLDM4MDU5OjM3NDc0LDM4MDYwOjI4MzAwLDM4MDYxOjMwMzMwLDM4MDYyOjM3MjcxLDM4MDYzOjM5NjU4LDM4MDY0OjIwMjQwLDM4MDY1OjMyNjI0LDM4MDY2OjI1MjQ0LDM4MDY3OjMxNTY3LDM4MDY4OjM4MzA5LDM4MDY5OjQwMTY5LDM4MDcwOjIyMTM4LDM4MDcxOjIyNjE3LDM4MDcyOjM0NTMyLDM4MDczOjM4NTg4LDM4MDc0OjIwMjc2LDM4MDc1OjIxMDI4LDM4MDc2OjIxMzIyLDM4MDc3OjIxNDUzLDM4MDc4OjIxNDY3LDM4MDc5OjI0MDcwLDM4MDgwOjI1NjQ0LDM4MDgxOjI2MDAxLDM4MDgyOjI2NDk1LDM4MDgzOjI3NzEwLDM4MDg0OjI3NzI2LDM4MDg1OjI5MjU2LDM4MDg2OjI5MzU5LDM4MDg3OjI5Njc3LDM4MDg4OjMwMDM2LDM4MDg5OjMyMzIxLDM4MDkwOjMzMzI0LDM4MDkxOjM0MjgxLDM4MDkyOjM2MDA5LDM4MDkzOjMxNjg0LDM4MDk0OjM3MzE4LDM4MDk1OjI5MDMzLDM4MDk2OjM4OTMwLDM4MDk3OjM5MTUxLDM4MDk4OjI1NDA1LDM4MDk5OjI2MjE3LDM4MTAwOjMwMDU4LDM4MTAxOjMwNDM2LDM4MTAyOjMwOTI4LDM4MTAzOjM0MTE1LDM4MTA0OjM0NTQyLDM4MTA1OjIxMjkwLDM4MTA2OjIxMzI5LDM4MTA3OjIxNTQyLDM4MTA4OjIyOTE1LDM4MTA5OjI0MTk5LDM4MTEwOjI0NDQ0LDM4MTExOjI0NzU0LDM4MTEyOjI1MTYxLDM4MTEzOjI1MjA5LDM4MTE0OjI1MjU5LDM4MTE1OjI2ZTMsMzgxMTY6Mjc2MDQsMzgxMTc6Mjc4NTIsMzgxMTg6MzAxMzAsMzgxMTk6MzAzODIsMzgxMjA6MzA4NjUsMzgxMjE6MzExOTIsMzgxMjI6MzIyMDMsMzgxMjM6MzI2MzEsMzgxMjQ6MzI5MzMsMzgxMjU6MzQ5ODcsMzgxMjY6MzU1MTMsMzgxMjc6MzYwMjcsMzgxMjg6MzY5OTEsMzgxMjk6Mzg3NTAsMzgxMzA6MzkxMzEsMzgxMzE6MjcxNDcsMzgxMzI6MzE4MDAsMzgxMzM6MjA2MzMsMzgxMzQ6MjM2MTQsMzgxMzU6MjQ0OTQsMzgxMzY6MjY1MDMsMzgxMzc6Mjc2MDgsMzgxMzg6Mjk3NDksMzgxMzk6MzA0NzMsMzgxNDA6MzI2NTQsMzgyMDg6NDA3NjMsMzgyMDk6MjY1NzAsMzgyMTA6MzEyNTUsMzgyMTE6MjEzMDUsMzgyMTI6MzAwOTEsMzgyMTM6Mzk2NjEsMzgyMTQ6MjQ0MjIsMzgyMTU6MzMxODEsMzgyMTY6MzM3NzcsMzgyMTc6MzI5MjAsMzgyMTg6MjQzODAsMzgyMTk6MjQ1MTcsMzgyMjA6MzAwNTAsMzgyMjE6MzE1NTgsMzgyMjI6MzY5MjQsMzgyMjM6MjY3MjcsMzgyMjQ6MjMwMTksMzgyMjU6MjMxOTUsMzgyMjY6MzIwMTYsMzgyMjc6MzAzMzQsMzgyMjg6MzU2MjgsMzgyMjk6MjA0NjksMzgyMzA6MjQ0MjYsMzgyMzE6MjcxNjEsMzgyMzI6Mjc3MDMsMzgyMzM6Mjg0MTgsMzgyMzQ6Mjk5MjIsMzgyMzU6MzEwODAsMzgyMzY6MzQ5MjAsMzgyMzc6MzU0MTMsMzgyMzg6MzU5NjEsMzgyMzk6MjQyODcsMzgyNDA6MjU1NTEsMzgyNDE6MzAxNDksMzgyNDI6MzExODYsMzgyNDM6MzM0OTUsMzgyNDQ6Mzc2NzIsMzgyNDU6Mzc2MTgsMzgyNDY6MzM5NDgsMzgyNDc6MzQ1NDEsMzgyNDg6Mzk5ODEsMzgyNDk6MjE2OTcsMzgyNTA6MjQ0MjgsMzgyNTE6MjU5OTYsMzgyNTI6Mjc5OTYsMzgyNTM6Mjg2OTMsMzgyNTQ6MzYwMDcsMzgyNTU6MzYwNTEsMzgyNTY6Mzg5NzEsMzgyNTc6MjU5MzUsMzgyNTg6Mjk5NDIsMzgyNTk6MTk5ODEsMzgyNjA6MjAxODQsMzgyNjE6MjI0OTYsMzgyNjI6MjI4MjcsMzgyNjM6MjMxNDIsMzgyNjQ6MjM1MDAsMzgyNjU6MjA5MDQsMzgyNjY6MjQwNjcsMzgyNjc6MjQyMjAsMzgyNjg6MjQ1OTgsMzgyNjk6MjUyMDYsMzgyNzA6MjU5NzUsMzgyNzI6MjYwMjMsMzgyNzM6MjYyMjIsMzgyNzQ6MjgwMTQsMzgyNzU6MjkyMzgsMzgyNzY6MzE1MjYsMzgyNzc6MzMxMDQsMzgyNzg6MzMxNzgsMzgyNzk6MzM0MzMsMzgyODA6MzU2NzYsMzgyODE6MzZlMywzODI4MjozNjA3MCwzODI4MzozNjIxMiwzODI4NDozODQyOCwzODI4NTozODQ2OCwzODI4NjoyMDM5OCwzODI4NzoyNTc3MSwzODI4ODoyNzQ5NCwzODI4OTozMzMxMCwzODI5MDozMzg4OSwzODI5MTozNDE1NCwzODI5MjozNzA5NiwzODI5MzoyMzU1MywzODI5NDoyNjk2MywzODI5NTozOTA4MCwzODI5NjozMzkxNCwzODI5NzozNDEzNSwzODI5ODoyMDIzOSwzODI5OToyMTEwMywzODMwMDoyNDQ4OSwzODMwMToyNDEzMywzODMwMjoyNjM4MSwzODMwMzozMTExOSwzODMwNDozMzE0NSwzODMwNTozNTA3OSwzODMwNjozNTIwNiwzODMwNzoyODE0OSwzODMwODoyNDM0MywzODMwOToyNTE3MywzODMxMDoyNzgzMiwzODMxMToyMDE3NSwzODMxMjoyOTI4OSwzODMxMzozOTgyNiwzODMxNDoyMDk5OCwzODMxNToyMTU2MywzODMxNjoyMjEzMiwzODMxNzoyMjcwNywzODMxODoyNDk5NiwzODMxOToyNTE5OCwzODMyMDoyODk1NCwzODMyMToyMjg5NCwzODMyMjozMTg4MSwzODMyMzozMTk2NiwzODMyNDozMjAyNywzODMyNTozODY0MCwzODMyNjoyNTk5MSwzODMyNzozMjg2MiwzODMyODoxOTk5MywzODMyOToyMDM0MSwzODMzMDoyMDg1MywzODMzMToyMjU5MiwzODMzMjoyNDE2MywzODMzMzoyNDE3OSwzODMzNDoyNDMzMCwzODMzNToyNjU2NCwzODMzNjoyMDAwNiwzODMzNzozNDEwOSwzODMzODozODI4MSwzODMzOTozODQ5MSwzODM0MDozMTg1OSwzODM0MTozODkxMywzODM0MjoyMDczMSwzODM0MzoyMjcyMSwzODM0NDozMDI5NCwzODM0NTozMDg4NywzODM0NjoyMTAyOSwzODM0NzozMDYyOSwzODM0ODozNDA2NSwzODM0OTozMTYyMiwzODM1MDoyMDU1OSwzODM1MToyMjc5MywzODM1MjoyOTI1NSwzODM1MzozMTY4NywzODM1NDozMjIzMiwzODM1NTozNjc5NCwzODM1NjozNjgyMCwzODM1NzozNjk0MSwzODM1ODoyMDQxNSwzODM1OToyMTE5MywzODM2MDoyMzA4MSwzODM2MToyNDMyMSwzODM2MjozODgyOSwzODM2MzoyMDQ0NSwzODM2NDozMzMwMywzODM2NTozNzYxMCwzODM2NjoyMjI3NSwzODM2NzoyNTQyOSwzODM2ODoyNzQ5NywzODM2OToyOTk5NSwzODM3MDozNTAzNiwzODM3MTozNjYyOCwzODM3MjozMTI5OCwzODM3MzoyMTIxNSwzODM3NDoyMjY3NSwzODM3NToyNDkxNywzODM3NjoyNTA5OCwzODM3NzoyNjI4NiwzODM3ODoyNzU5NywzODM3OTozMTgwNywzODM4MDozMzc2OSwzODM4MToyMDUxNSwzODM4MjoyMDQ3MiwzODM4MzoyMTI1MywzODM4NDoyMTU3NCwzODM4NToyMjU3NywzODM4NjoyMjg1NywzODM4NzoyMzQ1MywzODM4ODoyMzc5MiwzODM4OToyMzc5MSwzODM5MDoyMzg0OSwzODM5MToyNDIxNCwzODM5MjoyNTI2NSwzODM5MzoyNTQ0NywzODM5NDoyNTkxOCwzODM5NToyNjA0MSwzODM5NjoyNjM3OSwzODQ2NDoyNzg2MSwzODQ2NToyNzg3MywzODQ2NjoyODkyMSwzODQ2NzozMDc3MCwzODQ2ODozMjI5OSwzODQ2OTozMjk5MCwzODQ3MDozMzQ1OSwzODQ3MTozMzgwNCwzODQ3MjozNDAyOCwzODQ3MzozNDU2MiwzODQ3NDozNTA5MCwzODQ3NTozNTM3MCwzODQ3NjozNTkxNCwzODQ3NzozNzAzMCwzODQ3ODozNzU4NiwzODQ3OTozOTE2NSwzODQ4MDo0MDE3OSwzODQ4MTo0MDMwMCwzODQ4MjoyMDA0NywzODQ4MzoyMDEyOSwzODQ4NDoyMDYyMSwzODQ4NToyMTA3OCwzODQ4NjoyMjM0NiwzODQ4NzoyMjk1MiwzODQ4ODoyNDEyNSwzODQ4OToyNDUzNiwzODQ5MDoyNDUzNywzODQ5MToyNTE1MSwzODQ5MjoyNjI5MiwzODQ5MzoyNjM5NSwzODQ5NDoyNjU3NiwzODQ5NToyNjgzNCwzODQ5NjoyMDg4MiwzODQ5NzozMjAzMywzODQ5ODozMjkzOCwzODQ5OTozMzE5MiwzODUwMDozNTU4NCwzODUwMTozNTk4MCwzODUwMjozNjAzMSwzODUwMzozNzUwMiwzODUwNDozODQ1MCwzODUwNToyMTUzNiwzODUwNjozODk1NiwzODUwNzoyMTI3MSwzODUwODoyMDY5MywzODUwOToyMTM0MCwzODUxMDoyMjY5NiwzODUxMToyNTc3OCwzODUxMjoyNjQyMCwzODUxMzoyOTI4NywzODUxNDozMDU2NiwzODUxNTozMTMwMiwzODUxNjozNzM1MCwzODUxNzoyMTE4NywzODUxODoyNzgwOSwzODUxOToyNzUyNiwzODUyMDoyMjUyOCwzODUyMToyNDE0MCwzODUyMjoyMjg2OCwzODUyMzoyNjQxMiwzODUyNDozMjc2MywzODUyNToyMDk2MSwzODUyNjozMDQwNiwzODUyODoyNTcwNSwzODUyOTozMDk1MiwzODUzMDozOTc2NCwzODUzMTo0MDYzNSwzODUzMjoyMjQ3NSwzODUzMzoyMjk2OSwzODUzNDoyNjE1MSwzODUzNToyNjUyMiwzODUzNjoyNzU5OCwzODUzNzoyMTczNywzODUzODoyNzA5NywzODUzOToyNDE0OSwzODU0MDozMzE4MCwzODU0MToyNjUxNywzODU0MjozOTg1MCwzODU0MzoyNjYyMiwzODU0NDo0MDAxOCwzODU0NToyNjcxNywzODU0NjoyMDEzNCwzODU0NzoyMDQ1MSwzODU0ODoyMTQ0OCwzODU0OToyNTI3MywzODU1MDoyNjQxMSwzODU1MToyNzgxOSwzODU1MjozNjgwNCwzODU1MzoyMDM5NywzODU1NDozMjM2NSwzODU1NTo0MDYzOSwzODU1NjoxOTk3NSwzODU1NzoyNDkzMCwzODU1ODoyODI4OCwzODU1OToyODQ1OSwzODU2MDozNDA2NywzODU2MToyMTYxOSwzODU2MjoyNjQxMCwzODU2MzozOTc0OSwzODU2NDoyNDA1MSwzODU2NTozMTYzNywzODU2NjoyMzcyNCwzODU2NzoyMzQ5NCwzODU2ODozNDU4OCwzODU2OToyODIzNCwzODU3MDozNDAwMSwzODU3MTozMTI1MiwzODU3MjozMzAzMiwzODU3MzoyMjkzNywzODU3NDozMTg4NSwzODU3NToyNzY2NSwzODU3NjozMDQ5NiwzODU3NzoyMTIwOSwzODU3ODoyMjgxOCwzODU3OToyODk2MSwzODU4MDoyOTI3OSwzODU4MTozMDY4MywzODU4MjozODY5NSwzODU4Mzo0MDI4OSwzODU4NDoyNjg5MSwzODU4NToyMzE2NywzODU4NjoyMzA2NCwzODU4NzoyMDkwMSwzODU4ODoyMTUxNywzODU4OToyMTYyOSwzODU5MDoyNjEyNiwzODU5MTozMDQzMSwzODU5MjozNjg1NSwzODU5MzozNzUyOCwzODU5NDo0MDE4MCwzODU5NToyMzAxOCwzODU5NjoyOTI3NywzODU5NzoyODM1NywzODU5ODoyMDgxMywzODU5OToyNjgyNSwzODYwMDozMjE5MSwzODYwMTozMjIzNiwzODYwMjozODc1NCwzODYwMzo0MDYzNCwzODYwNDoyNTcyMCwzODYwNToyNzE2OSwzODYwNjozMzUzOCwzODYwNzoyMjkxNiwzODYwODoyMzM5MSwzODYwOToyNzYxMSwzODYxMDoyOTQ2NywzODYxMTozMDQ1MCwzODYxMjozMjE3OCwzODYxMzozMjc5MSwzODYxNDozMzk0NSwzODYxNToyMDc4NiwzODYxNjoyNjQwOCwzODYxNzo0MDY2NSwzODYxODozMDQ0NiwzODYxOToyNjQ2NiwzODYyMDoyMTI0NywzODYyMTozOTE3MywzODYyMjoyMzU4OCwzODYyMzoyNTE0NywzODYyNDozMTg3MCwzODYyNTozNjAxNiwzODYyNjoyMTgzOSwzODYyNzoyNDc1OCwzODYyODozMjAxMSwzODYyOTozODI3MiwzODYzMDoyMTI0OSwzODYzMToyMDA2MywzODYzMjoyMDkxOCwzODYzMzoyMjgxMiwzODYzNDoyOTI0MiwzODYzNTozMjgyMiwzODYzNjozNzMyNiwzODYzNzoyNDM1NywzODYzODozMDY5MCwzODYzOToyMTM4MCwzODY0MDoyNDQ0MSwzODY0MTozMjAwNCwzODY0MjozNDIyMCwzODY0MzozNTM3OSwzODY0NDozNjQ5MywzODY0NTozODc0MiwzODY0NjoyNjYxMSwzODY0NzozNDIyMiwzODY0ODozNzk3MSwzODY0OToyNDg0MSwzODY1MDoyNDg0MCwzODY1MToyNzgzMywzODY1MjozMDI5MCwzODcyMDozNTU2NSwzODcyMTozNjY2NCwzODcyMjoyMTgwNywzODcyMzoyMDMwNSwzODcyNDoyMDc3OCwzODcyNToyMTE5MSwzODcyNjoyMTQ1MSwzODcyNzoyMzQ2MSwzODcyODoyNDE4OSwzODcyOToyNDczNiwzODczMDoyNDk2MiwzODczMToyNTU1OCwzODczMjoyNjM3NywzODczMzoyNjU4NiwzODczNDoyODI2MywzODczNToyODA0NCwzODczNjoyOTQ5NCwzODczNzoyOTQ5NSwzODczODozMDAwMSwzODczOTozMTA1NiwzODc0MDozNTAyOSwzODc0MTozNTQ4MCwzODc0MjozNjkzOCwzODc0MzozNzAwOSwzODc0NDozNzEwOSwzODc0NTozODU5NiwzODc0NjozNDcwMSwzODc0NzoyMjgwNSwzODc0ODoyMDEwNCwzODc0OToyMDMxMywzODc1MDoxOTk4MiwzODc1MTozNTQ2NSwzODc1MjozNjY3MSwzODc1MzozODkyOCwzODc1NDoyMDY1MywzODc1NToyNDE4OCwzODc1NjoyMjkzNCwzODc1NzoyMzQ4MSwzODc1ODoyNDI0OCwzODc1OToyNTU2MiwzODc2MDoyNTU5NCwzODc2MToyNTc5MywzODc2MjoyNjMzMiwzODc2MzoyNjk1NCwzODc2NDoyNzA5NiwzODc2NToyNzkxNSwzODc2NjoyODM0MiwzODc2NzoyOTA3NiwzODc2ODoyOTk5MiwzODc2OTozMTQwNywzODc3MDozMjY1MCwzODc3MTozMjc2OCwzODc3MjozMzg2NSwzODc3MzozMzk5MywzODc3NDozNTIwMSwzODc3NTozNTYxNywzODc3NjozNjM2MiwzODc3NzozNjk2NSwzODc3ODozODUyNSwzODc3OTozOTE3OCwzODc4MDoyNDk1OCwzODc4MToyNTIzMywzODc4MjoyNzQ0MiwzODc4NDoyNzc3OSwzODc4NToyODAyMCwzODc4NjozMjcxNiwzODc4NzozMjc2NCwzODc4ODoyODA5NiwzODc4OTozMjY0NSwzODc5MDozNDc0NiwzODc5MTozNTA2NCwzODc5MjoyNjQ2OSwzODc5MzozMzcxMywzODc5NDozODk3MiwzODc5NTozODY0NywzODc5NjoyNzkzMSwzODc5NzozMjA5NywzODc5ODozMzg1MywzODc5OTozNzIyNiwzODgwMDoyMDA4MSwzODgwMToyMTM2NSwzODgwMjoyMzg4OCwzODgwMzoyNzM5NiwzODgwNDoyODY1MSwzODgwNTozNDI1MywzODgwNjozNDM0OSwzODgwNzozNTIzOSwzODgwODoyMTAzMywzODgwOToyMTUxOSwzODgxMDoyMzY1MywzODgxMToyNjQ0NiwzODgxMjoyNjc5MiwzODgxMzoyOTcwMiwzODgxNDoyOTgyNywzODgxNTozMDE3OCwzODgxNjozNTAyMywzODgxNzozNTA0MSwzODgxODozNzMyNCwzODgxOTozODYyNiwzODgyMDozODUyMCwzODgyMToyNDQ1OSwzODgyMjoyOTU3NSwzODgyMzozMTQzNSwzODgyNDozMzg3MCwzODgyNToyNTUwNCwzODgyNjozMDA1MywzODgyNzoyMTEyOSwzODgyODoyNzk2OSwzODgyOToyODMxNiwzODgzMDoyOTcwNSwzODgzMTozMDA0MSwzODgzMjozMDgyNywzODgzMzozMTg5MCwzODgzNDozODUzNCwzODgzNTozMTQ1MiwzODgzNjo0MDg0NSwzODgzNzoyMDQwNiwzODgzODoyNDk0MiwzODgzOToyNjA1MywzODg0MDozNDM5NiwzODg0MToyMDEwMiwzODg0MjoyMDE0MiwzODg0MzoyMDY5OCwzODg0NDoyMDAwMSwzODg0NToyMDk0MCwzODg0NjoyMzUzNCwzODg0NzoyNjAwOSwzODg0ODoyNjc1MywzODg0OToyODA5MiwzODg1MDoyOTQ3MSwzODg1MTozMDI3NCwzODg1MjozMDYzNywzODg1MzozMTI2MCwzODg1NDozMTk3NSwzODg1NTozMzM5MSwzODg1NjozNTUzOCwzODg1NzozNjk4OCwzODg1ODozNzMyNywzODg1OTozODUxNywzODg2MDozODkzNiwzODg2MToyMTE0NywzODg2MjozMjIwOSwzODg2MzoyMDUyMywzODg2NDoyMTQwMCwzODg2NToyNjUxOSwzODg2NjoyODEwNywzODg2NzoyOTEzNiwzODg2ODoyOTc0NywzODg2OTozMzI1NiwzODg3MDozNjY1MCwzODg3MTozODU2MywzODg3Mjo0MDAyMywzODg3Mzo0MDYwNywzODg3NDoyOTc5MiwzODg3NToyMjU5MywzODg3NjoyODA1NywzODg3NzozMjA0NywzODg3ODozOTAwNiwzODg3OToyMDE5NiwzODg4MDoyMDI3OCwzODg4MToyMDM2MywzODg4MjoyMDkxOSwzODg4MzoyMTE2OSwzODg4NDoyMzk5NCwzODg4NToyNDYwNCwzODg4NjoyOTYxOCwzODg4NzozMTAzNiwzODg4ODozMzQ5MSwzODg4OTozNzQyOCwzODg5MDozODU4MywzODg5MTozODY0NiwzODg5MjozODY2NiwzODg5Mzo0MDU5OSwzODg5NDo0MDgwMiwzODg5NToyNjI3OCwzODg5NjoyNzUwOCwzODg5NzoyMTAxNSwzODg5ODoyMTE1NSwzODg5OToyODg3MiwzODkwMDozNTAxMCwzODkwMToyNDI2NSwzODkwMjoyNDY1MSwzODkwMzoyNDk3NiwzODkwNDoyODQ1MSwzODkwNToyOTAwMSwzODkwNjozMTgwNiwzODkwNzozMjI0NCwzODkwODozMjg3OSwzODk3NjozNDAzMCwzODk3NzozNjg5OSwzODk3ODozNzY3NiwzODk3OToyMTU3MCwzODk4MDozOTc5MSwzODk4MToyNzM0NywzODk4MjoyODgwOSwzODk4MzozNjAzNCwzODk4NDozNjMzNSwzODk4NTozODcwNiwzODk4NjoyMTE3MiwzODk4NzoyMzEwNSwzODk4ODoyNDI2NiwzODk4OToyNDMyNCwzODk5MDoyNjM5MSwzODk5MToyNzAwNCwzODk5MjoyNzAyOCwzODk5MzoyODAxMCwzODk5NDoyODQzMSwzODk5NToyOTI4MiwzODk5NjoyOTQzNiwzODk5NzozMTcyNSwzODk5ODozMjc2OSwzODk5OTozMjg5NCwzOWUzOjM0NjM1LDM5MDAxOjM3MDcwLDM5MDAyOjIwODQ1LDM5MDAzOjQwNTk1LDM5MDA0OjMxMTA4LDM5MDA1OjMyOTA3LDM5MDA2OjM3NjgyLDM5MDA3OjM1NTQyLDM5MDA4OjIwNTI1LDM5MDA5OjIxNjQ0LDM5MDEwOjM1NDQxLDM5MDExOjI3NDk4LDM5MDEyOjM2MDM2LDM5MDEzOjMzMDMxLDM5MDE0OjI0Nzg1LDM5MDE1OjI2NTI4LDM5MDE2OjQwNDM0LDM5MDE3OjIwMTIxLDM5MDE4OjIwMTIwLDM5MDE5OjM5OTUyLDM5MDIwOjM1NDM1LDM5MDIxOjM0MjQxLDM5MDIyOjM0MTUyLDM5MDIzOjI2ODgwLDM5MDI0OjI4Mjg2LDM5MDI1OjMwODcxLDM5MDI2OjMzMTA5LDM5MDcxOjI0MzMyLDM5MDcyOjE5OTg0LDM5MDczOjE5OTg5LDM5MDc0OjIwMDEwLDM5MDc1OjIwMDE3LDM5MDc2OjIwMDIyLDM5MDc3OjIwMDI4LDM5MDc4OjIwMDMxLDM5MDc5OjIwMDM0LDM5MDgwOjIwMDU0LDM5MDgxOjIwMDU2LDM5MDgyOjIwMDk4LDM5MDgzOjIwMTAxLDM5MDg0OjM1OTQ3LDM5MDg1OjIwMTA2LDM5MDg2OjMzMjk4LDM5MDg3OjI0MzMzLDM5MDg4OjIwMTEwLDM5MDg5OjIwMTI2LDM5MDkwOjIwMTI3LDM5MDkxOjIwMTI4LDM5MDkyOjIwMTMwLDM5MDkzOjIwMTQ0LDM5MDk0OjIwMTQ3LDM5MDk1OjIwMTUwLDM5MDk2OjIwMTc0LDM5MDk3OjIwMTczLDM5MDk4OjIwMTY0LDM5MDk5OjIwMTY2LDM5MTAwOjIwMTYyLDM5MTAxOjIwMTgzLDM5MTAyOjIwMTkwLDM5MTAzOjIwMjA1LDM5MTA0OjIwMTkxLDM5MTA1OjIwMjE1LDM5MTA2OjIwMjMzLDM5MTA3OjIwMzE0LDM5MTA4OjIwMjcyLDM5MTA5OjIwMzE1LDM5MTEwOjIwMzE3LDM5MTExOjIwMzExLDM5MTEyOjIwMjk1LDM5MTEzOjIwMzQyLDM5MTE0OjIwMzYwLDM5MTE1OjIwMzY3LDM5MTE2OjIwMzc2LDM5MTE3OjIwMzQ3LDM5MTE4OjIwMzI5LDM5MTE5OjIwMzM2LDM5MTIwOjIwMzY5LDM5MTIxOjIwMzM1LDM5MTIyOjIwMzU4LDM5MTIzOjIwMzc0LDM5MTI0OjIwNzYwLDM5MTI1OjIwNDM2LDM5MTI2OjIwNDQ3LDM5MTI3OjIwNDMwLDM5MTI4OjIwNDQwLDM5MTI5OjIwNDQzLDM5MTMwOjIwNDMzLDM5MTMxOjIwNDQyLDM5MTMyOjIwNDMyLDM5MTMzOjIwNDUyLDM5MTM0OjIwNDUzLDM5MTM1OjIwNTA2LDM5MTM2OjIwNTIwLDM5MTM3OjIwNTAwLDM5MTM4OjIwNTIyLDM5MTM5OjIwNTE3LDM5MTQwOjIwNDg1LDM5MTQxOjIwMjUyLDM5MTQyOjIwNDcwLDM5MTQzOjIwNTEzLDM5MTQ0OjIwNTIxLDM5MTQ1OjIwNTI0LDM5MTQ2OjIwNDc4LDM5MTQ3OjIwNDYzLDM5MTQ4OjIwNDk3LDM5MTQ5OjIwNDg2LDM5MTUwOjIwNTQ3LDM5MTUxOjIwNTUxLDM5MTUyOjI2MzcxLDM5MTUzOjIwNTY1LDM5MTU0OjIwNTYwLDM5MTU1OjIwNTUyLDM5MTU2OjIwNTcwLDM5MTU3OjIwNTY2LDM5MTU4OjIwNTg4LDM5MTU5OjIwNjAwLDM5MTYwOjIwNjA4LDM5MTYxOjIwNjM0LDM5MTYyOjIwNjEzLDM5MTYzOjIwNjYwLDM5MTY0OjIwNjU4LDM5MjMyOjIwNjgxLDM5MjMzOjIwNjgyLDM5MjM0OjIwNjU5LDM5MjM1OjIwNjc0LDM5MjM2OjIwNjk0LDM5MjM3OjIwNzAyLDM5MjM4OjIwNzA5LDM5MjM5OjIwNzE3LDM5MjQwOjIwNzA3LDM5MjQxOjIwNzE4LDM5MjQyOjIwNzI5LDM5MjQzOjIwNzI1LDM5MjQ0OjIwNzQ1LDM5MjQ1OjIwNzM3LDM5MjQ2OjIwNzM4LDM5MjQ3OjIwNzU4LDM5MjQ4OjIwNzU3LDM5MjQ5OjIwNzU2LDM5MjUwOjIwNzYyLDM5MjUxOjIwNzY5LDM5MjUyOjIwNzk0LDM5MjUzOjIwNzkxLDM5MjU0OjIwNzk2LDM5MjU1OjIwNzk1LDM5MjU2OjIwNzk5LDM5MjU3OjIwODAwLDM5MjU4OjIwODE4LDM5MjU5OjIwODEyLDM5MjYwOjIwODIwLDM5MjYxOjIwODM0LDM5MjYyOjMxNDgwLDM5MjYzOjIwODQxLDM5MjY0OjIwODQyLDM5MjY1OjIwODQ2LDM5MjY2OjIwODY0LDM5MjY3OjIwODY2LDM5MjY4OjIyMjMyLDM5MjY5OjIwODc2LDM5MjcwOjIwODczLDM5MjcxOjIwODc5LDM5MjcyOjIwODgxLDM5MjczOjIwODgzLDM5Mjc0OjIwODg1LDM5Mjc1OjIwODg2LDM5Mjc2OjIwOTAwLDM5Mjc3OjIwOTAyLDM5Mjc4OjIwODk4LDM5Mjc5OjIwOTA1LDM5MjgwOjIwOTA2LDM5MjgxOjIwOTA3LDM5MjgyOjIwOTE1LDM5MjgzOjIwOTEzLDM5Mjg0OjIwOTE0LDM5Mjg1OjIwOTEyLDM5Mjg2OjIwOTE3LDM5Mjg3OjIwOTI1LDM5Mjg4OjIwOTMzLDM5Mjg5OjIwOTM3LDM5MjkwOjIwOTU1LDM5MjkxOjIwOTYwLDM5MjkyOjM0Mzg5LDM5MjkzOjIwOTY5LDM5Mjk0OjIwOTczLDM5Mjk2OjIwOTc2LDM5Mjk3OjIwOTgxLDM5Mjk4OjIwOTkwLDM5Mjk5OjIwOTk2LDM5MzAwOjIxMDAzLDM5MzAxOjIxMDEyLDM5MzAyOjIxMDA2LDM5MzAzOjIxMDMxLDM5MzA0OjIxMDM0LDM5MzA1OjIxMDM4LDM5MzA2OjIxMDQzLDM5MzA3OjIxMDQ5LDM5MzA4OjIxMDcxLDM5MzA5OjIxMDYwLDM5MzEwOjIxMDY3LDM5MzExOjIxMDY4LDM5MzEyOjIxMDg2LDM5MzEzOjIxMDc2LDM5MzE0OjIxMDk4LDM5MzE1OjIxMTA4LDM5MzE2OjIxMDk3LDM5MzE3OjIxMTA3LDM5MzE4OjIxMTE5LDM5MzE5OjIxMTE3LDM5MzIwOjIxMTMzLDM5MzIxOjIxMTQwLDM5MzIyOjIxMTM4LDM5MzIzOjIxMTA1LDM5MzI0OjIxMTI4LDM5MzI1OjIxMTM3LDM5MzI2OjM2Nzc2LDM5MzI3OjM2Nzc1LDM5MzI4OjIxMTY0LDM5MzI5OjIxMTY1LDM5MzMwOjIxMTgwLDM5MzMxOjIxMTczLDM5MzMyOjIxMTg1LDM5MzMzOjIxMTk3LDM5MzM0OjIxMjA3LDM5MzM1OjIxMjE0LDM5MzM2OjIxMjE5LDM5MzM3OjIxMjIyLDM5MzM4OjM5MTQ5LDM5MzM5OjIxMjE2LDM5MzQwOjIxMjM1LDM5MzQxOjIxMjM3LDM5MzQyOjIxMjQwLDM5MzQzOjIxMjQxLDM5MzQ0OjIxMjU0LDM5MzQ1OjIxMjU2LDM5MzQ2OjMwMDA4LDM5MzQ3OjIxMjYxLDM5MzQ4OjIxMjY0LDM5MzQ5OjIxMjYzLDM5MzUwOjIxMjY5LDM5MzUxOjIxMjc0LDM5MzUyOjIxMjgzLDM5MzUzOjIxMjk1LDM5MzU0OjIxMjk3LDM5MzU1OjIxMjk5LDM5MzU2OjIxMzA0LDM5MzU3OjIxMzEyLDM5MzU4OjIxMzE4LDM5MzU5OjIxMzE3LDM5MzYwOjE5OTkxLDM5MzYxOjIxMzIxLDM5MzYyOjIxMzI1LDM5MzYzOjIwOTUwLDM5MzY0OjIxMzQyLDM5MzY1OjIxMzUzLDM5MzY2OjIxMzU4LDM5MzY3OjIyODA4LDM5MzY4OjIxMzcxLDM5MzY5OjIxMzY3LDM5MzcwOjIxMzc4LDM5MzcxOjIxMzk4LDM5MzcyOjIxNDA4LDM5MzczOjIxNDE0LDM5Mzc0OjIxNDEzLDM5Mzc1OjIxNDIyLDM5Mzc2OjIxNDI0LDM5Mzc3OjIxNDMwLDM5Mzc4OjIxNDQzLDM5Mzc5OjMxNzYyLDM5MzgwOjM4NjE3LDM5MzgxOjIxNDcxLDM5MzgyOjI2MzY0LDM5MzgzOjI5MTY2LDM5Mzg0OjIxNDg2LDM5Mzg1OjIxNDgwLDM5Mzg2OjIxNDg1LDM5Mzg3OjIxNDk4LDM5Mzg4OjIxNTA1LDM5Mzg5OjIxNTY1LDM5MzkwOjIxNTY4LDM5MzkxOjIxNTQ4LDM5MzkyOjIxNTQ5LDM5MzkzOjIxNTY0LDM5Mzk0OjIxNTUwLDM5Mzk1OjIxNTU4LDM5Mzk2OjIxNTQ1LDM5Mzk3OjIxNTMzLDM5Mzk4OjIxNTgyLDM5Mzk5OjIxNjQ3LDM5NDAwOjIxNjIxLDM5NDAxOjIxNjQ2LDM5NDAyOjIxNTk5LDM5NDAzOjIxNjE3LDM5NDA0OjIxNjIzLDM5NDA1OjIxNjE2LDM5NDA2OjIxNjUwLDM5NDA3OjIxNjI3LDM5NDA4OjIxNjMyLDM5NDA5OjIxNjIyLDM5NDEwOjIxNjM2LDM5NDExOjIxNjQ4LDM5NDEyOjIxNjM4LDM5NDEzOjIxNzAzLDM5NDE0OjIxNjY2LDM5NDE1OjIxNjg4LDM5NDE2OjIxNjY5LDM5NDE3OjIxNjc2LDM5NDE4OjIxNzAwLDM5NDE5OjIxNzA0LDM5NDIwOjIxNjcyLDM5NDg4OjIxNjc1LDM5NDg5OjIxNjk4LDM5NDkwOjIxNjY4LDM5NDkxOjIxNjk0LDM5NDkyOjIxNjkyLDM5NDkzOjIxNzIwLDM5NDk0OjIxNzMzLDM5NDk1OjIxNzM0LDM5NDk2OjIxNzc1LDM5NDk3OjIxNzgwLDM5NDk4OjIxNzU3LDM5NDk5OjIxNzQyLDM5NTAwOjIxNzQxLDM5NTAxOjIxNzU0LDM5NTAyOjIxNzMwLDM5NTAzOjIxODE3LDM5NTA0OjIxODI0LDM5NTA1OjIxODU5LDM5NTA2OjIxODM2LDM5NTA3OjIxODA2LDM5NTA4OjIxODUyLDM5NTA5OjIxODI5LDM5NTEwOjIxODQ2LDM5NTExOjIxODQ3LDM5NTEyOjIxODE2LDM5NTEzOjIxODExLDM5NTE0OjIxODUzLDM5NTE1OjIxOTEzLDM5NTE2OjIxODg4LDM5NTE3OjIxNjc5LDM5NTE4OjIxODk4LDM5NTE5OjIxOTE5LDM5NTIwOjIxODgzLDM5NTIxOjIxODg2LDM5NTIyOjIxOTEyLDM5NTIzOjIxOTE4LDM5NTI0OjIxOTM0LDM5NTI1OjIxODg0LDM5NTI2OjIxODkxLDM5NTI3OjIxOTI5LDM5NTI4OjIxODk1LDM5NTI5OjIxOTI4LDM5NTMwOjIxOTc4LDM5NTMxOjIxOTU3LDM5NTMyOjIxOTgzLDM5NTMzOjIxOTU2LDM5NTM0OjIxOTgwLDM5NTM1OjIxOTg4LDM5NTM2OjIxOTcyLDM5NTM3OjIyMDM2LDM5NTM4OjIyMDA3LDM5NTM5OjIyMDM4LDM5NTQwOjIyMDE0LDM5NTQxOjIyMDEzLDM5NTQyOjIyMDQzLDM5NTQzOjIyMDA5LDM5NTQ0OjIyMDk0LDM5NTQ1OjIyMDk2LDM5NTQ2OjI5MTUxLDM5NTQ3OjIyMDY4LDM5NTQ4OjIyMDcwLDM5NTQ5OjIyMDY2LDM5NTUwOjIyMDcyLDM5NTUyOjIyMTIzLDM5NTUzOjIyMTE2LDM5NTU0OjIyMDYzLDM5NTU1OjIyMTI0LDM5NTU2OjIyMTIyLDM5NTU3OjIyMTUwLDM5NTU4OjIyMTQ0LDM5NTU5OjIyMTU0LDM5NTYwOjIyMTc2LDM5NTYxOjIyMTY0LDM5NTYyOjIyMTU5LDM5NTYzOjIyMTgxLDM5NTY0OjIyMTkwLDM5NTY1OjIyMTk4LDM5NTY2OjIyMTk2LDM5NTY3OjIyMjEwLDM5NTY4OjIyMjA0LDM5NTY5OjIyMjA5LDM5NTcwOjIyMjExLDM5NTcxOjIyMjA4LDM5NTcyOjIyMjE2LDM5NTczOjIyMjIyLDM5NTc0OjIyMjI1LDM5NTc1OjIyMjI3LDM5NTc2OjIyMjMxLDM5NTc3OjIyMjU0LDM5NTc4OjIyMjY1LDM5NTc5OjIyMjcyLDM5NTgwOjIyMjcxLDM5NTgxOjIyMjc2LDM5NTgyOjIyMjgxLDM5NTgzOjIyMjgwLDM5NTg0OjIyMjgzLDM5NTg1OjIyMjg1LDM5NTg2OjIyMjkxLDM5NTg3OjIyMjk2LDM5NTg4OjIyMjk0LDM5NTg5OjIxOTU5LDM5NTkwOjIyMzAwLDM5NTkxOjIyMzEwLDM5NTkyOjIyMzI3LDM5NTkzOjIyMzI4LDM5NTk0OjIyMzUwLDM5NTk1OjIyMzMxLDM5NTk2OjIyMzM2LDM5NTk3OjIyMzUxLDM5NTk4OjIyMzc3LDM5NTk5OjIyNDY0LDM5NjAwOjIyNDA4LDM5NjAxOjIyMzY5LDM5NjAyOjIyMzk5LDM5NjAzOjIyNDA5LDM5NjA0OjIyNDE5LDM5NjA1OjIyNDMyLDM5NjA2OjIyNDUxLDM5NjA3OjIyNDM2LDM5NjA4OjIyNDQyLDM5NjA5OjIyNDQ4LDM5NjEwOjIyNDY3LDM5NjExOjIyNDcwLDM5NjEyOjIyNDg0LDM5NjEzOjIyNDgyLDM5NjE0OjIyNDgzLDM5NjE1OjIyNTM4LDM5NjE2OjIyNDg2LDM5NjE3OjIyNDk5LDM5NjE4OjIyNTM5LDM5NjE5OjIyNTUzLDM5NjIwOjIyNTU3LDM5NjIxOjIyNjQyLDM5NjIyOjIyNTYxLDM5NjIzOjIyNjI2LDM5NjI0OjIyNjAzLDM5NjI1OjIyNjQwLDM5NjI2OjI3NTg0LDM5NjI3OjIyNjEwLDM5NjI4OjIyNTg5LDM5NjI5OjIyNjQ5LDM5NjMwOjIyNjYxLDM5NjMxOjIyNzEzLDM5NjMyOjIyNjg3LDM5NjMzOjIyNjk5LDM5NjM0OjIyNzE0LDM5NjM1OjIyNzUwLDM5NjM2OjIyNzE1LDM5NjM3OjIyNzEyLDM5NjM4OjIyNzAyLDM5NjM5OjIyNzI1LDM5NjQwOjIyNzM5LDM5NjQxOjIyNzM3LDM5NjQyOjIyNzQzLDM5NjQzOjIyNzQ1LDM5NjQ0OjIyNzQ0LDM5NjQ1OjIyNzU3LDM5NjQ2OjIyNzQ4LDM5NjQ3OjIyNzU2LDM5NjQ4OjIyNzUxLDM5NjQ5OjIyNzY3LDM5NjUwOjIyNzc4LDM5NjUxOjIyNzc3LDM5NjUyOjIyNzc5LDM5NjUzOjIyNzgwLDM5NjU0OjIyNzgxLDM5NjU1OjIyNzg2LDM5NjU2OjIyNzk0LDM5NjU3OjIyODAwLDM5NjU4OjIyODExLDM5NjU5OjI2NzkwLDM5NjYwOjIyODIxLDM5NjYxOjIyODI4LDM5NjYyOjIyODI5LDM5NjYzOjIyODM0LDM5NjY0OjIyODQwLDM5NjY1OjIyODQ2LDM5NjY2OjMxNDQyLDM5NjY3OjIyODY5LDM5NjY4OjIyODY0LDM5NjY5OjIyODYyLDM5NjcwOjIyODc0LDM5NjcxOjIyODcyLDM5NjcyOjIyODgyLDM5NjczOjIyODgwLFxcbjM5Njc0OjIyODg3LDM5Njc1OjIyODkyLDM5Njc2OjIyODg5LDM5NzQ0OjIyOTA0LDM5NzQ1OjIyOTEzLDM5NzQ2OjIyOTQxLDM5NzQ3OjIwMzE4LDM5NzQ4OjIwMzk1LDM5NzQ5OjIyOTQ3LDM5NzUwOjIyOTYyLDM5NzUxOjIyOTgyLDM5NzUyOjIzMDE2LDM5NzUzOjIzMDA0LDM5NzU0OjIyOTI1LDM5NzU1OjIzMDAxLDM5NzU2OjIzMDAyLDM5NzU3OjIzMDc3LDM5NzU4OjIzMDcxLDM5NzU5OjIzMDU3LDM5NzYwOjIzMDY4LDM5NzYxOjIzMDQ5LDM5NzYyOjIzMDY2LDM5NzYzOjIzMTA0LDM5NzY0OjIzMTQ4LDM5NzY1OjIzMTEzLDM5NzY2OjIzMDkzLDM5NzY3OjIzMDk0LDM5NzY4OjIzMTM4LDM5NzY5OjIzMTQ2LDM5NzcwOjIzMTk0LDM5NzcxOjIzMjI4LDM5NzcyOjIzMjMwLDM5NzczOjIzMjQzLDM5Nzc0OjIzMjM0LDM5Nzc1OjIzMjI5LDM5Nzc2OjIzMjY3LDM5Nzc3OjIzMjU1LDM5Nzc4OjIzMjcwLDM5Nzc5OjIzMjczLDM5NzgwOjIzMjU0LDM5NzgxOjIzMjkwLDM5NzgyOjIzMjkxLDM5NzgzOjIzMzA4LDM5Nzg0OjIzMzA3LDM5Nzg1OjIzMzE4LDM5Nzg2OjIzMzQ2LDM5Nzg3OjIzMjQ4LDM5Nzg4OjIzMzM4LDM5Nzg5OjIzMzUwLDM5NzkwOjIzMzU4LDM5NzkxOjIzMzYzLDM5NzkyOjIzMzY1LDM5NzkzOjIzMzYwLDM5Nzk0OjIzMzc3LDM5Nzk1OjIzMzgxLDM5Nzk2OjIzMzg2LDM5Nzk3OjIzMzg3LDM5Nzk4OjIzMzk3LDM5Nzk5OjIzNDAxLDM5ODAwOjIzNDA4LDM5ODAxOjIzNDExLDM5ODAyOjIzNDEzLDM5ODAzOjIzNDE2LDM5ODA0OjI1OTkyLDM5ODA1OjIzNDE4LDM5ODA2OjIzNDI0LDM5ODA4OjIzNDI3LDM5ODA5OjIzNDYyLDM5ODEwOjIzNDgwLDM5ODExOjIzNDkxLDM5ODEyOjIzNDk1LDM5ODEzOjIzNDk3LDM5ODE0OjIzNTA4LDM5ODE1OjIzNTA0LDM5ODE2OjIzNTI0LDM5ODE3OjIzNTI2LDM5ODE4OjIzNTIyLDM5ODE5OjIzNTE4LDM5ODIwOjIzNTI1LDM5ODIxOjIzNTMxLDM5ODIyOjIzNTM2LDM5ODIzOjIzNTQyLDM5ODI0OjIzNTM5LDM5ODI1OjIzNTU3LDM5ODI2OjIzNTU5LDM5ODI3OjIzNTYwLDM5ODI4OjIzNTY1LDM5ODI5OjIzNTcxLDM5ODMwOjIzNTg0LDM5ODMxOjIzNTg2LDM5ODMyOjIzNTkyLDM5ODMzOjIzNjA4LDM5ODM0OjIzNjA5LDM5ODM1OjIzNjE3LDM5ODM2OjIzNjIyLDM5ODM3OjIzNjMwLDM5ODM4OjIzNjM1LDM5ODM5OjIzNjMyLDM5ODQwOjIzNjMxLDM5ODQxOjIzNDA5LDM5ODQyOjIzNjYwLDM5ODQzOjIzNjYyLDM5ODQ0OjIwMDY2LDM5ODQ1OjIzNjcwLDM5ODQ2OjIzNjczLDM5ODQ3OjIzNjkyLDM5ODQ4OjIzNjk3LDM5ODQ5OjIzNzAwLDM5ODUwOjIyOTM5LDM5ODUxOjIzNzIzLDM5ODUyOjIzNzM5LDM5ODUzOjIzNzM0LDM5ODU0OjIzNzQwLDM5ODU1OjIzNzM1LDM5ODU2OjIzNzQ5LDM5ODU3OjIzNzQyLDM5ODU4OjIzNzUxLDM5ODU5OjIzNzY5LDM5ODYwOjIzNzg1LDM5ODYxOjIzODA1LDM5ODYyOjIzODAyLDM5ODYzOjIzNzg5LDM5ODY0OjIzOTQ4LDM5ODY1OjIzNzg2LDM5ODY2OjIzODE5LDM5ODY3OjIzODI5LDM5ODY4OjIzODMxLDM5ODY5OjIzOTAwLDM5ODcwOjIzODM5LDM5ODcxOjIzODM1LDM5ODcyOjIzODI1LDM5ODczOjIzODI4LDM5ODc0OjIzODQyLDM5ODc1OjIzODM0LDM5ODc2OjIzODMzLDM5ODc3OjIzODMyLDM5ODc4OjIzODg0LDM5ODc5OjIzODkwLDM5ODgwOjIzODg2LDM5ODgxOjIzODgzLDM5ODgyOjIzOTE2LDM5ODgzOjIzOTIzLDM5ODg0OjIzOTI2LDM5ODg1OjIzOTQzLDM5ODg2OjIzOTQwLDM5ODg3OjIzOTM4LDM5ODg4OjIzOTcwLDM5ODg5OjIzOTY1LDM5ODkwOjIzOTgwLDM5ODkxOjIzOTgyLDM5ODkyOjIzOTk3LDM5ODkzOjIzOTUyLDM5ODk0OjIzOTkxLDM5ODk1OjIzOTk2LDM5ODk2OjI0MDA5LDM5ODk3OjI0MDEzLDM5ODk4OjI0MDE5LDM5ODk5OjI0MDE4LDM5OTAwOjI0MDIyLDM5OTAxOjI0MDI3LDM5OTAyOjI0MDQzLDM5OTAzOjI0MDUwLDM5OTA0OjI0MDUzLDM5OTA1OjI0MDc1LDM5OTA2OjI0MDkwLDM5OTA3OjI0MDg5LDM5OTA4OjI0MDgxLDM5OTA5OjI0MDkxLDM5OTEwOjI0MTE4LDM5OTExOjI0MTE5LDM5OTEyOjI0MTMyLDM5OTEzOjI0MTMxLDM5OTE0OjI0MTI4LDM5OTE1OjI0MTQyLDM5OTE2OjI0MTUxLDM5OTE3OjI0MTQ4LDM5OTE4OjI0MTU5LDM5OTE5OjI0MTYyLDM5OTIwOjI0MTY0LDM5OTIxOjI0MTM1LDM5OTIyOjI0MTgxLDM5OTIzOjI0MTgyLDM5OTI0OjI0MTg2LDM5OTI1OjQwNjM2LDM5OTI2OjI0MTkxLDM5OTI3OjI0MjI0LDM5OTI4OjI0MjU3LDM5OTI5OjI0MjU4LDM5OTMwOjI0MjY0LDM5OTMxOjI0MjcyLDM5OTMyOjI0MjcxLDRlNDoyNDI3OCw0MDAwMToyNDI5MSw0MDAwMjoyNDI4NSw0MDAwMzoyNDI4Miw0MDAwNDoyNDI4Myw0MDAwNToyNDI5MCw0MDAwNjoyNDI4OSw0MDAwNzoyNDI5Niw0MDAwODoyNDI5Nyw0MDAwOToyNDMwMCw0MDAxMDoyNDMwNSw0MDAxMToyNDMwNyw0MDAxMjoyNDMwNCw0MDAxMzoyNDMwOCw0MDAxNDoyNDMxMiw0MDAxNToyNDMxOCw0MDAxNjoyNDMyMyw0MDAxNzoyNDMyOSw0MDAxODoyNDQxMyw0MDAxOToyNDQxMiw0MDAyMDoyNDMzMSw0MDAyMToyNDMzNyw0MDAyMjoyNDM0Miw0MDAyMzoyNDM2MSw0MDAyNDoyNDM2NSw0MDAyNToyNDM3Niw0MDAyNjoyNDM4NSw0MDAyNzoyNDM5Miw0MDAyODoyNDM5Niw0MDAyOToyNDM5OCw0MDAzMDoyNDM2Nyw0MDAzMToyNDQwMSw0MDAzMjoyNDQwNiw0MDAzMzoyNDQwNyw0MDAzNDoyNDQwOSw0MDAzNToyNDQxNyw0MDAzNjoyNDQyOSw0MDAzNzoyNDQzNSw0MDAzODoyNDQzOSw0MDAzOToyNDQ1MSw0MDA0MDoyNDQ1MCw0MDA0MToyNDQ0Nyw0MDA0MjoyNDQ1OCw0MDA0MzoyNDQ1Niw0MDA0NDoyNDQ2NSw0MDA0NToyNDQ1NSw0MDA0NjoyNDQ3OCw0MDA0NzoyNDQ3Myw0MDA0ODoyNDQ3Miw0MDA0OToyNDQ4MCw0MDA1MDoyNDQ4OCw0MDA1MToyNDQ5Myw0MDA1MjoyNDUwOCw0MDA1MzoyNDUzNCw0MDA1NDoyNDU3MSw0MDA1NToyNDU0OCw0MDA1NjoyNDU2OCw0MDA1NzoyNDU2MSw0MDA1ODoyNDU0MSw0MDA1OToyNDc1NSw0MDA2MDoyNDU3NSw0MDA2MToyNDYwOSw0MDA2MjoyNDY3Miw0MDA2NDoyNDYwMSw0MDA2NToyNDU5Miw0MDA2NjoyNDYxNyw0MDA2NzoyNDU5MCw0MDA2ODoyNDYyNSw0MDA2OToyNDYwMyw0MDA3MDoyNDU5Nyw0MDA3MToyNDYxOSw0MDA3MjoyNDYxNCw0MDA3MzoyNDU5MSw0MDA3NDoyNDYzNCw0MDA3NToyNDY2Niw0MDA3NjoyNDY0MSw0MDA3NzoyNDY4Miw0MDA3ODoyNDY5NSw0MDA3OToyNDY3MSw0MDA4MDoyNDY1MCw0MDA4MToyNDY0Niw0MDA4MjoyNDY1Myw0MDA4MzoyNDY3NSw0MDA4NDoyNDY0Myw0MDA4NToyNDY3Niw0MDA4NjoyNDY0Miw0MDA4NzoyNDY4NCw0MDA4ODoyNDY4Myw0MDA4OToyNDY2NSw0MDA5MDoyNDcwNSw0MDA5MToyNDcxNyw0MDA5MjoyNDgwNyw0MDA5MzoyNDcwNyw0MDA5NDoyNDczMCw0MDA5NToyNDcwOCw0MDA5NjoyNDczMSw0MDA5NzoyNDcyNiw0MDA5ODoyNDcyNyw0MDA5OToyNDcyMiw0MDEwMDoyNDc0Myw0MDEwMToyNDcxNSw0MDEwMjoyNDgwMSw0MDEwMzoyNDc2MCw0MDEwNDoyNDgwMCw0MDEwNToyNDc4Nyw0MDEwNjoyNDc1Niw0MDEwNzoyNDU2MCw0MDEwODoyNDc2NSw0MDEwOToyNDc3NCw0MDExMDoyNDc1Nyw0MDExMToyNDc5Miw0MDExMjoyNDkwOSw0MDExMzoyNDg1Myw0MDExNDoyNDgzOCw0MDExNToyNDgyMiw0MDExNjoyNDgyMyw0MDExNzoyNDgzMiw0MDExODoyNDgyMCw0MDExOToyNDgyNiw0MDEyMDoyNDgzNSw0MDEyMToyNDg2NSw0MDEyMjoyNDgyNyw0MDEyMzoyNDgxNyw0MDEyNDoyNDg0NSw0MDEyNToyNDg0Niw0MDEyNjoyNDkwMyw0MDEyNzoyNDg5NCw0MDEyODoyNDg3Miw0MDEyOToyNDg3MSw0MDEzMDoyNDkwNiw0MDEzMToyNDg5NSw0MDEzMjoyNDg5Miw0MDEzMzoyNDg3Niw0MDEzNDoyNDg4NCw0MDEzNToyNDg5Myw0MDEzNjoyNDg5OCw0MDEzNzoyNDkwMCw0MDEzODoyNDk0Nyw0MDEzOToyNDk1MSw0MDE0MDoyNDkyMCw0MDE0MToyNDkyMSw0MDE0MjoyNDkyMiw0MDE0MzoyNDkzOSw0MDE0NDoyNDk0OCw0MDE0NToyNDk0Myw0MDE0NjoyNDkzMyw0MDE0NzoyNDk0NSw0MDE0ODoyNDkyNyw0MDE0OToyNDkyNSw0MDE1MDoyNDkxNSw0MDE1MToyNDk0OSw0MDE1MjoyNDk4NSw0MDE1MzoyNDk4Miw0MDE1NDoyNDk2Nyw0MDE1NToyNTAwNCw0MDE1NjoyNDk4MCw0MDE1NzoyNDk4Niw0MDE1ODoyNDk3MCw0MDE1OToyNDk3Nyw0MDE2MDoyNTAwMyw0MDE2MToyNTAwNiw0MDE2MjoyNTAzNiw0MDE2MzoyNTAzNCw0MDE2NDoyNTAzMyw0MDE2NToyNTA3OSw0MDE2NjoyNTAzMiw0MDE2NzoyNTAyNyw0MDE2ODoyNTAzMCw0MDE2OToyNTAxOCw0MDE3MDoyNTAzNSw0MDE3MTozMjYzMyw0MDE3MjoyNTAzNyw0MDE3MzoyNTA2Miw0MDE3NDoyNTA1OSw0MDE3NToyNTA3OCw0MDE3NjoyNTA4Miw0MDE3NzoyNTA3Niw0MDE3ODoyNTA4Nyw0MDE3OToyNTA4NSw0MDE4MDoyNTA4NCw0MDE4MToyNTA4Niw0MDE4MjoyNTA4OCw0MDE4MzoyNTA5Niw0MDE4NDoyNTA5Nyw0MDE4NToyNTEwMSw0MDE4NjoyNTEwMCw0MDE4NzoyNTEwOCw0MDE4ODoyNTExNSw0MDI1NjoyNTExOCw0MDI1NzoyNTEyMSw0MDI1ODoyNTEzMCw0MDI1OToyNTEzNCw0MDI2MDoyNTEzNiw0MDI2MToyNTEzOCw0MDI2MjoyNTEzOSw0MDI2MzoyNTE1Myw0MDI2NDoyNTE2Niw0MDI2NToyNTE4Miw0MDI2NjoyNTE4Nyw0MDI2NzoyNTE3OSw0MDI2ODoyNTE4NCw0MDI2OToyNTE5Miw0MDI3MDoyNTIxMiw0MDI3MToyNTIxOCw0MDI3MjoyNTIyNSw0MDI3MzoyNTIxNCw0MDI3NDoyNTIzNCw0MDI3NToyNTIzNSw0MDI3NjoyNTIzOCw0MDI3NzoyNTMwMCw0MDI3ODoyNTIxOSw0MDI3OToyNTIzNiw0MDI4MDoyNTMwMyw0MDI4MToyNTI5Nyw0MDI4MjoyNTI3NSw0MDI4MzoyNTI5NSw0MDI4NDoyNTM0Myw0MDI4NToyNTI4Niw0MDI4NjoyNTgxMiw0MDI4NzoyNTI4OCw0MDI4ODoyNTMwOCw0MDI4OToyNTI5Miw0MDI5MDoyNTI5MCw0MDI5MToyNTI4Miw0MDI5MjoyNTI4Nyw0MDI5MzoyNTI0Myw0MDI5NDoyNTI4OSw0MDI5NToyNTM1Niw0MDI5NjoyNTMyNiw0MDI5NzoyNTMyOSw0MDI5ODoyNTM4Myw0MDI5OToyNTM0Niw0MDMwMDoyNTM1Miw0MDMwMToyNTMyNyw0MDMwMjoyNTMzMyw0MDMwMzoyNTQyNCw0MDMwNDoyNTQwNiw0MDMwNToyNTQyMSw0MDMwNjoyNTYyOCw0MDMwNzoyNTQyMyw0MDMwODoyNTQ5NCw0MDMwOToyNTQ4Niw0MDMxMDoyNTQ3Miw0MDMxMToyNTUxNSw0MDMxMjoyNTQ2Miw0MDMxMzoyNTUwNyw0MDMxNDoyNTQ4Nyw0MDMxNToyNTQ4MSw0MDMxNjoyNTUwMyw0MDMxNzoyNTUyNSw0MDMxODoyNTQ1MSw0MDMyMDoyNTQ0OSw0MDMyMToyNTUzNCw0MDMyMjoyNTU3Nyw0MDMyMzoyNTUzNiw0MDMyNDoyNTU0Miw0MDMyNToyNTU3MSw0MDMyNjoyNTU0NSw0MDMyNzoyNTU1NCw0MDMyODoyNTU5MCw0MDMyOToyNTU0MCw0MDMzMDoyNTYyMiw0MDMzMToyNTY1Miw0MDMzMjoyNTYwNiw0MDMzMzoyNTYxOSw0MDMzNDoyNTYzOCw0MDMzNToyNTY1NCw0MDMzNjoyNTg4NSw0MDMzNzoyNTYyMyw0MDMzODoyNTY0MCw0MDMzOToyNTYxNSw0MDM0MDoyNTcwMyw0MDM0MToyNTcxMSw0MDM0MjoyNTcxOCw0MDM0MzoyNTY3OCw0MDM0NDoyNTg5OCw0MDM0NToyNTc0OSw0MDM0NjoyNTc0Nyw0MDM0NzoyNTc2NSw0MDM0ODoyNTc2OSw0MDM0OToyNTczNiw0MDM1MDoyNTc4OCw0MDM1MToyNTgxOCw0MDM1MjoyNTgxMCw0MDM1MzoyNTc5Nyw0MDM1NDoyNTc5OSw0MDM1NToyNTc4Nyw0MDM1NjoyNTgxNiw0MDM1NzoyNTc5NCw0MDM1ODoyNTg0MSw0MDM1OToyNTgzMSw0MDM2MDozMzI4OSw0MDM2MToyNTgyNCw0MDM2MjoyNTgyNSw0MDM2MzoyNTI2MCw0MDM2NDoyNTgyNyw0MDM2NToyNTgzOSw0MDM2NjoyNTkwMCw0MDM2NzoyNTg0Niw0MDM2ODoyNTg0NCw0MDM2OToyNTg0Miw0MDM3MDoyNTg1MCw0MDM3MToyNTg1Niw0MDM3MjoyNTg1Myw0MDM3MzoyNTg4MCw0MDM3NDoyNTg4NCw0MDM3NToyNTg2MSw0MDM3NjoyNTg5Miw0MDM3NzoyNTg5MSw0MDM3ODoyNTg5OSw0MDM3OToyNTkwOCw0MDM4MDoyNTkwOSw0MDM4MToyNTkxMSw0MDM4MjoyNTkxMCw0MDM4MzoyNTkxMiw0MDM4NDozMDAyNyw0MDM4NToyNTkyOCw0MDM4NjoyNTk0Miw0MDM4NzoyNTk0MSw0MDM4ODoyNTkzMyw0MDM4OToyNTk0NCw0MDM5MDoyNTk1MCw0MDM5MToyNTk0OSw0MDM5MjoyNTk3MCw0MDM5MzoyNTk3Niw0MDM5NDoyNTk4Niw0MDM5NToyNTk4Nyw0MDM5NjozNTcyMiw0MDM5NzoyNjAxMSw0MDM5ODoyNjAxNSw0MDM5OToyNjAyNyw0MDQwMDoyNjAzOSw0MDQwMToyNjA1MSw0MDQwMjoyNjA1NCw0MDQwMzoyNjA0OSw0MDQwNDoyNjA1Miw0MDQwNToyNjA2MCw0MDQwNjoyNjA2Niw0MDQwNzoyNjA3NSw0MDQwODoyNjA3Myw0MDQwOToyNjA4MCw0MDQxMDoyNjA4MSw0MDQxMToyNjA5Nyw0MDQxMjoyNjQ4Miw0MDQxMzoyNjEyMiw0MDQxNDoyNjExNSw0MDQxNToyNjEwNyw0MDQxNjoyNjQ4Myw0MDQxNzoyNjE2NSw0MDQxODoyNjE2Niw0MDQxOToyNjE2NCw0MDQyMDoyNjE0MCw0MDQyMToyNjE5MSw0MDQyMjoyNjE4MCw0MDQyMzoyNjE4NSw0MDQyNDoyNjE3Nyw0MDQyNToyNjIwNiw0MDQyNjoyNjIwNSw0MDQyNzoyNjIxMiw0MDQyODoyNjIxNSw0MDQyOToyNjIxNiw0MDQzMDoyNjIwNyw0MDQzMToyNjIxMCw0MDQzMjoyNjIyNCw0MDQzMzoyNjI0Myw0MDQzNDoyNjI0OCw0MDQzNToyNjI1NCw0MDQzNjoyNjI0OSw0MDQzNzoyNjI0NCw0MDQzODoyNjI2NCw0MDQzOToyNjI2OSw0MDQ0MDoyNjMwNSw0MDQ0MToyNjI5Nyw0MDQ0MjoyNjMxMyw0MDQ0MzoyNjMwMiw0MDQ0NDoyNjMwMCw0MDUxMjoyNjMwOCw0MDUxMzoyNjI5Niw0MDUxNDoyNjMyNiw0MDUxNToyNjMzMCw0MDUxNjoyNjMzNiw0MDUxNzoyNjE3NSw0MDUxODoyNjM0Miw0MDUxOToyNjM0NSw0MDUyMDoyNjM1Miw0MDUyMToyNjM1Nyw0MDUyMjoyNjM1OSw0MDUyMzoyNjM4Myw0MDUyNDoyNjM5MCw0MDUyNToyNjM5OCw0MDUyNjoyNjQwNiw0MDUyNzoyNjQwNyw0MDUyODozODcxMiw0MDUyOToyNjQxNCw0MDUzMDoyNjQzMSw0MDUzMToyNjQyMiw0MDUzMjoyNjQzMyw0MDUzMzoyNjQyNCw0MDUzNDoyNjQyMyw0MDUzNToyNjQzOCw0MDUzNjoyNjQ2Miw0MDUzNzoyNjQ2NCw0MDUzODoyNjQ1Nyw0MDUzOToyNjQ2Nyw0MDU0MDoyNjQ2OCw0MDU0MToyNjUwNSw0MDU0MjoyNjQ4MCw0MDU0MzoyNjUzNyw0MDU0NDoyNjQ5Miw0MDU0NToyNjQ3NCw0MDU0NjoyNjUwOCw0MDU0NzoyNjUwNyw0MDU0ODoyNjUzNCw0MDU0OToyNjUyOSw0MDU1MDoyNjUwMSw0MDU1MToyNjU1MSw0MDU1MjoyNjYwNyw0MDU1MzoyNjU0OCw0MDU1NDoyNjYwNCw0MDU1NToyNjU0Nyw0MDU1NjoyNjYwMSw0MDU1NzoyNjU1Miw0MDU1ODoyNjU5Niw0MDU1OToyNjU5MCw0MDU2MDoyNjU4OSw0MDU2MToyNjU5NCw0MDU2MjoyNjYwNiw0MDU2MzoyNjU1Myw0MDU2NDoyNjU3NCw0MDU2NToyNjU2Niw0MDU2NjoyNjU5OSw0MDU2NzoyNzI5Miw0MDU2ODoyNjY1NCw0MDU2OToyNjY5NCw0MDU3MDoyNjY2NSw0MDU3MToyNjY4OCw0MDU3MjoyNjcwMSw0MDU3MzoyNjY3NCw0MDU3NDoyNjcwMiw0MDU3NjoyNjgwMyw0MDU3NzoyNjY2Nyw0MDU3ODoyNjcxMyw0MDU3OToyNjcyMyw0MDU4MDoyNjc0Myw0MDU4MToyNjc1MSw0MDU4MjoyNjc4Myw0MDU4MzoyNjc2Nyw0MDU4NDoyNjc5Nyw0MDU4NToyNjc3Miw0MDU4NjoyNjc4MSw0MDU4NzoyNjc3OSw0MDU4ODoyNjc1NSw0MDU4OToyNzMxMCw0MDU5MDoyNjgwOSw0MDU5MToyNjc0MCw0MDU5MjoyNjgwNSw0MDU5MzoyNjc4NCw0MDU5NDoyNjgxMCw0MDU5NToyNjg5NSw0MDU5NjoyNjc2NSw0MDU5NzoyNjc1MCw0MDU5ODoyNjg4MSw0MDU5OToyNjgyNiw0MDYwMDoyNjg4OCw0MDYwMToyNjg0MCw0MDYwMjoyNjkxNCw0MDYwMzoyNjkxOCw0MDYwNDoyNjg0OSw0MDYwNToyNjg5Miw0MDYwNjoyNjgyOSw0MDYwNzoyNjgzNiw0MDYwODoyNjg1NSw0MDYwOToyNjgzNyw0MDYxMDoyNjkzNCw0MDYxMToyNjg5OCw0MDYxMjoyNjg4NCw0MDYxMzoyNjgzOSw0MDYxNDoyNjg1MSw0MDYxNToyNjkxNyw0MDYxNjoyNjg3Myw0MDYxNzoyNjg0OCw0MDYxODoyNjg2Myw0MDYxOToyNjkyMCw0MDYyMDoyNjkyMiw0MDYyMToyNjkwNiw0MDYyMjoyNjkxNSw0MDYyMzoyNjkxMyw0MDYyNDoyNjgyMiw0MDYyNToyNzAwMSw0MDYyNjoyNjk5OSw0MDYyNzoyNjk3Miw0MDYyODoyN2UzLDQwNjI5OjI2OTg3LDQwNjMwOjI2OTY0LDQwNjMxOjI3MDA2LDQwNjMyOjI2OTkwLDQwNjMzOjI2OTM3LDQwNjM0OjI2OTk2LDQwNjM1OjI2OTQxLDQwNjM2OjI2OTY5LDQwNjM3OjI2OTI4LDQwNjM4OjI2OTc3LDQwNjM5OjI2OTc0LDQwNjQwOjI2OTczLDQwNjQxOjI3MDA5LDQwNjQyOjI2OTg2LDQwNjQzOjI3MDU4LDQwNjQ0OjI3MDU0LDQwNjQ1OjI3MDg4LDQwNjQ2OjI3MDcxLDQwNjQ3OjI3MDczLDQwNjQ4OjI3MDkxLDQwNjQ5OjI3MDcwLDQwNjUwOjI3MDg2LDQwNjUxOjIzNTI4LDQwNjUyOjI3MDgyLDQwNjUzOjI3MTAxLDQwNjU0OjI3MDY3LDQwNjU1OjI3MDc1LDQwNjU2OjI3MDQ3LDQwNjU3OjI3MTgyLDQwNjU4OjI3MDI1LDQwNjU5OjI3MDQwLDQwNjYwOjI3MDM2LDQwNjYxOjI3MDI5LDQwNjYyOjI3MDYwLDQwNjYzOjI3MTAyLDQwNjY0OjI3MTEyLDQwNjY1OjI3MTM4LDQwNjY2OjI3MTYzLDQwNjY3OjI3MTM1LDQwNjY4OjI3NDAyLDQwNjY5OjI3MTI5LDQwNjcwOjI3MTIyLDQwNjcxOjI3MTExLDQwNjcyOjI3MTQxLDQwNjczOjI3MDU3LDQwNjc0OjI3MTY2LDQwNjc1OjI3MTE3LDQwNjc2OjI3MTU2LDQwNjc3OjI3MTE1LDQwNjc4OjI3MTQ2LDQwNjc5OjI3MTU0LDQwNjgwOjI3MzI5LDQwNjgxOjI3MTcxLDQwNjgyOjI3MTU1LDQwNjgzOjI3MjA0LDQwNjg0OjI3MTQ4LDQwNjg1OjI3MjUwLDQwNjg2OjI3MTkwLDQwNjg3OjI3MjU2LDQwNjg4OjI3MjA3LDQwNjg5OjI3MjM0LDQwNjkwOjI3MjI1LDQwNjkxOjI3MjM4LDQwNjkyOjI3MjA4LDQwNjkzOjI3MTkyLDQwNjk0OjI3MTcwLDQwNjk1OjI3MjgwLDQwNjk2OjI3Mjc3LDQwNjk3OjI3Mjk2LDQwNjk4OjI3MjY4LDQwNjk5OjI3Mjk4LDQwNzAwOjI3Mjk5LDQwNzY4OjI3Mjg3LDQwNzY5OjM0MzI3LDQwNzcwOjI3MzIzLDQwNzcxOjI3MzMxLDQwNzcyOjI3MzMwLDQwNzczOjI3MzIwLDQwNzc0OjI3MzE1LDQwNzc1OjI3MzA4LDQwNzc2OjI3MzU4LDQwNzc3OjI3MzQ1LDQwNzc4OjI3MzU5LDQwNzc5OjI3MzA2LDQwNzgwOjI3MzU0LDQwNzgxOjI3MzcwLDQwNzgyOjI3Mzg3LDQwNzgzOjI3Mzk3LDQwNzg0OjM0MzI2LDQwNzg1OjI3Mzg2LDQwNzg2OjI3NDEwLDQwNzg3OjI3NDE0LDQwNzg4OjM5NzI5LDQwNzg5OjI3NDIzLDQwNzkwOjI3NDQ4LDQwNzkxOjI3NDQ3LDQwNzkyOjMwNDI4LDQwNzkzOjI3NDQ5LDQwNzk0OjM5MTUwLDQwNzk1OjI3NDYzLDQwNzk2OjI3NDU5LDQwNzk3OjI3NDY1LDQwNzk4OjI3NDcyLDQwNzk5OjI3NDgxLDQwODAwOjI3NDc2LDQwODAxOjI3NDgzLDQwODAyOjI3NDg3LDQwODAzOjI3NDg5LDQwODA0OjI3NTEyLDQwODA1OjI3NTEzLDQwODA2OjI3NTE5LDQwODA3OjI3NTIwLDQwODA4OjI3NTI0LDQwODA5OjI3NTIzLDQwODEwOjI3NTMzLDQwODExOjI3NTQ0LDQwODEyOjI3NTQxLDQwODEzOjI3NTUwLDQwODE0OjI3NTU2LDQwODE1OjI3NTYyLDQwODE2OjI3NTYzLDQwODE3OjI3NTY3LDQwODE4OjI3NTcwLDQwODE5OjI3NTY5LDQwODIwOjI3NTcxLDQwODIxOjI3NTc1LDQwODIyOjI3NTgwLDQwODIzOjI3NTkwLDQwODI0OjI3NTk1LDQwODI1OjI3NjAzLDQwODI2OjI3NjE1LDQwODI3OjI3NjI4LDQwODI4OjI3NjI3LDQwODI5OjI3NjM1LDQwODMwOjI3NjMxLDQwODMyOjQwNjM4LDQwODMzOjI3NjU2LDQwODM0OjI3NjY3LDQwODM1OjI3NjY4LDQwODM2OjI3Njc1LDQwODM3OjI3Njg0LDQwODM4OjI3NjgzLDQwODM5OjI3NzQyLDQwODQwOjI3NzMzLDQwODQxOjI3NzQ2LDQwODQyOjI3NzU0LDQwODQzOjI3Nzc4LDQwODQ0OjI3Nzg5LDQwODQ1OjI3ODAyLDQwODQ2OjI3Nzc3LDQwODQ3OjI3ODAzLDQwODQ4OjI3Nzc0LDQwODQ5OjI3NzUyLDQwODUwOjI3NzYzLDQwODUxOjI3Nzk0LDQwODUyOjI3NzkyLDQwODUzOjI3ODQ0LDQwODU0OjI3ODg5LDQwODU1OjI3ODU5LDQwODU2OjI3ODM3LDQwODU3OjI3ODYzLDQwODU4OjI3ODQ1LDQwODU5OjI3ODY5LDQwODYwOjI3ODIyLDQwODYxOjI3ODI1LDQwODYyOjI3ODM4LDQwODYzOjI3ODM0LDQwODY0OjI3ODY3LDQwODY1OjI3ODg3LDQwODY2OjI3ODY1LDQwODY3OjI3ODgyLDQwODY4OjI3OTM1LDQwODY5OjM0ODkzLDQwODcwOjI3OTU4LDQwODcxOjI3OTQ3LDQwODcyOjI3OTY1LDQwODczOjI3OTYwLDQwODc0OjI3OTI5LDQwODc1OjI3OTU3LDQwODc2OjI3OTU1LDQwODc3OjI3OTIyLDQwODc4OjI3OTE2LDQwODc5OjI4MDAzLDQwODgwOjI4MDUxLDQwODgxOjI4MDA0LDQwODgyOjI3OTk0LDQwODgzOjI4MDI1LDQwODg0OjI3OTkzLDQwODg1OjI4MDQ2LDQwODg2OjI4MDUzLDQwODg3OjI4NjQ0LDQwODg4OjI4MDM3LDQwODg5OjI4MTUzLDQwODkwOjI4MTgxLDQwODkxOjI4MTcwLDQwODkyOjI4MDg1LDQwODkzOjI4MTAzLDQwODk0OjI4MTM0LDQwODk1OjI4MDg4LDQwODk2OjI4MTAyLDQwODk3OjI4MTQwLDQwODk4OjI4MTI2LDQwODk5OjI4MTA4LDQwOTAwOjI4MTM2LDQwOTAxOjI4MTE0LDQwOTAyOjI4MTAxLDQwOTAzOjI4MTU0LDQwOTA0OjI4MTIxLDQwOTA1OjI4MTMyLDQwOTA2OjI4MTE3LDQwOTA3OjI4MTM4LDQwOTA4OjI4MTQyLDQwOTA5OjI4MjA1LDQwOTEwOjI4MjcwLDQwOTExOjI4MjA2LDQwOTEyOjI4MTg1LDQwOTEzOjI4Mjc0LDQwOTE0OjI4MjU1LDQwOTE1OjI4MjIyLDQwOTE2OjI4MTk1LDQwOTE3OjI4MjY3LDQwOTE4OjI4MjAzLDQwOTE5OjI4Mjc4LDQwOTIwOjI4MjM3LDQwOTIxOjI4MTkxLDQwOTIyOjI4MjI3LDQwOTIzOjI4MjE4LDQwOTI0OjI4MjM4LDQwOTI1OjI4MTk2LDQwOTI2OjI4NDE1LDQwOTI3OjI4MTg5LDQwOTI4OjI4MjE2LDQwOTI5OjI4MjkwLDQwOTMwOjI4MzMwLDQwOTMxOjI4MzEyLDQwOTMyOjI4MzYxLDQwOTMzOjI4MzQzLDQwOTM0OjI4MzcxLDQwOTM1OjI4MzQ5LDQwOTM2OjI4MzM1LDQwOTM3OjI4MzU2LDQwOTM4OjI4MzM4LDQwOTM5OjI4MzcyLDQwOTQwOjI4MzczLDQwOTQxOjI4MzAzLDQwOTQyOjI4MzI1LDQwOTQzOjI4MzU0LDQwOTQ0OjI4MzE5LDQwOTQ1OjI4NDgxLDQwOTQ2OjI4NDMzLDQwOTQ3OjI4NzQ4LDQwOTQ4OjI4Mzk2LDQwOTQ5OjI4NDA4LDQwOTUwOjI4NDE0LDQwOTUxOjI4NDc5LDQwOTUyOjI4NDAyLDQwOTUzOjI4NDY1LDQwOTU0OjI4Mzk5LDQwOTU1OjI4NDY2LDQwOTU2OjI4MzY0LDE2MTo2NTM3NywxNjI6NjUzNzgsMTYzOjY1Mzc5LDE2NDo2NTM4MCwxNjU6NjUzODEsMTY2OjY1MzgyLDE2Nzo2NTM4MywxNjg6NjUzODQsMTY5OjY1Mzg1LDE3MDo2NTM4NiwxNzE6NjUzODcsMTcyOjY1Mzg4LDE3Mzo2NTM4OSwxNzQ6NjUzOTAsMTc1OjY1MzkxLDE3Njo2NTM5MiwxNzc6NjUzOTMsMTc4OjY1Mzk0LDE3OTo2NTM5NSwxODA6NjUzOTYsMTgxOjY1Mzk3LDE4Mjo2NTM5OCwxODM6NjUzOTksMTg0OjY1NDAwLDE4NTo2NTQwMSwxODY6NjU0MDIsMTg3OjY1NDAzLDE4ODo2NTQwNCwxODk6NjU0MDUsMTkwOjY1NDA2LDE5MTo2NTQwNywxOTI6NjU0MDgsMTkzOjY1NDA5LDE5NDo2NTQxMCwxOTU6NjU0MTEsMTk2OjY1NDEyLDE5Nzo2NTQxMywxOTg6NjU0MTQsMTk5OjY1NDE1LDIwMDo2NTQxNiwyMDE6NjU0MTcsMjAyOjY1NDE4LDIwMzo2NTQxOSwyMDQ6NjU0MjAsMjA1OjY1NDIxLDIwNjo2NTQyMiwyMDc6NjU0MjMsMjA4OjY1NDI0LDIwOTo2NTQyNSwyMTA6NjU0MjYsMjExOjY1NDI3LDIxMjo2NTQyOCwyMTM6NjU0MjksMjE0OjY1NDMwLDIxNTo2NTQzMSwyMTY6NjU0MzIsMjE3OjY1NDMzLDIxODo2NTQzNCwyMTk6NjU0MzUsMjIwOjY1NDM2LDIyMTo2NTQzNywyMjI6NjU0MzgsMjIzOjY1NDM5LDU3NDA4OjI4NDc4LDU3NDA5OjI4NDM1LDU3NDEwOjI4NDA3LDU3NDExOjI4NTUwLDU3NDEyOjI4NTM4LDU3NDEzOjI4NTM2LDU3NDE0OjI4NTQ1LDU3NDE1OjI4NTQ0LDU3NDE2OjI4NTI3LDU3NDE3OjI4NTA3LDU3NDE4OjI4NjU5LDU3NDE5OjI4NTI1LDU3NDIwOjI4NTQ2LDU3NDIxOjI4NTQwLDU3NDIyOjI4NTA0LDU3NDIzOjI4NTU4LDU3NDI0OjI4NTYxLDU3NDI1OjI4NjEwLDU3NDI2OjI4NTE4LDU3NDI3OjI4NTk1LDU3NDI4OjI4NTc5LDU3NDI5OjI4NTc3LDU3NDMwOjI4NTgwLDU3NDMxOjI4NjAxLDU3NDMyOjI4NjE0LDU3NDMzOjI4NTg2LDU3NDM0OjI4NjM5LDU3NDM1OjI4NjI5LDU3NDM2OjI4NjUyLDU3NDM3OjI4NjI4LDU3NDM4OjI4NjMyLDU3NDM5OjI4NjU3LDU3NDQwOjI4NjU0LDU3NDQxOjI4NjM1LDU3NDQyOjI4NjgxLDU3NDQzOjI4NjgzLDU3NDQ0OjI4NjY2LDU3NDQ1OjI4Njg5LDU3NDQ2OjI4NjczLDU3NDQ3OjI4Njg3LDU3NDQ4OjI4NjcwLDU3NDQ5OjI4Njk5LDU3NDUwOjI4Njk4LDU3NDUxOjI4NTMyLDU3NDUyOjI4NzAxLDU3NDUzOjI4Njk2LDU3NDU0OjI4NzAzLDU3NDU1OjI4NzIwLDU3NDU2OjI4NzM0LDU3NDU3OjI4NzIyLDU3NDU4OjI4NzUzLDU3NDU5OjI4NzcxLDU3NDYwOjI4ODI1LDU3NDYxOjI4ODE4LDU3NDYyOjI4ODQ3LDU3NDYzOjI4OTEzLDU3NDY0OjI4ODQ0LDU3NDY1OjI4ODU2LDU3NDY2OjI4ODUxLDU3NDY3OjI4ODQ2LDU3NDY4OjI4ODk1LDU3NDY5OjI4ODc1LDU3NDcwOjI4ODkzLDU3NDcyOjI4ODg5LDU3NDczOjI4OTM3LDU3NDc0OjI4OTI1LDU3NDc1OjI4OTU2LDU3NDc2OjI4OTUzLDU3NDc3OjI5MDI5LDU3NDc4OjI5MDEzLDU3NDc5OjI5MDY0LDU3NDgwOjI5MDMwLDU3NDgxOjI5MDI2LDU3NDgyOjI5MDA0LDU3NDgzOjI5MDE0LDU3NDg0OjI5MDM2LDU3NDg1OjI5MDcxLDU3NDg2OjI5MTc5LDU3NDg3OjI5MDYwLDU3NDg4OjI5MDc3LDU3NDg5OjI5MDk2LDU3NDkwOjI5MTAwLDU3NDkxOjI5MTQzLDU3NDkyOjI5MTEzLDU3NDkzOjI5MTE4LDU3NDk0OjI5MTM4LDU3NDk1OjI5MTI5LDU3NDk2OjI5MTQwLDU3NDk3OjI5MTM0LDU3NDk4OjI5MTUyLDU3NDk5OjI5MTY0LDU3NTAwOjI5MTU5LDU3NTAxOjI5MTczLDU3NTAyOjI5MTgwLDU3NTAzOjI5MTc3LDU3NTA0OjI5MTgzLDU3NTA1OjI5MTk3LDU3NTA2OjI5MjAwLDU3NTA3OjI5MjExLDU3NTA4OjI5MjI0LDU3NTA5OjI5MjI5LDU3NTEwOjI5MjI4LDU3NTExOjI5MjMyLDU3NTEyOjI5MjM0LDU3NTEzOjI5MjQzLDU3NTE0OjI5MjQ0LDU3NTE1OjI5MjQ3LDU3NTE2OjI5MjQ4LDU3NTE3OjI5MjU0LDU3NTE4OjI5MjU5LDU3NTE5OjI5MjcyLDU3NTIwOjI5MzAwLDU3NTIxOjI5MzEwLDU3NTIyOjI5MzE0LDU3NTIzOjI5MzEzLDU3NTI0OjI5MzE5LDU3NTI1OjI5MzMwLDU3NTI2OjI5MzM0LDU3NTI3OjI5MzQ2LDU3NTI4OjI5MzUxLDU3NTI5OjI5MzY5LDU3NTMwOjI5MzYyLDU3NTMxOjI5Mzc5LDU3NTMyOjI5MzgyLDU3NTMzOjI5MzgwLDU3NTM0OjI5MzkwLDU3NTM1OjI5Mzk0LDU3NTM2OjI5NDEwLDU3NTM3OjI5NDA4LDU3NTM4OjI5NDA5LDU3NTM5OjI5NDMzLDU3NTQwOjI5NDMxLDU3NTQxOjIwNDk1LDU3NTQyOjI5NDYzLDU3NTQzOjI5NDUwLDU3NTQ0OjI5NDY4LDU3NTQ1OjI5NDYyLDU3NTQ2OjI5NDY5LDU3NTQ3OjI5NDkyLDU3NTQ4OjI5NDg3LDU3NTQ5OjI5NDgxLDU3NTUwOjI5NDc3LDU3NTUxOjI5NTAyLDU3NTUyOjI5NTE4LDU3NTUzOjI5NTE5LDU3NTU0OjQwNjY0LDU3NTU1OjI5NTI3LDU3NTU2OjI5NTQ2LDU3NTU3OjI5NTQ0LDU3NTU4OjI5NTUyLDU3NTU5OjI5NTYwLDU3NTYwOjI5NTU3LDU3NTYxOjI5NTYzLDU3NTYyOjI5NTYyLDU3NTYzOjI5NjQwLDU3NTY0OjI5NjE5LDU3NTY1OjI5NjQ2LDU3NTY2OjI5NjI3LDU3NTY3OjI5NjMyLDU3NTY4OjI5NjY5LDU3NTY5OjI5Njc4LDU3NTcwOjI5NjYyLDU3NTcxOjI5ODU4LDU3NTcyOjI5NzAxLDU3NTczOjI5ODA3LDU3NTc0OjI5NzMzLDU3NTc1OjI5Njg4LDU3NTc2OjI5NzQ2LDU3NTc3OjI5NzU0LDU3NTc4OjI5NzgxLDU3NTc5OjI5NzU5LDU3NTgwOjI5NzkxLDU3NTgxOjI5Nzg1LDU3NTgyOjI5NzYxLDU3NTgzOjI5Nzg4LDU3NTg0OjI5ODAxLDU3NTg1OjI5ODA4LDU3NTg2OjI5Nzk1LDU3NTg3OjI5ODAyLDU3NTg4OjI5ODE0LDU3NTg5OjI5ODIyLDU3NTkwOjI5ODM1LDU3NTkxOjI5ODU0LDU3NTkyOjI5ODYzLDU3NTkzOjI5ODk4LDU3NTk0OjI5OTAzLDU3NTk1OjI5OTA4LDU3NTk2OjI5NjgxLDU3NjY0OjI5OTIwLDU3NjY1OjI5OTIzLDU3NjY2OjI5OTI3LDU3NjY3OjI5OTI5LDU3NjY4OjI5OTM0LDU3NjY5OjI5OTM4LDU3NjcwOjI5OTM2LDU3NjcxOjI5OTM3LDU3NjcyOjI5OTQ0LDU3NjczOjI5OTQzLDU3Njc0OjI5OTU2LDU3Njc1OjI5OTU1LDU3Njc2OjI5OTU3LDU3Njc3OjI5OTY0LDU3Njc4OjI5OTY2LDU3Njc5OjI5OTY1LDU3NjgwOjI5OTczLDU3NjgxOjI5OTcxLDU3NjgyOjI5OTgyLDU3NjgzOjI5OTkwLDU3Njg0OjI5OTk2LDU3Njg1OjMwMDEyLDU3Njg2OjMwMDIwLDU3Njg3OjMwMDI5LDU3Njg4OjMwMDI2LDU3Njg5OjMwMDI1LDU3NjkwOjMwMDQzLDU3NjkxOjMwMDIyLDU3NjkyOjMwMDQyLDU3NjkzOjMwMDU3LDU3Njk0OjMwMDUyLDU3Njk1OjMwMDU1LDU3Njk2OjMwMDU5LDU3Njk3OjMwMDYxLDU3Njk4OjMwMDcyLDU3Njk5OjMwMDcwLDU3NzAwOjMwMDg2LDU3NzAxOjMwMDg3LDU3NzAyOjMwMDY4LDU3NzAzOjMwMDkwLDU3NzA0OjMwMDg5LDU3NzA1OjMwMDgyLDU3NzA2OjMwMTAwLDU3NzA3OjMwMTA2LDU3NzA4OjMwMTA5LDU3NzA5OjMwMTE3LDU3NzEwOjMwMTE1LDU3NzExOjMwMTQ2LDU3NzEyOjMwMTMxLDU3NzEzOjMwMTQ3LDU3NzE0OjMwMTMzLDU3NzE1OjMwMTQxLDU3NzE2OjMwMTM2LDU3NzE3OjMwMTQwLDU3NzE4OjMwMTI5LDU3NzE5OjMwMTU3LDU3NzIwOjMwMTU0LDU3NzIxOjMwMTYyLDU3NzIyOjMwMTY5LDU3NzIzOjMwMTc5LDU3NzI0OjMwMTc0LDU3NzI1OjMwMjA2LDU3NzI2OjMwMjA3LDU3NzI4OjMwMjA0LDU3NzI5OjMwMjA5LDU3NzMwOjMwMTkyLDU3NzMxOjMwMjAyLDU3NzMyOjMwMTk0LDU3NzMzOjMwMTk1LDU3NzM0OjMwMjE5LDU3NzM1OjMwMjIxLDU3NzM2OjMwMjE3LDU3NzM3OjMwMjM5LDU3NzM4OjMwMjQ3LDU3NzM5OjMwMjQwLDU3NzQwOjMwMjQxLDU3NzQxOjMwMjQyLDU3NzQyOjMwMjQ0LDU3NzQzOjMwMjYwLDU3NzQ0OjMwMjU2LDU3NzQ1OjMwMjY3LDU3NzQ2OjMwMjc5LDU3NzQ3OjMwMjgwLDU3NzQ4OjMwMjc4LDU3NzQ5OjMwMzAwLDU3NzUwOjMwMjk2LDU3NzUxOjMwMzA1LDU3NzUyOjMwMzA2LDU3NzUzOjMwMzEyLDU3NzU0OjMwMzEzLDU3NzU1OjMwMzE0LDU3NzU2OjMwMzExLDU3NzU3OjMwMzE2LDU3NzU4OjMwMzIwLDU3NzU5OjMwMzIyLDU3NzYwOjMwMzI2LDU3NzYxOjMwMzI4LDU3NzYyOjMwMzMyLDU3NzYzOjMwMzM2LDU3NzY0OjMwMzM5LDU3NzY1OjMwMzQ0LDU3NzY2OjMwMzQ3LDU3NzY3OjMwMzUwLDU3NzY4OjMwMzU4LDU3NzY5OjMwMzU1LDU3NzcwOjMwMzYxLDU3NzcxOjMwMzYyLDU3NzcyOjMwMzg0LDU3NzczOjMwMzg4LDU3Nzc0OjMwMzkyLDU3Nzc1OjMwMzkzLDU3Nzc2OjMwMzk0LDU3Nzc3OjMwNDAyLDU3Nzc4OjMwNDEzLDU3Nzc5OjMwNDIyLDU3NzgwOjMwNDE4LDU3NzgxOjMwNDMwLDU3NzgyOjMwNDMzLDU3NzgzOjMwNDM3LDU3Nzg0OjMwNDM5LDU3Nzg1OjMwNDQyLDU3Nzg2OjM0MzUxLDU3Nzg3OjMwNDU5LDU3Nzg4OjMwNDcyLDU3Nzg5OjMwNDcxLDU3NzkwOjMwNDY4LDU3NzkxOjMwNTA1LDU3NzkyOjMwNTAwLDU3NzkzOjMwNDk0LDU3Nzk0OjMwNTAxLDU3Nzk1OjMwNTAyLDU3Nzk2OjMwNDkxLDU3Nzk3OjMwNTE5LDU3Nzk4OjMwNTIwLDU3Nzk5OjMwNTM1LDU3ODAwOjMwNTU0LDU3ODAxOjMwNTY4LDU3ODAyOjMwNTcxLDU3ODAzOjMwNTU1LDU3ODA0OjMwNTY1LDU3ODA1OjMwNTkxLDU3ODA2OjMwNTkwLDU3ODA3OjMwNTg1LDU3ODA4OjMwNjA2LDU3ODA5OjMwNjAzLDU3ODEwOjMwNjA5LDU3ODExOjMwNjI0LDU3ODEyOjMwNjIyLDU3ODEzOjMwNjQwLDU3ODE0OjMwNjQ2LDU3ODE1OjMwNjQ5LDU3ODE2OjMwNjU1LDU3ODE3OjMwNjUyLDU3ODE4OjMwNjUzLDU3ODE5OjMwNjUxLDU3ODIwOjMwNjYzLDU3ODIxOjMwNjY5LDU3ODIyOjMwNjc5LDU3ODIzOjMwNjgyLDU3ODI0OjMwNjg0LDU3ODI1OjMwNjkxLDU3ODI2OjMwNzAyLDU3ODI3OjMwNzE2LDU3ODI4OjMwNzMyLDU3ODI5OjMwNzM4LDU3ODMwOjMxMDE0LDU3ODMxOjMwNzUyLDU3ODMyOjMxMDE4LDU3ODMzOjMwNzg5LDU3ODM0OjMwODYyLDU3ODM1OjMwODM2LDU3ODM2OjMwODU0LDU3ODM3OjMwODQ0LDU3ODM4OjMwODc0LDU3ODM5OjMwODYwLDU3ODQwOjMwODgzLDU3ODQxOjMwOTAxLDU3ODQyOjMwODkwLDU3ODQzOjMwODk1LDU3ODQ0OjMwOTI5LDU3ODQ1OjMwOTE4LDU3ODQ2OjMwOTIzLDU3ODQ3OjMwOTMyLDU3ODQ4OjMwOTEwLDU3ODQ5OjMwOTA4LDU3ODUwOjMwOTE3LDU3ODUxOjMwOTIyLDU3ODUyOjMwOTU2LDU3OTIwOjMwOTUxLDU3OTIxOjMwOTM4LDU3OTIyOjMwOTczLDU3OTIzOjMwOTY0LDU3OTI0OjMwOTgzLDU3OTI1OjMwOTk0LDU3OTI2OjMwOTkzLDU3OTI3OjMxMDAxLDU3OTI4OjMxMDIwLDU3OTI5OjMxMDE5LDU3OTMwOjMxMDQwLDU3OTMxOjMxMDcyLDU3OTMyOjMxMDYzLDU3OTMzOjMxMDcxLDU3OTM0OjMxMDY2LDU3OTM1OjMxMDYxLDU3OTM2OjMxMDU5LDU3OTM3OjMxMDk4LDU3OTM4OjMxMTAzLDU3OTM5OjMxMTE0LDU3OTQwOjMxMTMzLDU3OTQxOjMxMTQzLDU3OTQyOjQwNzc5LDU3OTQzOjMxMTQ2LDU3OTQ0OjMxMTUwLDU3OTQ1OjMxMTU1LDU3OTQ2OjMxMTYxLDU3OTQ3OjMxMTYyLDU3OTQ4OjMxMTc3LDU3OTQ5OjMxMTg5LDU3OTUwOjMxMjA3LDU3OTUxOjMxMjEyLDU3OTUyOjMxMjAxLDU3OTUzOjMxMjAzLDU3OTU0OjMxMjQwLDU3OTU1OjMxMjQ1LDU3OTU2OjMxMjU2LDU3OTU3OjMxMjU3LDU3OTU4OjMxMjY0LDU3OTU5OjMxMjYzLDU3OTYwOjMxMTA0LDU3OTYxOjMxMjgxLDU3OTYyOjMxMjkxLDU3OTYzOjMxMjk0LDU3OTY0OjMxMjg3LDU3OTY1OjMxMjk5LDU3OTY2OjMxMzE5LDU3OTY3OjMxMzA1LDU3OTY4OjMxMzI5LDU3OTY5OjMxMzMwLDU3OTcwOjMxMzM3LDU3OTcxOjQwODYxLDU3OTcyOjMxMzQ0LDU3OTczOjMxMzUzLDU3OTc0OjMxMzU3LDU3OTc1OjMxMzY4LDU3OTc2OjMxMzgzLDU3OTc3OjMxMzgxLDU3OTc4OjMxMzg0LDU3OTc5OjMxMzgyLDU3OTgwOjMxNDAxLDU3OTgxOjMxNDMyLDU3OTgyOjMxNDA4LDU3OTg0OjMxNDE0LDU3OTg1OjMxNDI5LDU3OTg2OjMxNDI4LDU3OTg3OjMxNDIzLDU3OTg4OjM2OTk1LDU3OTg5OjMxNDMxLDU3OTkwOjMxNDM0LDU3OTkxOjMxNDM3LDU3OTkyOjMxNDM5LDU3OTkzOjMxNDQ1LDU3OTk0OjMxNDQzLDU3OTk1OjMxNDQ5LDU3OTk2OjMxNDUwLDU3OTk3OjMxNDUzLDU3OTk4OjMxNDU3LDU3OTk5OjMxNDU4LDU4ZTM6MzE0NjIsNTgwMDE6MzE0NjksNTgwMDI6MzE0NzIsNTgwMDM6MzE0OTAsNTgwMDQ6MzE1MDMsNTgwMDU6MzE0OTgsNTgwMDY6MzE0OTQsNTgwMDc6MzE1MzksNTgwMDg6MzE1MTIsNTgwMDk6MzE1MTMsNTgwMTA6MzE1MTgsNTgwMTE6MzE1NDEsNTgwMTI6MzE1MjgsNTgwMTM6MzE1NDIsNTgwMTQ6MzE1NjgsNTgwMTU6MzE2MTAsNTgwMTY6MzE0OTIsNTgwMTc6MzE1NjUsNTgwMTg6MzE0OTksNTgwMTk6MzE1NjQsNTgwMjA6MzE1NTcsNTgwMjE6MzE2MDUsNTgwMjI6MzE1ODksNTgwMjM6MzE2MDQsNTgwMjQ6MzE1OTEsNTgwMjU6MzE2MDAsNTgwMjY6MzE2MDEsNTgwMjc6MzE1OTYsNTgwMjg6MzE1OTgsNTgwMjk6MzE2NDUsNTgwMzA6MzE2NDAsNTgwMzE6MzE2NDcsNTgwMzI6MzE2MjksNTgwMzM6MzE2NDQsNTgwMzQ6MzE2NDIsNTgwMzU6MzE2MjcsNTgwMzY6MzE2MzQsNTgwMzc6MzE2MzEsNTgwMzg6MzE1ODEsNTgwMzk6MzE2NDEsNTgwNDA6MzE2OTEsNTgwNDE6MzE2ODEsNTgwNDI6MzE2OTIsNTgwNDM6MzE2OTUsNTgwNDQ6MzE2NjgsNTgwNDU6MzE2ODYsNTgwNDY6MzE3MDksNTgwNDc6MzE3MjEsNTgwNDg6MzE3NjEsNTgwNDk6MzE3NjQsNTgwNTA6MzE3MTgsNTgwNTE6MzE3MTcsNTgwNTI6MzE4NDAsNTgwNTM6MzE3NDQsNTgwNTQ6MzE3NTEsNTgwNTU6MzE3NjMsNTgwNTY6MzE3MzEsNTgwNTc6MzE3MzUsNTgwNTg6MzE3NjcsNTgwNTk6MzE3NTcsNTgwNjA6MzE3MzQsNTgwNjE6MzE3NzksNTgwNjI6MzE3ODMsNTgwNjM6MzE3ODYsNTgwNjQ6MzE3NzUsNTgwNjU6MzE3OTksNTgwNjY6MzE3ODcsNTgwNjc6MzE4MDUsNTgwNjg6MzE4MjAsNTgwNjk6MzE4MTEsNTgwNzA6MzE4MjgsNTgwNzE6MzE4MjMsNTgwNzI6MzE4MDgsNTgwNzM6MzE4MjQsNTgwNzQ6MzE4MzIsNTgwNzU6MzE4MzksNTgwNzY6MzE4NDQsNTgwNzc6MzE4MzAsNTgwNzg6MzE4NDUsNTgwNzk6MzE4NTIsNTgwODA6MzE4NjEsNTgwODE6MzE4NzUsNTgwODI6MzE4ODgsNTgwODM6MzE5MDgsNTgwODQ6MzE5MTcsNTgwODU6MzE5MDYsNTgwODY6MzE5MTUsNTgwODc6MzE5MDUsNTgwODg6MzE5MTIsNTgwODk6MzE5MjMsNTgwOTA6MzE5MjIsNTgwOTE6MzE5MjEsNTgwOTI6MzE5MTgsNTgwOTM6MzE5MjksNTgwOTQ6MzE5MzMsNTgwOTU6MzE5MzYsNTgwOTY6MzE5NDEsNTgwOTc6MzE5MzgsNTgwOTg6MzE5NjAsNTgwOTk6MzE5NTQsNTgxMDA6MzE5NjQsNTgxMDE6MzE5NzAsNTgxMDI6Mzk3MzksNTgxMDM6MzE5ODMsNTgxMDQ6MzE5ODYsNTgxMDU6MzE5ODgsNTgxMDY6MzE5OTAsNTgxMDc6MzE5OTQsNTgxMDg6MzIwMDYsNTgxNzY6MzIwMDIsNTgxNzc6MzIwMjgsNTgxNzg6MzIwMjEsNTgxNzk6MzIwMTAsNTgxODA6MzIwNjksNTgxODE6MzIwNzUsNTgxODI6MzIwNDYsNTgxODM6MzIwNTAsNTgxODQ6MzIwNjMsNTgxODU6MzIwNTMsNTgxODY6MzIwNzAsNTgxODc6MzIxMTUsNTgxODg6MzIwODYsNTgxODk6MzIwNzgsNTgxOTA6MzIxMTQsNTgxOTE6MzIxMDQsNTgxOTI6MzIxMTAsNTgxOTM6MzIwNzksNTgxOTQ6MzIwOTksNTgxOTU6MzIxNDcsNTgxOTY6MzIxMzcsNTgxOTc6MzIwOTEsNTgxOTg6MzIxNDMsNTgxOTk6MzIxMjUsNTgyMDA6MzIxNTUsNTgyMDE6MzIxODYsNTgyMDI6MzIxNzQsNTgyMDM6MzIxNjMsNTgyMDQ6MzIxODEsNTgyMDU6MzIxOTksNTgyMDY6MzIxODksNTgyMDc6MzIxNzEsNTgyMDg6MzIzMTcsNTgyMDk6MzIxNjIsNTgyMTA6MzIxNzUsNTgyMTE6MzIyMjAsNTgyMTI6MzIxODQsNTgyMTM6MzIxNTksNTgyMTQ6MzIxNzYsNTgyMTU6MzIyMTYsNTgyMTY6MzIyMjEsNTgyMTc6MzIyMjgsNTgyMTg6MzIyMjIsNTgyMTk6MzIyNTEsNTgyMjA6MzIyNDIsNTgyMjE6MzIyMjUsNTgyMjI6MzIyNjEsNTgyMjM6MzIyNjYsNTgyMjQ6MzIyOTEsNTgyMjU6MzIyODksNTgyMjY6MzIyNzQsNTgyMjc6MzIzMDUsNTgyMjg6MzIyODcsNTgyMjk6MzIyNjUsNTgyMzA6MzIyNjcsNTgyMzE6MzIyOTAsNTgyMzI6MzIzMjYsNTgyMzM6MzIzNTgsNTgyMzQ6MzIzMTUsNTgyMzU6MzIzMDksNTgyMzY6MzIzMTMsNTgyMzc6MzIzMjMsNTgyMzg6MzIzMTEsNTgyNDA6MzIzMDYsNTgyNDE6MzIzMTQsNTgyNDI6MzIzNTksNTgyNDM6MzIzNDksNTgyNDQ6MzIzNDIsNTgyNDU6MzIzNTAsNTgyNDY6MzIzNDUsNTgyNDc6MzIzNDYsNTgyNDg6MzIzNzcsNTgyNDk6MzIzNjIsNTgyNTA6MzIzNjEsNTgyNTE6MzIzODAsNTgyNTI6MzIzNzksNTgyNTM6MzIzODcsNTgyNTQ6MzIyMTMsNTgyNTU6MzIzODEsNTgyNTY6MzY3ODIsNTgyNTc6MzIzODMsNTgyNTg6MzIzOTIsNTgyNTk6MzIzOTMsNTgyNjA6MzIzOTYsNTgyNjE6MzI0MDIsNTgyNjI6MzI0MDAsNTgyNjM6MzI0MDMsNTgyNjQ6MzI0MDQsNTgyNjU6MzI0MDYsNTgyNjY6MzIzOTgsNTgyNjc6MzI0MTEsNTgyNjg6MzI0MTIsNTgyNjk6MzI1NjgsNTgyNzA6MzI1NzAsNTgyNzE6MzI1ODEsNTgyNzI6MzI1ODgsNTgyNzM6MzI1ODksNTgyNzQ6MzI1OTAsNTgyNzU6MzI1OTIsNTgyNzY6MzI1OTMsNTgyNzc6MzI1OTcsNTgyNzg6MzI1OTYsNTgyNzk6MzI2MDAsNTgyODA6MzI2MDcsNTgyODE6MzI2MDgsNTgyODI6MzI2MTYsNTgyODM6MzI2MTcsNTgyODQ6MzI2MTUsNTgyODU6MzI2MzIsNTgyODY6MzI2NDIsNTgyODc6MzI2NDYsNTgyODg6MzI2NDMsNTgyODk6MzI2NDgsNTgyOTA6MzI2NDcsNTgyOTE6MzI2NTIsNTgyOTI6MzI2NjAsNTgyOTM6MzI2NzAsNTgyOTQ6MzI2NjksNTgyOTU6MzI2NjYsNTgyOTY6MzI2NzUsNTgyOTc6MzI2ODcsNTgyOTg6MzI2OTAsNTgyOTk6MzI2OTcsNTgzMDA6MzI2ODYsNTgzMDE6MzI2OTQsNTgzMDI6MzI2OTYsNTgzMDM6MzU2OTcsNTgzMDQ6MzI3MDksNTgzMDU6MzI3MTAsNTgzMDY6MzI3MTQsNTgzMDc6MzI3MjUsNTgzMDg6MzI3MjQsNTgzMDk6MzI3MzcsNTgzMTA6MzI3NDIsNTgzMTE6MzI3NDUsNTgzMTI6MzI3NTUsNTgzMTM6MzI3NjEsNTgzMTQ6MzkxMzIsNTgzMTU6MzI3NzQsNTgzMTY6MzI3NzIsNTgzMTc6MzI3NzksNTgzMTg6MzI3ODYsNTgzMTk6MzI3OTIsNTgzMjA6MzI3OTMsNTgzMjE6MzI3OTYsNTgzMjI6MzI4MDEsNTgzMjM6MzI4MDgsNTgzMjQ6MzI4MzEsNTgzMjU6MzI4MjcsNTgzMjY6MzI4NDIsNTgzMjc6MzI4MzgsNTgzMjg6MzI4NTAsNTgzMjk6MzI4NTYsNTgzMzA6MzI4NTgsNTgzMzE6MzI4NjMsNTgzMzI6MzI4NjYsNTgzMzM6MzI4NzIsNTgzMzQ6MzI4ODMsNTgzMzU6MzI4ODIsNTgzMzY6MzI4ODAsNTgzMzc6MzI4ODYsNTgzMzg6MzI4ODksNTgzMzk6MzI4OTMsNTgzNDA6MzI4OTUsNTgzNDE6MzI5MDAsNTgzNDI6MzI5MDIsNTgzNDM6MzI5MDEsNTgzNDQ6MzI5MjMsNTgzNDU6MzI5MTUsNTgzNDY6MzI5MjIsNTgzNDc6MzI5NDEsNTgzNDg6MjA4ODAsNTgzNDk6MzI5NDAsNTgzNTA6MzI5ODcsNTgzNTE6MzI5OTcsNTgzNTI6MzI5ODUsNTgzNTM6MzI5ODksNTgzNTQ6MzI5NjQsNTgzNTU6MzI5ODYsNTgzNTY6MzI5ODIsNTgzNTc6MzMwMzMsNTgzNTg6MzMwMDcsNTgzNTk6MzMwMDksNTgzNjA6MzMwNTEsNTgzNjE6MzMwNjUsNTgzNjI6MzMwNTksNTgzNjM6MzMwNzEsNTgzNjQ6MzMwOTksNTg0MzI6Mzg1MzksNTg0MzM6MzMwOTQsNTg0MzQ6MzMwODYsNTg0MzU6MzMxMDcsNTg0MzY6MzMxMDUsNTg0Mzc6MzMwMjAsNTg0Mzg6MzMxMzcsNTg0Mzk6MzMxMzQsNTg0NDA6MzMxMjUsNTg0NDE6MzMxMjYsNTg0NDI6MzMxNDAsNTg0NDM6MzMxNTUsNTg0NDQ6MzMxNjAsNTg0NDU6MzMxNjIsNTg0NDY6MzMxNTIsNTg0NDc6MzMxNTQsNTg0NDg6MzMxODQsNTg0NDk6MzMxNzMsNTg0NTA6MzMxODgsNTg0NTE6MzMxODcsNTg0NTI6MzMxMTksNTg0NTM6MzMxNzEsNTg0NTQ6MzMxOTMsNTg0NTU6MzMyMDAsNTg0NTY6MzMyMDUsNTg0NTc6MzMyMTQsNTg0NTg6MzMyMDgsNTg0NTk6MzMyMTMsNTg0NjA6MzMyMTYsNTg0NjE6MzMyMTgsNTg0NjI6MzMyMTAsNTg0NjM6MzMyMjUsNTg0NjQ6MzMyMjksNTg0NjU6MzMyMzMsNTg0NjY6MzMyNDEsNTg0Njc6MzMyNDAsNTg0Njg6MzMyMjQsNTg0Njk6MzMyNDIsNTg0NzA6MzMyNDcsNTg0NzE6MzMyNDgsNTg0NzI6MzMyNTUsNTg0NzM6MzMyNzQsNTg0NzQ6MzMyNzUsNTg0NzU6MzMyNzgsNTg0NzY6MzMyODEsNTg0Nzc6MzMyODIsNTg0Nzg6MzMyODUsNTg0Nzk6MzMyODcsNTg0ODA6MzMyOTAsNTg0ODE6MzMyOTMsNTg0ODI6MzMyOTYsNTg0ODM6MzMzMDIsNTg0ODQ6MzMzMjEsNTg0ODU6MzMzMjMsNTg0ODY6MzMzMzYsNTg0ODc6MzMzMzEsNTg0ODg6MzMzNDQsNTg0ODk6MzMzNjksNTg0OTA6MzMzNjgsNTg0OTE6MzMzNzMsNTg0OTI6MzMzNzAsNTg0OTM6MzMzNzUsNTg0OTQ6MzMzODAsNTg0OTY6MzMzNzgsNTg0OTc6MzMzODQsNTg0OTg6MzMzODYsNTg0OTk6MzMzODcsNTg1MDA6MzMzMjYsNTg1MDE6MzMzOTMsNTg1MDI6MzMzOTksNTg1MDM6MzM0MDAsNTg1MDQ6MzM0MDYsNTg1MDU6MzM0MjEsNTg1MDY6MzM0MjYsNTg1MDc6MzM0NTEsNTg1MDg6MzM0MzksNTg1MDk6MzM0NjcsNTg1MTA6MzM0NTIsNTg1MTE6MzM1MDUsNTg1MTI6MzM1MDcsNTg1MTM6MzM1MDMsNTg1MTQ6MzM0OTAsNTg1MTU6MzM1MjQsNTg1MTY6MzM1MjMsNTg1MTc6MzM1MzAsNTg1MTg6MzM2ODMsNTg1MTk6MzM1MzksNTg1MjA6MzM1MzEsNTg1MjE6MzM1MjksNTg1MjI6MzM1MDIsNTg1MjM6MzM1NDIsNTg1MjQ6MzM1MDAsNTg1MjU6MzM1NDUsNTg1MjY6MzM0OTcsNTg1Mjc6MzM1ODksNTg1Mjg6MzM1ODgsNTg1Mjk6MzM1NTgsNTg1MzA6MzM1ODYsNTg1MzE6MzM1ODUsNTg1MzI6MzM2MDAsNTg1MzM6MzM1OTMsNTg1MzQ6MzM2MTYsNTg1MzU6MzM2MDUsNTg1MzY6MzM1ODMsNTg1Mzc6MzM1NzksNTg1Mzg6MzM1NTksNTg1Mzk6MzM1NjAsNTg1NDA6MzM2NjksNTg1NDE6MzM2OTAsNTg1NDI6MzM3MDYsNTg1NDM6MzM2OTUsNTg1NDQ6MzM2OTgsNTg1NDU6MzM2ODYsNTg1NDY6MzM1NzEsNTg1NDc6MzM2NzgsNTg1NDg6MzM2NzEsNTg1NDk6MzM2NzQsNTg1NTA6MzM2NjAsNTg1NTE6MzM3MTcsNTg1NTI6MzM2NTEsNTg1NTM6MzM2NTMsNTg1NTQ6MzM2OTYsNTg1NTU6MzM2NzMsNTg1NTY6MzM3MDQsNTg1NTc6MzM3ODAsNTg1NTg6MzM4MTEsNTg1NTk6MzM3NzEsNTg1NjA6MzM3NDIsNTg1NjE6MzM3ODksNTg1NjI6MzM3OTUsNTg1NjM6MzM3NTIsNTg1NjQ6MzM4MDMsNTg1NjU6MzM3MjksNTg1NjY6MzM3ODMsNTg1Njc6MzM3OTksNTg1Njg6MzM3NjAsNTg1Njk6MzM3NzgsNTg1NzA6MzM4MDUsNTg1NzE6MzM4MjYsNTg1NzI6MzM4MjQsNTg1NzM6MzM3MjUsNTg1NzQ6MzM4NDgsNTg1NzU6MzQwNTQsNTg1NzY6MzM3ODcsNTg1Nzc6MzM5MDEsNTg1Nzg6MzM4MzQsNTg1Nzk6MzM4NTIsNTg1ODA6MzQxMzgsNTg1ODE6MzM5MjQsNTg1ODI6MzM5MTEsNTg1ODM6MzM4OTksNTg1ODQ6MzM5NjUsNTg1ODU6MzM5MDIsNTg1ODY6MzM5MjIsNTg1ODc6MzM4OTcsNTg1ODg6MzM4NjIsNTg1ODk6MzM4MzYsNTg1OTA6MzM5MDMsNTg1OTE6MzM5MTMsNTg1OTI6MzM4NDUsNTg1OTM6MzM5OTQsNTg1OTQ6MzM4OTAsNTg1OTU6MzM5NzcsNTg1OTY6MzM5ODMsNTg1OTc6MzM5NTEsNTg1OTg6MzQwMDksNTg1OTk6MzM5OTcsNTg2MDA6MzM5NzksNTg2MDE6MzQwMTAsNTg2MDI6MzRlMyw1ODYwMzozMzk4NSw1ODYwNDozMzk5MCw1ODYwNTozNDAwNiw1ODYwNjozMzk1Myw1ODYwNzozNDA4MSw1ODYwODozNDA0Nyw1ODYwOTozNDAzNiw1ODYxMDozNDA3MSw1ODYxMTozNDA3Miw1ODYxMjozNDA5Miw1ODYxMzozNDA3OSw1ODYxNDozNDA2OSw1ODYxNTozNDA2OCw1ODYxNjozNDA0NCw1ODYxNzozNDExMiw1ODYxODozNDE0Nyw1ODYxOTozNDEzNiw1ODYyMDozNDEyMCw1ODY4ODozNDExMyw1ODY4OTozNDMwNiw1ODY5MDozNDEyMyw1ODY5MTozNDEzMyw1ODY5MjozNDE3Niw1ODY5MzozNDIxMiw1ODY5NDozNDE4NCw1ODY5NTozNDE5Myw1ODY5NjozNDE4Niw1ODY5NzozNDIxNiw1ODY5ODozNDE1Nyw1ODY5OTozNDE5Niw1ODcwMDozNDIwMyw1ODcwMTozNDI4Miw1ODcwMjozNDE4Myw1ODcwMzozNDIwNCw1ODcwNDozNDE2Nyw1ODcwNTozNDE3NCw1ODcwNjozNDE5Miw1ODcwNzozNDI0OSw1ODcwODozNDIzNCw1ODcwOTozNDI1NSw1ODcxMDozNDIzMyw1ODcxMTozNDI1Niw1ODcxMjozNDI2MSw1ODcxMzozNDI2OSw1ODcxNDozNDI3Nyw1ODcxNTozNDI2OCw1ODcxNjozNDI5Nyw1ODcxNzozNDMxNCw1ODcxODozNDMyMyw1ODcxOTozNDMxNSw1ODcyMDozNDMwMiw1ODcyMTozNDI5OCw1ODcyMjozNDMxMCw1ODcyMzozNDMzOCw1ODcyNDozNDMzMCw1ODcyNTozNDM1Miw1ODcyNjozNDM2Nyw1ODcyNzozNDM4MSw1ODcyODoyMDA1Myw1ODcyOTozNDM4OCw1ODczMDozNDM5OSw1ODczMTozNDQwNyw1ODczMjozNDQxNyw1ODczMzozNDQ1MSw1ODczNDozNDQ2Nyw1ODczNTozNDQ3Myw1ODczNjozNDQ3NCw1ODczNzozNDQ0Myw1ODczODozNDQ0NCw1ODczOTozNDQ4Niw1ODc0MDozNDQ3OSw1ODc0MTozNDUwMCw1ODc0MjozNDUwMiw1ODc0MzozNDQ4MCw1ODc0NDozNDUwNSw1ODc0NTozNDg1MSw1ODc0NjozNDQ3NSw1ODc0NzozNDUxNiw1ODc0ODozNDUyNiw1ODc0OTozNDUzNyw1ODc1MDozNDU0MCw1ODc1MjozNDUyNyw1ODc1MzozNDUyMyw1ODc1NDozNDU0Myw1ODc1NTozNDU3OCw1ODc1NjozNDU2Niw1ODc1NzozNDU2OCw1ODc1ODozNDU2MCw1ODc1OTozNDU2Myw1ODc2MDozNDU1NSw1ODc2MTozNDU3Nyw1ODc2MjozNDU2OSw1ODc2MzozNDU3Myw1ODc2NDozNDU1Myw1ODc2NTozNDU3MCw1ODc2NjozNDYxMiw1ODc2NzozNDYyMyw1ODc2ODozNDYxNSw1ODc2OTozNDYxOSw1ODc3MDozNDU5Nyw1ODc3MTozNDYwMSw1ODc3MjozNDU4Niw1ODc3MzozNDY1Niw1ODc3NDozNDY1NSw1ODc3NTozNDY4MCw1ODc3NjozNDYzNiw1ODc3NzozNDYzOCw1ODc3ODozNDY3Niw1ODc3OTozNDY0Nyw1ODc4MDozNDY2NCw1ODc4MTozNDY3MCw1ODc4MjozNDY0OSw1ODc4MzozNDY0Myw1ODc4NDozNDY1OSw1ODc4NTozNDY2Niw1ODc4NjozNDgyMSw1ODc4NzozNDcyMiw1ODc4ODozNDcxOSw1ODc4OTozNDY5MCw1ODc5MDozNDczNSw1ODc5MTozNDc2Myw1ODc5MjozNDc0OSw1ODc5MzozNDc1Miw1ODc5NDozNDc2OCw1ODc5NTozODYxNCw1ODc5NjozNDczMSw1ODc5NzozNDc1Niw1ODc5ODozNDczOSw1ODc5OTozNDc1OSw1ODgwMDozNDc1OCw1ODgwMTozNDc0Nyw1ODgwMjozNDc5OSw1ODgwMzozNDgwMiw1ODgwNDozNDc4NCw1ODgwNTozNDgzMSw1ODgwNjozNDgyOSw1ODgwNzozNDgxNCw1ODgwODozNDgwNiw1ODgwOTozNDgwNyw1ODgxMDozNDgzMCw1ODgxMTozNDc3MCw1ODgxMjozNDgzMyw1ODgxMzozNDgzOCw1ODgxNDozNDgzNyw1ODgxNTozNDg1MCw1ODgxNjozNDg0OSw1ODgxNzozNDg2NSw1ODgxODozNDg3MCw1ODgxOTozNDg3Myw1ODgyMDozNDg1NSw1ODgyMTozNDg3NSw1ODgyMjozNDg4NCw1ODgyMzozNDg4Miw1ODgyNDozNDg5OCw1ODgyNTozNDkwNSw1ODgyNjozNDkxMCw1ODgyNzozNDkxNCw1ODgyODozNDkyMyw1ODgyOTozNDk0NSw1ODgzMDozNDk0Miw1ODgzMTozNDk3NCw1ODgzMjozNDkzMyw1ODgzMzozNDk0MSw1ODgzNDozNDk5Nyw1ODgzNTozNDkzMCw1ODgzNjozNDk0Niw1ODgzNzozNDk2Nyw1ODgzODozNDk2Miw1ODgzOTozNDk5MCw1ODg0MDozNDk2OSw1ODg0MTozNDk3OCw1ODg0MjozNDk1Nyw1ODg0MzozNDk4MCw1ODg0NDozNDk5Miw1ODg0NTozNTAwNyw1ODg0NjozNDk5Myw1ODg0NzozNTAxMSw1ODg0ODozNTAxMiw1ODg0OTozNTAyOCw1ODg1MDozNTAzMiw1ODg1MTozNTAzMyw1ODg1MjozNTAzNyw1ODg1MzozNTA2NSw1ODg1NDozNTA3NCw1ODg1NTozNTA2OCw1ODg1NjozNTA2MCw1ODg1NzozNTA0OCw1ODg1ODozNTA1OCw1ODg1OTozNTA3Niw1ODg2MDozNTA4NCw1ODg2MTozNTA4Miw1ODg2MjozNTA5MSw1ODg2MzozNTEzOSw1ODg2NDozNTEwMiw1ODg2NTozNTEwOSw1ODg2NjozNTExNCw1ODg2NzozNTExNSw1ODg2ODozNTEzNyw1ODg2OTozNTE0MCw1ODg3MDozNTEzMSw1ODg3MTozNTEyNiw1ODg3MjozNTEyOCw1ODg3MzozNTE0OCw1ODg3NDozNTEwMSw1ODg3NTozNTE2OCw1ODg3NjozNTE2Niw1ODk0NDozNTE3NCw1ODk0NTozNTE3Miw1ODk0NjozNTE4MSw1ODk0NzozNTE3OCw1ODk0ODozNTE4Myw1ODk0OTozNTE4OCw1ODk1MDozNTE5MSw1ODk1MTozNTE5OCw1ODk1MjozNTIwMyw1ODk1MzozNTIwOCw1ODk1NDozNTIxMCw1ODk1NTozNTIxOSw1ODk1NjozNTIyNCw1ODk1NzozNTIzMyw1ODk1ODozNTI0MSw1ODk1OTozNTIzOCw1ODk2MDozNTI0NCw1ODk2MTozNTI0Nyw1ODk2MjozNTI1MCw1ODk2MzozNTI1OCw1ODk2NDozNTI2MSw1ODk2NTozNTI2Myw1ODk2NjozNTI2NCw1ODk2NzozNTI5MCw1ODk2ODozNTI5Miw1ODk2OTozNTI5Myw1ODk3MDozNTMwMyw1ODk3MTozNTMxNiw1ODk3MjozNTMyMCw1ODk3MzozNTMzMSw1ODk3NDozNTM1MCw1ODk3NTozNTM0NCw1ODk3NjozNTM0MCw1ODk3NzozNTM1NSw1ODk3ODozNTM1Nyw1ODk3OTozNTM2NSw1ODk4MDozNTM4Miw1ODk4MTozNTM5Myw1ODk4MjozNTQxOSw1ODk4MzozNTQxMCw1ODk4NDozNTM5OCw1ODk4NTozNTQwMCw1ODk4NjozNTQ1Miw1ODk4NzozNTQzNyw1ODk4ODozNTQzNiw1ODk4OTozNTQyNiw1ODk5MDozNTQ2MSw1ODk5MTozNTQ1OCw1ODk5MjozNTQ2MCw1ODk5MzozNTQ5Niw1ODk5NDozNTQ4OSw1ODk5NTozNTQ3Myw1ODk5NjozNTQ5Myw1ODk5NzozNTQ5NCw1ODk5ODozNTQ4Miw1ODk5OTozNTQ5MSw1OWUzOjM1NTI0LDU5MDAxOjM1NTMzLDU5MDAyOjM1NTIyLDU5MDAzOjM1NTQ2LDU5MDA0OjM1NTYzLDU5MDA1OjM1NTcxLDU5MDA2OjM1NTU5LDU5MDA4OjM1NTU2LDU5MDA5OjM1NTY5LDU5MDEwOjM1NjA0LDU5MDExOjM1NTUyLDU5MDEyOjM1NTU0LDU5MDEzOjM1NTc1LDU5MDE0OjM1NTUwLDU5MDE1OjM1NTQ3LDU5MDE2OjM1NTk2LDU5MDE3OjM1NTkxLDU5MDE4OjM1NjEwLDU5MDE5OjM1NTUzLDU5MDIwOjM1NjA2LDU5MDIxOjM1NjAwLDU5MDIyOjM1NjA3LDU5MDIzOjM1NjE2LDU5MDI0OjM1NjM1LDU5MDI1OjM4ODI3LDU5MDI2OjM1NjIyLDU5MDI3OjM1NjI3LDU5MDI4OjM1NjQ2LDU5MDI5OjM1NjI0LDU5MDMwOjM1NjQ5LDU5MDMxOjM1NjYwLDU5MDMyOjM1NjYzLDU5MDMzOjM1NjYyLDU5MDM0OjM1NjU3LDU5MDM1OjM1NjcwLDU5MDM2OjM1Njc1LDU5MDM3OjM1Njc0LDU5MDM4OjM1NjkxLDU5MDM5OjM1Njc5LDU5MDQwOjM1NjkyLDU5MDQxOjM1Njk1LDU5MDQyOjM1NzAwLDU5MDQzOjM1NzA5LDU5MDQ0OjM1NzEyLDU5MDQ1OjM1NzI0LDU5MDQ2OjM1NzI2LDU5MDQ3OjM1NzMwLDU5MDQ4OjM1NzMxLDU5MDQ5OjM1NzM0LDU5MDUwOjM1NzM3LDU5MDUxOjM1NzM4LDU5MDUyOjM1ODk4LDU5MDUzOjM1OTA1LDU5MDU0OjM1OTAzLDU5MDU1OjM1OTEyLDU5MDU2OjM1OTE2LDU5MDU3OjM1OTE4LDU5MDU4OjM1OTIwLDU5MDU5OjM1OTI1LDU5MDYwOjM1OTM4LDU5MDYxOjM1OTQ4LDU5MDYyOjM1OTYwLDU5MDYzOjM1OTYyLDU5MDY0OjM1OTcwLDU5MDY1OjM1OTc3LDU5MDY2OjM1OTczLDU5MDY3OjM1OTc4LDU5MDY4OjM1OTgxLDU5MDY5OjM1OTgyLDU5MDcwOjM1OTg4LDU5MDcxOjM1OTY0LDU5MDcyOjM1OTkyLDU5MDczOjI1MTE3LDU5MDc0OjM2MDEzLDU5MDc1OjM2MDEwLDU5MDc2OjM2MDI5LDU5MDc3OjM2MDE4LDU5MDc4OjM2MDE5LDU5MDc5OjM2MDE0LDU5MDgwOjM2MDIyLDU5MDgxOjM2MDQwLDU5MDgyOjM2MDMzLDU5MDgzOjM2MDY4LDU5MDg0OjM2MDY3LDU5MDg1OjM2MDU4LDU5MDg2OjM2MDkzLDU5MDg3OjM2MDkwLDU5MDg4OjM2MDkxLDU5MDg5OjM2MTAwLDU5MDkwOjM2MTAxLDU5MDkxOjM2MTA2LDU5MDkyOjM2MTAzLDU5MDkzOjM2MTExLDU5MDk0OjM2MTA5LDU5MDk1OjM2MTEyLDU5MDk2OjQwNzgyLDU5MDk3OjM2MTE1LDU5MDk4OjM2MDQ1LDU5MDk5OjM2MTE2LDU5MTAwOjM2MTE4LDU5MTAxOjM2MTk5LDU5MTAyOjM2MjA1LDU5MTAzOjM2MjA5LDU5MTA0OjM2MjExLDU5MTA1OjM2MjI1LDU5MTA2OjM2MjQ5LDU5MTA3OjM2MjkwLDU5MTA4OjM2Mjg2LDU5MTA5OjM2MjgyLDU5MTEwOjM2MzAzLDU5MTExOjM2MzE0LDU5MTEyOjM2MzEwLDU5MTEzOjM2MzAwLDU5MTE0OjM2MzE1LDU5MTE1OjM2Mjk5LDU5MTE2OjM2MzMwLDU5MTE3OjM2MzMxLDU5MTE4OjM2MzE5LDU5MTE5OjM2MzIzLDU5MTIwOjM2MzQ4LDU5MTIxOjM2MzYwLDU5MTIyOjM2MzYxLDU5MTIzOjM2MzUxLDU5MTI0OjM2MzgxLDU5MTI1OjM2MzgyLDU5MTI2OjM2MzY4LDU5MTI3OjM2MzgzLDU5MTI4OjM2NDE4LDU5MTI5OjM2NDA1LDU5MTMwOjM2NDAwLDU5MTMxOjM2NDA0LDU5MTMyOjM2NDI2LDU5MjAwOjM2NDIzLDU5MjAxOjM2NDI1LDU5MjAyOjM2NDI4LDU5MjAzOjM2NDMyLDU5MjA0OjM2NDI0LDU5MjA1OjM2NDQxLDU5MjA2OjM2NDUyLDU5MjA3OjM2NDQ4LDU5MjA4OjM2Mzk0LDU5MjA5OjM2NDUxLDU5MjEwOjM2NDM3LDU5MjExOjM2NDcwLDU5MjEyOjM2NDY2LDU5MjEzOjM2NDc2LDU5MjE0OjM2NDgxLDU5MjE1OjM2NDg3LDU5MjE2OjM2NDg1LDU5MjE3OjM2NDg0LDU5MjE4OjM2NDkxLDU5MjE5OjM2NDkwLDU5MjIwOjM2NDk5LDU5MjIxOjM2NDk3LDU5MjIyOjM2NTAwLDU5MjIzOjM2NTA1LDU5MjI0OjM2NTIyLDU5MjI1OjM2NTEzLDU5MjI2OjM2NTI0LDU5MjI3OjM2NTI4LDU5MjI4OjM2NTUwLDU5MjI5OjM2NTI5LDU5MjMwOjM2NTQyLDU5MjMxOjM2NTQ5LDU5MjMyOjM2NTUyLDU5MjMzOjM2NTU1LDU5MjM0OjM2NTcxLDU5MjM1OjM2NTc5LDU5MjM2OjM2NjA0LDU5MjM3OjM2NjAzLDU5MjM4OjM2NTg3LDU5MjM5OjM2NjA2LDU5MjQwOjM2NjE4LDU5MjQxOjM2NjEzLDU5MjQyOjM2NjI5LDU5MjQzOjM2NjI2LDU5MjQ0OjM2NjMzLDU5MjQ1OjM2NjI3LDU5MjQ2OjM2NjM2LDU5MjQ3OjM2NjM5LDU5MjQ4OjM2NjM1LDU5MjQ5OjM2NjIwLDU5MjUwOjM2NjQ2LDU5MjUxOjM2NjU5LDU5MjUyOjM2NjY3LDU5MjUzOjM2NjY1LDU5MjU0OjM2Njc3LDU5MjU1OjM2Njc0LDU5MjU2OjM2NjcwLDU5MjU3OjM2Njg0LDU5MjU4OjM2NjgxLDU5MjU5OjM2Njc4LDU5MjYwOjM2Njg2LDU5MjYxOjM2Njk1LDU5MjYyOjM2NzAwLDU5MjY0OjM2NzA2LDU5MjY1OjM2NzA3LDU5MjY2OjM2NzA4LDU5MjY3OjM2NzY0LDU5MjY4OjM2NzY3LDU5MjY5OjM2NzcxLDU5MjcwOjM2NzgxLDU5MjcxOjM2NzgzLDU5MjcyOjM2NzkxLDU5MjczOjM2ODI2LDU5Mjc0OjM2ODM3LDU5Mjc1OjM2ODM0LDU5Mjc2OjM2ODQyLDU5Mjc3OjM2ODQ3LDU5Mjc4OjM2OTk5LDU5Mjc5OjM2ODUyLDU5MjgwOjM2ODY5LDU5MjgxOjM2ODU3LDU5MjgyOjM2ODU4LDU5MjgzOjM2ODgxLDU5Mjg0OjM2ODg1LDU5Mjg1OjM2ODk3LDU5Mjg2OjM2ODc3LDU5Mjg3OjM2ODk0LDU5Mjg4OjM2ODg2LDU5Mjg5OjM2ODc1LDU5MjkwOjM2OTAzLDU5MjkxOjM2OTE4LDU5MjkyOjM2OTE3LDU5MjkzOjM2OTIxLDU5Mjk0OjM2ODU2LDU5Mjk1OjM2OTQzLDU5Mjk2OjM2OTQ0LDU5Mjk3OjM2OTQ1LDU5Mjk4OjM2OTQ2LDU5Mjk5OjM2ODc4LDU5MzAwOjM2OTM3LDU5MzAxOjM2OTI2LDU5MzAyOjM2OTUwLDU5MzAzOjM2OTUyLDU5MzA0OjM2OTU4LDU5MzA1OjM2OTY4LDU5MzA2OjM2OTc1LDU5MzA3OjM2OTgyLDU5MzA4OjM4NTY4LDU5MzA5OjM2OTc4LDU5MzEwOjM2OTk0LDU5MzExOjM2OTg5LDU5MzEyOjM2OTkzLDU5MzEzOjM2OTkyLDU5MzE0OjM3MDAyLDU5MzE1OjM3MDAxLDU5MzE2OjM3MDA3LDU5MzE3OjM3MDMyLDU5MzE4OjM3MDM5LDU5MzE5OjM3MDQxLDU5MzIwOjM3MDQ1LDU5MzIxOjM3MDkwLDU5MzIyOjM3MDkyLDU5MzIzOjI1MTYwLDU5MzI0OjM3MDgzLDU5MzI1OjM3MTIyLDU5MzI2OjM3MTM4LDU5MzI3OjM3MTQ1LDU5MzI4OjM3MTcwLDU5MzI5OjM3MTY4LDU5MzMwOjM3MTk0LDU5MzMxOjM3MjA2LDU5MzMyOjM3MjA4LDU5MzMzOjM3MjE5LDU5MzM0OjM3MjIxLDU5MzM1OjM3MjI1LDU5MzM2OjM3MjM1LDU5MzM3OjM3MjM0LDU5MzM4OjM3MjU5LDU5MzM5OjM3MjU3LDU5MzQwOjM3MjUwLDU5MzQxOjM3MjgyLDU5MzQyOjM3MjkxLDU5MzQzOjM3Mjk1LDU5MzQ0OjM3MjkwLDU5MzQ1OjM3MzAxLDU5MzQ2OjM3MzAwLDU5MzQ3OjM3MzA2LDU5MzQ4OjM3MzEyLDU5MzQ5OjM3MzEzLDU5MzUwOjM3MzIxLDU5MzUxOjM3MzIzLDU5MzUyOjM3MzI4LDU5MzUzOjM3MzM0LDU5MzU0OjM3MzQzLDU5MzU1OjM3MzQ1LDU5MzU2OjM3MzM5LDU5MzU3OjM3MzcyLDU5MzU4OjM3MzY1LDU5MzU5OjM3MzY2LDU5MzYwOjM3NDA2LDU5MzYxOjM3Mzc1LDU5MzYyOjM3Mzk2LDU5MzYzOjM3NDIwLDU5MzY0OjM3Mzk3LDU5MzY1OjM3MzkzLDU5MzY2OjM3NDcwLDU5MzY3OjM3NDYzLDU5MzY4OjM3NDQ1LDU5MzY5OjM3NDQ5LDU5MzcwOjM3NDc2LDU5MzcxOjM3NDQ4LDU5MzcyOjM3NTI1LDU5MzczOjM3NDM5LDU5Mzc0OjM3NDUxLDU5Mzc1OjM3NDU2LDU5Mzc2OjM3NTMyLDU5Mzc3OjM3NTI2LDU5Mzc4OjM3NTIzLDU5Mzc5OjM3NTMxLDU5MzgwOjM3NDY2LDU5MzgxOjM3NTgzLDU5MzgyOjM3NTYxLDU5MzgzOjM3NTU5LDU5Mzg0OjM3NjA5LDU5Mzg1OjM3NjQ3LDU5Mzg2OjM3NjI2LDU5Mzg3OjM3NzAwLDU5Mzg4OjM3Njc4LDU5NDU2OjM3NjU3LDU5NDU3OjM3NjY2LDU5NDU4OjM3NjU4LDU5NDU5OjM3NjY3LDU5NDYwOjM3NjkwLDU5NDYxOjM3Njg1LDU5NDYyOjM3NjkxLDU5NDYzOjM3NzI0LDU5NDY0OjM3NzI4LDU5NDY1OjM3NzU2LDU5NDY2OjM3NzQyLDU5NDY3OjM3NzE4LDU5NDY4OjM3ODA4LDU5NDY5OjM3ODA0LDU5NDcwOjM3ODA1LDU5NDcxOjM3NzgwLDU5NDcyOjM3ODE3LDU5NDczOjM3ODQ2LDU5NDc0OjM3ODQ3LDU5NDc1OjM3ODY0LDU5NDc2OjM3ODYxLDU5NDc3OjM3ODQ4LDU5NDc4OjM3ODI3LDU5NDc5OjM3ODUzLDU5NDgwOjM3ODQwLDU5NDgxOjM3ODMyLDU5NDgyOjM3ODYwLDU5NDgzOjM3OTE0LDU5NDg0OjM3OTA4LDU5NDg1OjM3OTA3LDU5NDg2OjM3ODkxLDU5NDg3OjM3ODk1LDU5NDg4OjM3OTA0LDU5NDg5OjM3OTQyLDU5NDkwOjM3OTMxLDU5NDkxOjM3OTQxLDU5NDkyOjM3OTIxLDU5NDkzOjM3OTQ2LDU5NDk0OjM3OTUzLDU5NDk1OjM3OTcwLDU5NDk2OjM3OTU2LDU5NDk3OjM3OTc5LDU5NDk4OjM3OTg0LDU5NDk5OjM3OTg2LDU5NTAwOjM3OTgyLDU5NTAxOjM3OTk0LDU5NTAyOjM3NDE3LDU5NTAzOjM4ZTMsNTk1MDQ6MzgwMDUsNTk1MDU6MzgwMDcsNTk1MDY6MzgwMTMsNTk1MDc6Mzc5NzgsNTk1MDg6MzgwMTIsNTk1MDk6MzgwMTQsNTk1MTA6MzgwMTcsNTk1MTE6MzgwMTUsNTk1MTI6MzgyNzQsNTk1MTM6MzgyNzksNTk1MTQ6MzgyODIsNTk1MTU6MzgyOTIsNTk1MTY6MzgyOTQsNTk1MTc6MzgyOTYsNTk1MTg6MzgyOTcsNTk1MjA6MzgzMDQsNTk1MjE6MzgzMTIsNTk1MjI6MzgzMTEsNTk1MjM6MzgzMTcsNTk1MjQ6MzgzMzIsNTk1MjU6MzgzMzEsNTk1MjY6MzgzMjksNTk1Mjc6MzgzMzQsNTk1Mjg6MzgzNDYsNTk1Mjk6Mjg2NjIsNTk1MzA6MzgzMzksNTk1MzE6MzgzNDksNTk1MzI6MzgzNDgsNTk1MzM6MzgzNTcsNTk1MzQ6MzgzNTYsNTk1MzU6MzgzNTgsNTk1MzY6MzgzNjQsNTk1Mzc6MzgzNjksNTk1Mzg6MzgzNzMsNTk1Mzk6MzgzNzAsNTk1NDA6Mzg0MzMsNTk1NDE6Mzg0NDAsNTk1NDI6Mzg0NDYsNTk1NDM6Mzg0NDcsNTk1NDQ6Mzg0NjYsNTk1NDU6Mzg0NzYsNTk1NDY6Mzg0NzksNTk1NDc6Mzg0NzUsNTk1NDg6Mzg1MTksNTk1NDk6Mzg0OTIsNTk1NTA6Mzg0OTQsNTk1NTE6Mzg0OTMsNTk1NTI6Mzg0OTUsNTk1NTM6Mzg1MDIsNTk1NTQ6Mzg1MTQsNTk1NTU6Mzg1MDgsNTk1NTY6Mzg1NDEsNTk1NTc6Mzg1NTIsNTk1NTg6Mzg1NDksNTk1NTk6Mzg1NTEsNTk1NjA6Mzg1NzAsNTk1NjE6Mzg1NjcsNTk1NjI6Mzg1NzcsNTk1NjM6Mzg1NzgsNTk1NjQ6Mzg1NzYsNTk1NjU6Mzg1ODAsNTk1NjY6Mzg1ODIsNTk1Njc6Mzg1ODQsNTk1Njg6Mzg1ODUsNTk1Njk6Mzg2MDYsNTk1NzA6Mzg2MDMsNTk1NzE6Mzg2MDEsNTk1NzI6Mzg2MDUsNTk1NzM6MzUxNDksNTk1NzQ6Mzg2MjAsNTk1NzU6Mzg2NjksNTk1NzY6Mzg2MTMsNTk1Nzc6Mzg2NDksNTk1Nzg6Mzg2NjAsNTk1Nzk6Mzg2NjIsNTk1ODA6Mzg2NjQsNTk1ODE6Mzg2NzUsNTk1ODI6Mzg2NzAsNTk1ODM6Mzg2NzMsNTk1ODQ6Mzg2NzEsNTk1ODU6Mzg2NzgsNTk1ODY6Mzg2ODEsNTk1ODc6Mzg2OTIsNTk1ODg6Mzg2OTgsNTk1ODk6Mzg3MDQsNTk1OTA6Mzg3MTMsNTk1OTE6Mzg3MTcsNTk1OTI6Mzg3MTgsNTk1OTM6Mzg3MjQsNTk1OTQ6Mzg3MjYsNTk1OTU6Mzg3MjgsNTk1OTY6Mzg3MjIsNTk1OTc6Mzg3MjksNTk1OTg6Mzg3NDgsNTk1OTk6Mzg3NTIsNTk2MDA6Mzg3NTYsNTk2MDE6Mzg3NTgsNTk2MDI6Mzg3NjAsNTk2MDM6MjEyMDIsNTk2MDQ6Mzg3NjMsNTk2MDU6Mzg3NjksNTk2MDY6Mzg3NzcsNTk2MDc6Mzg3ODksNTk2MDg6Mzg3ODAsNTk2MDk6Mzg3ODUsNTk2MTA6Mzg3NzgsNTk2MTE6Mzg3OTAsNTk2MTI6Mzg3OTUsNTk2MTM6Mzg3OTksNTk2MTQ6Mzg4MDAsNTk2MTU6Mzg4MTIsNTk2MTY6Mzg4MjQsNTk2MTc6Mzg4MjIsNTk2MTg6Mzg4MTksNTk2MTk6Mzg4MzUsNTk2MjA6Mzg4MzYsNTk2MjE6Mzg4NTEsNTk2MjI6Mzg4NTQsNTk2MjM6Mzg4NTYsXFxuNTk2MjQ6Mzg4NTksNTk2MjU6Mzg4NzYsNTk2MjY6Mzg4OTMsNTk2Mjc6NDA3ODMsNTk2Mjg6Mzg4OTgsNTk2Mjk6MzE0NTUsNTk2MzA6Mzg5MDIsNTk2MzE6Mzg5MDEsNTk2MzI6Mzg5MjcsNTk2MzM6Mzg5MjQsNTk2MzQ6Mzg5NjgsNTk2MzU6Mzg5NDgsNTk2MzY6Mzg5NDUsNTk2Mzc6Mzg5NjcsNTk2Mzg6Mzg5NzMsNTk2Mzk6Mzg5ODIsNTk2NDA6Mzg5OTEsNTk2NDE6Mzg5ODcsNTk2NDI6MzkwMTksNTk2NDM6MzkwMjMsNTk2NDQ6MzkwMjQsNTk3MTI6MzkwMjUsNTk3MTM6MzkwMjgsNTk3MTQ6MzkwMjcsNTk3MTU6MzkwODIsNTk3MTY6MzkwODcsNTk3MTc6MzkwODksNTk3MTg6MzkwOTQsNTk3MTk6MzkxMDgsNTk3MjA6MzkxMDcsNTk3MjE6MzkxMTAsNTk3MjI6MzkxNDUsNTk3MjM6MzkxNDcsNTk3MjQ6MzkxNzEsNTk3MjU6MzkxNzcsNTk3MjY6MzkxODYsNTk3Mjc6MzkxODgsNTk3Mjg6MzkxOTIsNTk3Mjk6MzkyMDEsNTk3MzA6MzkxOTcsNTk3MzE6MzkxOTgsNTk3MzI6MzkyMDQsNTk3MzM6MzkyMDAsNTk3MzQ6MzkyMTIsNTk3MzU6MzkyMTQsNTk3MzY6MzkyMjksNTk3Mzc6MzkyMzAsNTk3Mzg6MzkyMzQsNTk3Mzk6MzkyNDEsNTk3NDA6MzkyMzcsNTk3NDE6MzkyNDgsNTk3NDI6MzkyNDMsNTk3NDM6MzkyNDksNTk3NDQ6MzkyNTAsNTk3NDU6MzkyNDQsNTk3NDY6MzkyNTMsNTk3NDc6MzkzMTksNTk3NDg6MzkzMjAsNTk3NDk6MzkzMzMsNTk3NTA6MzkzNDEsNTk3NTE6MzkzNDIsNTk3NTI6MzkzNTYsNTk3NTM6MzkzOTEsNTk3NTQ6MzkzODcsNTk3NTU6MzkzODksNTk3NTY6MzkzODQsNTk3NTc6MzkzNzcsNTk3NTg6Mzk0MDUsNTk3NTk6Mzk0MDYsNTk3NjA6Mzk0MDksNTk3NjE6Mzk0MTAsNTk3NjI6Mzk0MTksNTk3NjM6Mzk0MTYsNTk3NjQ6Mzk0MjUsNTk3NjU6Mzk0MzksNTk3NjY6Mzk0MjksNTk3Njc6MzkzOTQsNTk3Njg6Mzk0NDksNTk3Njk6Mzk0NjcsNTk3NzA6Mzk0NzksNTk3NzE6Mzk0OTMsNTk3NzI6Mzk0OTAsNTk3NzM6Mzk0ODgsNTk3NzQ6Mzk0OTEsNTk3NzY6Mzk0ODYsNTk3Nzc6Mzk1MDksNTk3Nzg6Mzk1MDEsNTk3Nzk6Mzk1MTUsNTk3ODA6Mzk1MTEsNTk3ODE6Mzk1MTksNTk3ODI6Mzk1MjIsNTk3ODM6Mzk1MjUsNTk3ODQ6Mzk1MjQsNTk3ODU6Mzk1MjksNTk3ODY6Mzk1MzEsNTk3ODc6Mzk1MzAsNTk3ODg6Mzk1OTcsNTk3ODk6Mzk2MDAsNTk3OTA6Mzk2MTIsNTk3OTE6Mzk2MTYsNTk3OTI6Mzk2MzEsNTk3OTM6Mzk2MzMsNTk3OTQ6Mzk2MzUsNTk3OTU6Mzk2MzYsNTk3OTY6Mzk2NDYsNTk3OTc6Mzk2NDcsNTk3OTg6Mzk2NTAsNTk3OTk6Mzk2NTEsNTk4MDA6Mzk2NTQsNTk4MDE6Mzk2NjMsNTk4MDI6Mzk2NTksNTk4MDM6Mzk2NjIsNTk4MDQ6Mzk2NjgsNTk4MDU6Mzk2NjUsNTk4MDY6Mzk2NzEsNTk4MDc6Mzk2NzUsNTk4MDg6Mzk2ODYsNTk4MDk6Mzk3MDQsNTk4MTA6Mzk3MDYsNTk4MTE6Mzk3MTEsNTk4MTI6Mzk3MTQsNTk4MTM6Mzk3MTUsNTk4MTQ6Mzk3MTcsNTk4MTU6Mzk3MTksNTk4MTY6Mzk3MjAsNTk4MTc6Mzk3MjEsNTk4MTg6Mzk3MjIsNTk4MTk6Mzk3MjYsNTk4MjA6Mzk3MjcsNTk4MjE6Mzk3MzAsNTk4MjI6Mzk3NDgsNTk4MjM6Mzk3NDcsNTk4MjQ6Mzk3NTksNTk4MjU6Mzk3NTcsNTk4MjY6Mzk3NTgsNTk4Mjc6Mzk3NjEsNTk4Mjg6Mzk3NjgsNTk4Mjk6Mzk3OTYsNTk4MzA6Mzk4MjcsNTk4MzE6Mzk4MTEsNTk4MzI6Mzk4MjUsNTk4MzM6Mzk4MzAsNTk4MzQ6Mzk4MzEsNTk4MzU6Mzk4MzksNTk4MzY6Mzk4NDAsNTk4Mzc6Mzk4NDgsNTk4Mzg6Mzk4NjAsNTk4Mzk6Mzk4NzIsNTk4NDA6Mzk4ODIsNTk4NDE6Mzk4NjUsNTk4NDI6Mzk4NzgsNTk4NDM6Mzk4ODcsNTk4NDQ6Mzk4ODksNTk4NDU6Mzk4OTAsNTk4NDY6Mzk5MDcsNTk4NDc6Mzk5MDYsNTk4NDg6Mzk5MDgsNTk4NDk6Mzk4OTIsNTk4NTA6Mzk5MDUsNTk4NTE6Mzk5OTQsNTk4NTI6Mzk5MjIsNTk4NTM6Mzk5MjEsNTk4NTQ6Mzk5MjAsNTk4NTU6Mzk5NTcsNTk4NTY6Mzk5NTYsNTk4NTc6Mzk5NDUsNTk4NTg6Mzk5NTUsNTk4NTk6Mzk5NDgsNTk4NjA6Mzk5NDIsNTk4NjE6Mzk5NDQsNTk4NjI6Mzk5NTQsNTk4NjM6Mzk5NDYsNTk4NjQ6Mzk5NDAsNTk4NjU6Mzk5ODIsNTk4NjY6Mzk5NjMsNTk4Njc6Mzk5NzMsNTk4Njg6Mzk5NzIsNTk4Njk6Mzk5NjksNTk4NzA6Mzk5ODQsNTk4NzE6NDAwMDcsNTk4NzI6Mzk5ODYsNTk4NzM6NDAwMDYsNTk4NzQ6Mzk5OTgsNTk4NzU6NDAwMjYsNTk4NzY6NDAwMzIsNTk4Nzc6NDAwMzksNTk4Nzg6NDAwNTQsNTk4Nzk6NDAwNTYsNTk4ODA6NDAxNjcsNTk4ODE6NDAxNzIsNTk4ODI6NDAxNzYsNTk4ODM6NDAyMDEsNTk4ODQ6NDAyMDAsNTk4ODU6NDAxNzEsNTk4ODY6NDAxOTUsNTk4ODc6NDAxOTgsNTk4ODg6NDAyMzQsNTk4ODk6NDAyMzAsNTk4OTA6NDAzNjcsNTk4OTE6NDAyMjcsNTk4OTI6NDAyMjMsNTk4OTM6NDAyNjAsNTk4OTQ6NDAyMTMsNTk4OTU6NDAyMTAsNTk4OTY6NDAyNTcsNTk4OTc6NDAyNTUsNTk4OTg6NDAyNTQsNTk4OTk6NDAyNjIsNTk5MDA6NDAyNjQsNTk5Njg6NDAyODUsNTk5Njk6NDAyODYsNTk5NzA6NDAyOTIsNTk5NzE6NDAyNzMsNTk5NzI6NDAyNzIsNTk5NzM6NDAyODEsNTk5NzQ6NDAzMDYsNTk5NzU6NDAzMjksNTk5NzY6NDAzMjcsNTk5Nzc6NDAzNjMsNTk5Nzg6NDAzMDMsNTk5Nzk6NDAzMTQsNTk5ODA6NDAzNDYsNTk5ODE6NDAzNTYsNTk5ODI6NDAzNjEsNTk5ODM6NDAzNzAsNTk5ODQ6NDAzODgsNTk5ODU6NDAzODUsNTk5ODY6NDAzNzksNTk5ODc6NDAzNzYsNTk5ODg6NDAzNzgsNTk5ODk6NDAzOTAsNTk5OTA6NDAzOTksNTk5OTE6NDAzODYsNTk5OTI6NDA0MDksNTk5OTM6NDA0MDMsNTk5OTQ6NDA0NDAsNTk5OTU6NDA0MjIsNTk5OTY6NDA0MjksNTk5OTc6NDA0MzEsNTk5OTg6NDA0NDUsNTk5OTk6NDA0NzQsNmU0OjQwNDc1LDYwMDAxOjQwNDc4LDYwMDAyOjQwNTY1LDYwMDAzOjQwNTY5LDYwMDA0OjQwNTczLDYwMDA1OjQwNTc3LDYwMDA2OjQwNTg0LDYwMDA3OjQwNTg3LDYwMDA4OjQwNTg4LDYwMDA5OjQwNTk0LDYwMDEwOjQwNTk3LDYwMDExOjQwNTkzLDYwMDEyOjQwNjA1LDYwMDEzOjQwNjEzLDYwMDE0OjQwNjE3LDYwMDE1OjQwNjMyLDYwMDE2OjQwNjE4LDYwMDE3OjQwNjIxLDYwMDE4OjM4NzUzLDYwMDE5OjQwNjUyLDYwMDIwOjQwNjU0LDYwMDIxOjQwNjU1LDYwMDIyOjQwNjU2LDYwMDIzOjQwNjYwLDYwMDI0OjQwNjY4LDYwMDI1OjQwNjcwLDYwMDI2OjQwNjY5LDYwMDI3OjQwNjcyLDYwMDI4OjQwNjc3LDYwMDI5OjQwNjgwLDYwMDMwOjQwNjg3LDYwMDMyOjQwNjkyLDYwMDMzOjQwNjk0LDYwMDM0OjQwNjk1LDYwMDM1OjQwNjk3LDYwMDM2OjQwNjk5LDYwMDM3OjQwNzAwLDYwMDM4OjQwNzAxLDYwMDM5OjQwNzExLDYwMDQwOjQwNzEyLDYwMDQxOjMwMzkxLDYwMDQyOjQwNzI1LDYwMDQzOjQwNzM3LDYwMDQ0OjQwNzQ4LDYwMDQ1OjQwNzY2LDYwMDQ2OjQwNzc4LDYwMDQ3OjQwNzg2LDYwMDQ4OjQwNzg4LDYwMDQ5OjQwODAzLDYwMDUwOjQwNzk5LDYwMDUxOjQwODAwLDYwMDUyOjQwODAxLDYwMDUzOjQwODA2LDYwMDU0OjQwODA3LDYwMDU1OjQwODEyLDYwMDU2OjQwODEwLDYwMDU3OjQwODIzLDYwMDU4OjQwODE4LDYwMDU5OjQwODIyLDYwMDYwOjQwODUzLDYwMDYxOjQwODYwLDYwMDYyOjQwODY0LDYwMDYzOjIyNTc1LDYwMDY0OjI3MDc5LDYwMDY1OjM2OTUzLDYwMDY2OjI5Nzk2LDYwMDY3OjIwOTU2LDYwMDY4OjI5MDgxfX0sZnVuY3Rpb24obyxlLHIpe1xcXCJ1c2Ugc3RyaWN0XFxcIjtmdW5jdGlvbiB0KG8sZSxyLHQpe2UuZGVncmVlKCk8ci5kZWdyZWUoKSYmKHc9W3IsZV0sZT13WzBdLHI9d1sxXSk7Zm9yKHZhciBjPWUscz1yLGE9by56ZXJvLGQ9by5vbmU7cy5kZWdyZWUoKT49dC8yOyl7dmFyIG49YyxsPWE7aWYoYz1zLGE9ZCxjLmlzWmVybygpKXJldHVybiBudWxsO3M9bjtmb3IodmFyIGk9by56ZXJvLEI9Yy5nZXRDb2VmZmljaWVudChjLmRlZ3JlZSgpKSxrPW8uaW52ZXJzZShCKTtzLmRlZ3JlZSgpPj1jLmRlZ3JlZSgpJiYhcy5pc1plcm8oKTspe3ZhciB1PXMuZGVncmVlKCktYy5kZWdyZWUoKSxDPW8ubXVsdGlwbHkocy5nZXRDb2VmZmljaWVudChzLmRlZ3JlZSgpKSxrKTtpPWkuYWRkT3JTdWJ0cmFjdChvLmJ1aWxkTW9ub21pYWwodSxDKSkscz1zLmFkZE9yU3VidHJhY3QoYy5tdWx0aXBseUJ5TW9ub21pYWwodSxDKSl9aWYoZD1pLm11bHRpcGx5UG9seShhKS5hZGRPclN1YnRyYWN0KGwpLHMuZGVncmVlKCk+PWMuZGVncmVlKCkpcmV0dXJuIG51bGx9dmFyIG09ZC5nZXRDb2VmZmljaWVudCgwKTtpZigwPT09bSlyZXR1cm4gbnVsbDt2YXIgZj1vLmludmVyc2UobSk7cmV0dXJuW2QubXVsdGlwbHkoZikscy5tdWx0aXBseShmKV07dmFyIHd9ZnVuY3Rpb24gYyhvLGUpe3ZhciByPWUuZGVncmVlKCk7aWYoMT09PXIpcmV0dXJuW2UuZ2V0Q29lZmZpY2llbnQoMSldO2Zvcih2YXIgdD1uZXcgQXJyYXkociksYz0wLHM9MTtzPG8uc2l6ZSYmYzxyO3MrKykwPT09ZS5ldmFsdWF0ZUF0KHMpJiYodFtjXT1vLmludmVyc2UocyksYysrKTtyZXR1cm4gYyE9PXI/bnVsbDp0fWZ1bmN0aW9uIHMobyxlLHIpe2Zvcih2YXIgdD1yLmxlbmd0aCxjPW5ldyBBcnJheSh0KSxzPTA7czx0O3MrKyl7Zm9yKHZhciBhPW8uaW52ZXJzZShyW3NdKSxuPTEsbD0wO2w8dDtsKyspcyE9PWwmJihuPW8ubXVsdGlwbHkobixkLmFkZE9yU3VidHJhY3RHRigxLG8ubXVsdGlwbHkocltsXSxhKSkpKTtjW3NdPW8ubXVsdGlwbHkoZS5ldmFsdWF0ZUF0KGEpLG8uaW52ZXJzZShuKSksMCE9PW8uZ2VuZXJhdG9yQmFzZSYmKGNbc109by5tdWx0aXBseShjW3NdLGEpKX1yZXR1cm4gY31mdW5jdGlvbiBhKG8sZSl7dmFyIHI9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG8ubGVuZ3RoKTtyLnNldChvKTtmb3IodmFyIGE9bmV3IGQuZGVmYXVsdCgyODUsMjU2LDApLGw9bmV3IG4uZGVmYXVsdChhLHIpLGk9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGUpLEI9ITEsaz0wO2s8ZTtrKyspe3ZhciB1PWwuZXZhbHVhdGVBdChhLmV4cChrK2EuZ2VuZXJhdG9yQmFzZSkpO2lbaS5sZW5ndGgtMS1rXT11LDAhPT11JiYoQj0hMCl9aWYoIUIpcmV0dXJuIHI7dmFyIEM9bmV3IG4uZGVmYXVsdChhLGkpLG09dChhLGEuYnVpbGRNb25vbWlhbChlLDEpLEMsZSk7aWYobnVsbD09PW0pcmV0dXJuIG51bGw7dmFyIGY9YyhhLG1bMF0pO2lmKG51bGw9PWYpcmV0dXJuIG51bGw7Zm9yKHZhciB3PXMoYSxtWzFdLGYpLFA9MDtQPGYubGVuZ3RoO1ArKyl7dmFyIHY9ci5sZW5ndGgtMS1hLmxvZyhmW1BdKTtpZih2PDApcmV0dXJuIG51bGw7clt2XT1kLmFkZE9yU3VidHJhY3RHRihyW3ZdLHdbUF0pfXJldHVybiByfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTt2YXIgZD1yKDEpLG49cigyKTtlLmRlY29kZT1hfSxmdW5jdGlvbihvLGUscil7XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSxlLlZFUlNJT05TPVt7aW5mb0JpdHM6bnVsbCx2ZXJzaW9uTnVtYmVyOjEsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6W10sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazo3LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE5fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjEwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE2fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjEzLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEzfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjE3LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjl9XX1dfSx7aW5mb0JpdHM6bnVsbCx2ZXJzaW9uTnVtYmVyOjIsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMThdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MTAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MzR9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MTYsZWNCbG9ja3M6W3tudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6Mjh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjIsZWNCbG9ja3M6W3tudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjJ9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6bnVsbCx2ZXJzaW9uTnVtYmVyOjMsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMjJdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MTUsZWNCbG9ja3M6W3tudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NTV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjYsZWNCbG9ja3M6W3tudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDR9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MTgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTd9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjIsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTN9XX1dfSx7aW5mb0JpdHM6bnVsbCx2ZXJzaW9uTnVtYmVyOjQsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMjZdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MjAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6ODB9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MTgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MzJ9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjYsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjR9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MTYsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6OX1dfV19LHtpbmZvQml0czpudWxsLHZlcnNpb25OdW1iZXI6NSxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzMF0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazoyNixlY0Jsb2Nrczpbe251bUJsb2NrczoxLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMDh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjQsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDN9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MTgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTV9LHtudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjIsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTF9LHtudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTJ9XX1dfSx7aW5mb0JpdHM6bnVsbCx2ZXJzaW9uTnVtYmVyOjYsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMzRdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MTgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6Njh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MTYsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6Mjd9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjQsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTl9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTV9XX1dfSx7aW5mb0JpdHM6MzE4OTIsdmVyc2lvbk51bWJlcjo3LGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDIyLDM4XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjIwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjc4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjE4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjMxfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjE4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE0fSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI2LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEzfSx7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE0fV19XX0se2luZm9CaXRzOjM0MjM2LHZlcnNpb25OdW1iZXI6OCxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwyNCw0Ml0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazoyNCxlY0Jsb2Nrczpbe251bUJsb2NrczoyLGRhdGFDb2Rld29yZHNQZXJCbG9jazo5N31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyMixlY0Jsb2Nrczpbe251bUJsb2NrczoyLGRhdGFDb2Rld29yZHNQZXJCbG9jazozOH0se251bUJsb2NrczoyLGRhdGFDb2Rld29yZHNQZXJCbG9jazozOX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyMixlY0Jsb2Nrczpbe251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxOH0se251bUJsb2NrczoyLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxOX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyNixlY0Jsb2Nrczpbe251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNH0se251bUJsb2NrczoyLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNX1dfV19LHtpbmZvQml0czozOTU3Nyx2ZXJzaW9uTnVtYmVyOjksYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMjYsNDZdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE2fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjIyLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjM2fSx7bnVtQmxvY2tzOjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjM3fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjIwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE2fSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE3fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI0LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEyfSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEzfV19XX0se2luZm9CaXRzOjQyMTk1LHZlcnNpb25OdW1iZXI6MTAsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMjgsNTBdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MTgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6Njh9LHtudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6Njl9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjYsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDN9LHtudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDR9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjQsZWNCbG9ja3M6W3tudW1CbG9ja3M6NixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTl9LHtudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjB9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6NixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTV9LHtudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6NDgxMTgsdmVyc2lvbk51bWJlcjoxMSxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzMCw1NF0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazoyMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazo4MX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoxLGRhdGFDb2Rld29yZHNQZXJCbG9jazo1MH0se251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazo1MX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyMn0se251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyM31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyNCxlY0Jsb2Nrczpbe251bUJsb2NrczozLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMn0se251bUJsb2Nrczo4LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxM31dfV19LHtpbmZvQml0czo1MTA0Mix2ZXJzaW9uTnVtYmVyOjEyLGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDMyLDU4XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjI0LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjkyfSx7bnVtQmxvY2tzOjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjkzfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjIyLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjYsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjM2fSx7bnVtQmxvY2tzOjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjM3fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI2LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjIwfSx7bnVtQmxvY2tzOjYsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjIxfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE0fSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fV19XX0se2luZm9CaXRzOjU1MzY3LHZlcnNpb25OdW1iZXI6MTMsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMzQsNjJdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MjYsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTA3fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjIyLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjgsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjM3fSx7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjM4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI0LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjgsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjIwfSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjIxfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjIyLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEyLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMX0se251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMn1dfV19LHtpbmZvQml0czo1ODg5Myx2ZXJzaW9uTnVtYmVyOjE0LGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDI2LDQ2LDY2XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExNX0se251bUJsb2NrczoxLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTZ9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjQsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDB9LHtudW1CbG9ja3M6NSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDF9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE2fSx7bnVtQmxvY2tzOjUsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE3fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI0LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjExLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMn0se251bUJsb2Nrczo1LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxM31dfV19LHtpbmZvQml0czo2Mzc4NCx2ZXJzaW9uTnVtYmVyOjE1LGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDI2LDQ4LDcwXSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjIyLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjUsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjg3fSx7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjg4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI0LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjUsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQxfSx7bnVtQmxvY2tzOjUsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQyfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjUsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI0fSx7bnVtQmxvY2tzOjcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI0LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjExLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMn0se251bUJsb2Nrczo3LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxM31dfV19LHtpbmZvQml0czo2ODQ3Mix2ZXJzaW9uTnVtYmVyOjE2LGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDI2LDUwLDc0XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjI0LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjUsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjk4fSx7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjk5fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ1fSx7bnVtQmxvY2tzOjMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ2fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI0LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE1LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxOX0se251bUJsb2NrczoyLGRhdGFDb2Rld29yZHNQZXJCbG9jazoyMH1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczozLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNX0se251bUJsb2NrczoxMyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6NzA3NDksdmVyc2lvbk51bWJlcjoxNyxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzMCw1NCw3OF0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoxLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMDd9LHtudW1CbG9ja3M6NSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTA4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEwLGRhdGFDb2Rld29yZHNQZXJCbG9jazo0Nn0se251bUJsb2NrczoxLGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoxLGRhdGFDb2Rld29yZHNQZXJCbG9jazoyMn0se251bUJsb2NrczoxNSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjN9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTR9LHtudW1CbG9ja3M6MTcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fV19XX0se2luZm9CaXRzOjc2MzExLHZlcnNpb25OdW1iZXI6MTgsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMzAsNTYsODJdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6NSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTIwfSx7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEyMX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyNixlY0Jsb2Nrczpbe251bUJsb2Nrczo5LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0M30se251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0NH1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoxNyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjJ9LHtudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjN9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTR9LHtudW1CbG9ja3M6MTksZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fV19XX0se2luZm9CaXRzOjc5MTU0LHZlcnNpb25OdW1iZXI6MTksYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMzAsNTgsODZdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTEzfSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExNH1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyNixlY0Jsb2Nrczpbe251bUJsb2NrczozLGRhdGFDb2Rld29yZHNQZXJCbG9jazo0NH0se251bUJsb2NrczoxMSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjYsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjIxfSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjIyfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI2LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjksZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEzfSx7bnVtQmxvY2tzOjE2LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNH1dfV19LHtpbmZvQml0czo4NDM5MCx2ZXJzaW9uTnVtYmVyOjIwLGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDM0LDYyLDkwXSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEwN30se251bUJsb2Nrczo1LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMDh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjYsZWNCbG9ja3M6W3tudW1CbG9ja3M6MyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDF9LHtudW1CbG9ja3M6MTMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQyfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE1LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNH0se251bUJsb2Nrczo1LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoxNSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTV9LHtudW1CbG9ja3M6MTAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE2fV19XX0se2luZm9CaXRzOjg3NjgzLHZlcnNpb25OdW1iZXI6MjEsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMjgsNTAsNzIsOTRdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE2fSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExN31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyNixlY0Jsb2Nrczpbe251bUJsb2NrczoxNyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDJ9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjIyfSx7bnVtQmxvY2tzOjYsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjIzfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE5LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn0se251bUJsb2Nrczo2LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxN31dfV19LHtpbmZvQml0czo5MjM2MSx2ZXJzaW9uTnVtYmVyOjIyLGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDI2LDUwLDc0LDk4XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExMX0se251bUJsb2Nrczo3LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTJ9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ2fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI0fSx7bnVtQmxvY2tzOjE2LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyNCxlY0Jsb2Nrczpbe251bUJsb2NrczozNCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTN9XX1dfSx7aW5mb0JpdHM6OTYyMzYsdmVyc2lvbk51bWJlcjoyMyxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzMCw1NCw3NCwxMDJdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTIxfSx7bnVtQmxvY2tzOjUsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEyMn1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N30se251bUJsb2NrczoxNCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI0fSx7bnVtQmxvY2tzOjE0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoxNixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTV9LHtudW1CbG9ja3M6MTQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE2fV19XX0se2luZm9CaXRzOjEwMjA4NCx2ZXJzaW9uTnVtYmVyOjI0LGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDI4LDU0LDgwLDEwNl0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo2LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTd9LHtudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjYsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ1fSx7bnVtQmxvY2tzOjE0LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0Nn1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoxMSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjR9LHtudW1CbG9ja3M6MTYsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjMwLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn0se251bUJsb2NrczoyLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxN31dfV19LHtpbmZvQml0czoxMDI4ODEsdmVyc2lvbk51bWJlcjoyNSxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzMiw1OCw4NCwxMTBdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MjYsZWNCbG9ja3M6W3tudW1CbG9ja3M6OCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTA2fSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEwN31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2Nrczo4LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N30se251bUJsb2NrczoxMyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6NyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjR9LHtudW1CbG9ja3M6MjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjIyLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNX0se251bUJsb2NrczoxMyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6MTEwNTA3LHZlcnNpb25OdW1iZXI6MjYsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMzAsNTgsODYsMTE0XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEwLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTR9LHtudW1CbG9ja3M6MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE5LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0Nn0se251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoyOCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjJ9LHtudW1CbG9ja3M6NixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjN9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MzMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE2fSx7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE3fV19XX0se2luZm9CaXRzOjExMDczNCx2ZXJzaW9uTnVtYmVyOjI3LGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDM0LDYyLDkwLDExOF0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo4LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMjJ9LHtudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTIzfV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjIyLGRhdGFDb2Rld29yZHNQZXJCbG9jazo0NX0se251bUJsb2NrczozLGRhdGFDb2Rld29yZHNQZXJCbG9jazo0Nn1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo4LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyM30se251bUJsb2NrczoyNixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjR9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fSx7bnVtQmxvY2tzOjI4LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn1dfV19LHtpbmZvQml0czoxMTc3ODYsdmVyc2lvbk51bWJlcjoyOCxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwyNiw1MCw3NCw5OCwxMjJdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE3fSx7bnVtQmxvY2tzOjEwLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDV9LHtudW1CbG9ja3M6MjMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ2fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI0fSx7bnVtQmxvY2tzOjMxLGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoxMSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTV9LHtudW1CbG9ja3M6MzEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE2fV19XX0se2luZm9CaXRzOjExOTYxNSx2ZXJzaW9uTnVtYmVyOjI5LGFsaWdubWVudFBhdHRlcm5DZW50ZXJzOls2LDMwLDU0LDc4LDEwMiwxMjZdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6NyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE2fSx7bnVtQmxvY2tzOjcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExN31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoyMSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDV9LHtudW1CbG9ja3M6NyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDZ9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjN9LHtudW1CbG9ja3M6MzcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI0fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE5LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNX0se251bUJsb2NrczoyNixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6MTI2MzI1LHZlcnNpb25OdW1iZXI6MzAsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMjYsNTIsNzgsMTA0LDEzMF0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo1LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTV9LHtudW1CbG9ja3M6MTAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExNn1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoxOSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDd9LHtudW1CbG9ja3M6MTAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE1LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNH0se251bUJsb2NrczoyNSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MjMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fSx7bnVtQmxvY2tzOjI1LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn1dfV19LHtpbmZvQml0czoxMjc1NjgsdmVyc2lvbk51bWJlcjozMSxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzMCw1Niw4MiwxMDgsMTM0XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEzLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTV9LHtudW1CbG9ja3M6MyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE2fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ2fSx7bnVtQmxvY2tzOjI5LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo0MixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjR9LHtudW1CbG9ja3M6MSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MjMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fSx7bnVtQmxvY2tzOjI4LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn1dfV19LHtpbmZvQml0czoxMzM1ODksdmVyc2lvbk51bWJlcjozMixhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzNCw2MCw4NiwxMTIsMTM4XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE3LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ2fSx7bnVtQmxvY2tzOjIzLGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoxMCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjR9LHtudW1CbG9ja3M6MzUsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE5LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNX0se251bUJsb2NrczozNSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6MTM2OTQ0LHZlcnNpb25OdW1iZXI6MzMsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMzAsNTgsODYsMTE0LDE0Ml0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoxNyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE1fSx7bnVtQmxvY2tzOjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExNn1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoxNCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDZ9LHtudW1CbG9ja3M6MjEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ3fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjI5LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNH0se251bUJsb2NrczoxOSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fSx7bnVtQmxvY2tzOjQ2LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn1dfV19LHtpbmZvQml0czoxNDE0OTgsdmVyc2lvbk51bWJlcjozNCxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzNCw2Miw5MCwxMTgsMTQ2XSxlcnJvckNvcnJlY3Rpb25MZXZlbHM6W3tlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjEzLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTV9LHtudW1CbG9ja3M6NixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE2fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjI4LGVjQmxvY2tzOlt7bnVtQmxvY2tzOjE0LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0Nn0se251bUJsb2NrczoyMyxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDd9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6NDQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI0fSx7bnVtQmxvY2tzOjcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjU5LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn0se251bUJsb2NrczoxLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxN31dfV19LHtpbmZvQml0czoxNDUzMTEsdmVyc2lvbk51bWJlcjozNSxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzMCw1NCw3OCwxMDIsMTI2LDE1MF0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoxMixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTIxfSx7bnVtQmxvY2tzOjcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEyMn1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoxMixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDd9LHtudW1CbG9ja3M6MjYsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjM5LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNH0se251bUJsb2NrczoxNCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MjIsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fSx7bnVtQmxvY2tzOjQxLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn1dfV19LHtpbmZvQml0czoxNTAyODMsdmVyc2lvbk51bWJlcjozNixhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwyNCw1MCw3NiwxMDIsMTI4LDE1NF0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo2LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMjF9LHtudW1CbG9ja3M6MTQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEyMn1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2Nrczo2LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N30se251bUJsb2NrczozNCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6NDYsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI0fSx7bnVtQmxvY2tzOjEwLGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoyLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNX0se251bUJsb2Nrczo2NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6MTUyNjIyLHZlcnNpb25OdW1iZXI6MzcsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMjgsNTQsODAsMTA2LDEzMiwxNThdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjEyMn0se251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMjN9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MjksZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ2fSx7bnVtQmxvY2tzOjE0LGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo0OSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjR9LHtudW1CbG9ja3M6MTAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjI0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNX0se251bUJsb2Nrczo0NixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6MTU4MzA4LHZlcnNpb25OdW1iZXI6MzgsYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMzIsNTgsODQsMTEwLDEzNiwxNjJdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6NCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTIyfSx7bnVtQmxvY2tzOjE4LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMjN9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTMsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ2fSx7bnVtQmxvY2tzOjMyLGRhdGFDb2Rld29yZHNQZXJCbG9jazo0N31dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2Nrczo0OCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjR9LHtudW1CbG9ja3M6MTQsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjI1fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjQyLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNX0se251bUJsb2NrczozMixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTZ9XX1dfSx7aW5mb0JpdHM6MTYxMDg5LHZlcnNpb25OdW1iZXI6MzksYWxpZ25tZW50UGF0dGVybkNlbnRlcnM6WzYsMjYsNTQsODIsMTEwLDEzOCwxNjZdLGVycm9yQ29ycmVjdGlvbkxldmVsczpbe2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MjAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExN30se251bUJsb2Nrczo0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxMTh9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MjgsZWNCbG9ja3M6W3tudW1CbG9ja3M6NDAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ3fSx7bnVtQmxvY2tzOjcsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjQzLGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNH0se251bUJsb2NrczoyMixkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MTAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fSx7bnVtQmxvY2tzOjY3LGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn1dfV19LHtpbmZvQml0czoxNjcwMTcsdmVyc2lvbk51bWJlcjo0MCxhbGlnbm1lbnRQYXR0ZXJuQ2VudGVyczpbNiwzMCw1OCw4NiwxMTQsMTQyLDE3MF0sZXJyb3JDb3JyZWN0aW9uTGV2ZWxzOlt7ZWNDb2Rld29yZHNQZXJCbG9jazozMCxlY0Jsb2Nrczpbe251bUJsb2NrczoxOSxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MTE4fSx7bnVtQmxvY2tzOjYsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjExOX1dfSx7ZWNDb2Rld29yZHNQZXJCbG9jazoyOCxlY0Jsb2Nrczpbe251bUJsb2NrczoxOCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6NDd9LHtudW1CbG9ja3M6MzEsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjQ4fV19LHtlY0NvZGV3b3Jkc1BlckJsb2NrOjMwLGVjQmxvY2tzOlt7bnVtQmxvY2tzOjM0LGRhdGFDb2Rld29yZHNQZXJCbG9jazoyNH0se251bUJsb2NrczozNCxkYXRhQ29kZXdvcmRzUGVyQmxvY2s6MjV9XX0se2VjQ29kZXdvcmRzUGVyQmxvY2s6MzAsZWNCbG9ja3M6W3tudW1CbG9ja3M6MjAsZGF0YUNvZGV3b3Jkc1BlckJsb2NrOjE1fSx7bnVtQmxvY2tzOjYxLGRhdGFDb2Rld29yZHNQZXJCbG9jazoxNn1dfV19XX0sZnVuY3Rpb24obyxlLHIpe1xcXCJ1c2Ugc3RyaWN0XFxcIjtmdW5jdGlvbiB0KG8sZSxyLHQpe3ZhciBjPW8ueC1lLngrci54LXQueCxzPW8ueS1lLnkrci55LXQueTtpZigwPT09YyYmMD09PXMpcmV0dXJue2ExMTplLngtby54LGExMjplLnktby55LGExMzowLGEyMTpyLngtZS54LGEyMjpyLnktZS55LGEyMzowLGEzMTpvLngsYTMyOm8ueSxhMzM6MX07dmFyIGE9ZS54LXIueCxkPXQueC1yLngsbj1lLnktci55LGw9dC55LXIueSxpPWEqbC1kKm4sQj0oYypsLWQqcykvaSxrPShhKnMtYypuKS9pO3JldHVybnthMTE6ZS54LW8ueCtCKmUueCxhMTI6ZS55LW8ueStCKmUueSxhMTM6QixhMjE6dC54LW8ueCtrKnQueCxhMjI6dC55LW8ueStrKnQueSxhMjM6ayxhMzE6by54LGEzMjpvLnksYTMzOjF9fWZ1bmN0aW9uIGMobyxlLHIsYyl7dmFyIHM9dChvLGUscixjKTtyZXR1cm57YTExOnMuYTIyKnMuYTMzLXMuYTIzKnMuYTMyLGExMjpzLmExMypzLmEzMi1zLmExMipzLmEzMyxhMTM6cy5hMTIqcy5hMjMtcy5hMTMqcy5hMjIsYTIxOnMuYTIzKnMuYTMxLXMuYTIxKnMuYTMzLGEyMjpzLmExMSpzLmEzMy1zLmExMypzLmEzMSxhMjM6cy5hMTMqcy5hMjEtcy5hMTEqcy5hMjMsYTMxOnMuYTIxKnMuYTMyLXMuYTIyKnMuYTMxLGEzMjpzLmExMipzLmEzMS1zLmExMSpzLmEzMixhMzM6cy5hMTEqcy5hMjItcy5hMTIqcy5hMjF9fWZ1bmN0aW9uIHMobyxlKXtyZXR1cm57YTExOm8uYTExKmUuYTExK28uYTIxKmUuYTEyK28uYTMxKmUuYTEzLGExMjpvLmExMiplLmExMStvLmEyMiplLmExMitvLmEzMiplLmExMyxhMTM6by5hMTMqZS5hMTErby5hMjMqZS5hMTIrby5hMzMqZS5hMTMsYTIxOm8uYTExKmUuYTIxK28uYTIxKmUuYTIyK28uYTMxKmUuYTIzLGEyMjpvLmExMiplLmEyMStvLmEyMiplLmEyMitvLmEzMiplLmEyMyxhMjM6by5hMTMqZS5hMjErby5hMjMqZS5hMjIrby5hMzMqZS5hMjMsYTMxOm8uYTExKmUuYTMxK28uYTIxKmUuYTMyK28uYTMxKmUuYTMzLGEzMjpvLmExMiplLmEzMStvLmEyMiplLmEzMitvLmEzMiplLmEzMyxhMzM6by5hMTMqZS5hMzErby5hMjMqZS5hMzIrby5hMzMqZS5hMzN9fWZ1bmN0aW9uIGEobyxlKXtmb3IodmFyIHI9Yyh7eDozLjUseTozLjV9LHt4OmUuZGltZW5zaW9uLTMuNSx5OjMuNX0se3g6ZS5kaW1lbnNpb24tNi41LHk6ZS5kaW1lbnNpb24tNi41fSx7eDozLjUseTplLmRpbWVuc2lvbi0zLjV9KSxhPXQoZS50b3BMZWZ0LGUudG9wUmlnaHQsZS5hbGlnbm1lbnRQYXR0ZXJuLGUuYm90dG9tTGVmdCksbj1zKGEsciksbD1kLkJpdE1hdHJpeC5jcmVhdGVFbXB0eShlLmRpbWVuc2lvbixlLmRpbWVuc2lvbiksaT1mdW5jdGlvbihvLGUpe3ZhciByPW4uYTEzKm8rbi5hMjMqZStuLmEzMztyZXR1cm57eDoobi5hMTEqbytuLmEyMSplK24uYTMxKS9yLHk6KG4uYTEyKm8rbi5hMjIqZStuLmEzMikvcn19LEI9MDtCPGUuZGltZW5zaW9uO0IrKylmb3IodmFyIGs9MDtrPGUuZGltZW5zaW9uO2srKyl7dmFyIHU9aysuNSxDPUIrLjUsbT1pKHUsQyk7bC5zZXQoayxCLG8uZ2V0KE1hdGguZmxvb3IobS54KSxNYXRoLmZsb29yKG0ueSkpKX1yZXR1cm57bWF0cml4OmwsbWFwcGluZ0Z1bmN0aW9uOml9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTt2YXIgZD1yKDApO2UuZXh0cmFjdD1hfSxmdW5jdGlvbihvLGUscil7XFxcInVzZSBzdHJpY3RcXFwiO2Z1bmN0aW9uIHQobyl7cmV0dXJuIG8ucmVkdWNlKGZ1bmN0aW9uKG8sZSl7cmV0dXJuIG8rZX0pfWZ1bmN0aW9uIGMobyxlLHIpe3ZhciB0LGMscyxhPUMobyxlKSxkPUMoZSxyKSxuPUMobyxyKTtyZXR1cm4gZD49YSYmZD49bj8obD1bZSxvLHJdLHQ9bFswXSxjPWxbMV0scz1sWzJdKTpuPj1kJiZuPj1hPyhpPVtvLGUscl0sdD1pWzBdLGM9aVsxXSxzPWlbMl0pOihCPVtvLHIsZV0sdD1CWzBdLGM9QlsxXSxzPUJbMl0pLChzLngtYy54KSoodC55LWMueSktKHMueS1jLnkpKih0LngtYy54KTwwJiYoaz1bcyx0XSx0PWtbMF0scz1rWzFdKSx7Ym90dG9tTGVmdDp0LHRvcExlZnQ6Yyx0b3BSaWdodDpzfTt2YXIgbCxpLEIsa31mdW5jdGlvbiBzKG8sZSxyLGMpe3ZhciBzPSh0KGQobyxyLGMsNSkpLzcrdChkKG8sZSxjLDUpKS83K3QoZChyLG8sYyw1KSkvNyt0KGQoZSxvLGMsNSkpLzcpLzQ7aWYoczwxKXRocm93IG5ldyBFcnJvcihcXFwiSW52YWxpZCBtb2R1bGUgc2l6ZVxcXCIpO3ZhciBhPU1hdGgucm91bmQoQyhvLGUpL3MpLG49TWF0aC5yb3VuZChDKG8scikvcyksbD1NYXRoLmZsb29yKChhK24pLzIpKzc7c3dpdGNoKGwlNCl7Y2FzZSAwOmwrKzticmVhaztjYXNlIDI6bC0tfXJldHVybntkaW1lbnNpb246bCxtb2R1bGVTaXplOnN9fWZ1bmN0aW9uIGEobyxlLHIsdCl7dmFyIGMscyxhLGQsbj1be3g6TWF0aC5mbG9vcihvLngpLHk6TWF0aC5mbG9vcihvLnkpfV0sbD1NYXRoLmFicyhlLnktby55KT5NYXRoLmFicyhlLngtby54KTtsPyhjPU1hdGguZmxvb3Ioby55KSxzPU1hdGguZmxvb3Ioby54KSxhPU1hdGguZmxvb3IoZS55KSxkPU1hdGguZmxvb3IoZS54KSk6KGM9TWF0aC5mbG9vcihvLngpLHM9TWF0aC5mbG9vcihvLnkpLGE9TWF0aC5mbG9vcihlLngpLGQ9TWF0aC5mbG9vcihlLnkpKTtmb3IodmFyIGk9TWF0aC5hYnMoYS1jKSxCPU1hdGguYWJzKGQtcyksaz1NYXRoLmZsb29yKC1pLzIpLHU9YzxhPzE6LTEsbT1zPGQ/MTotMSxmPSEwLHc9YyxQPXM7dyE9PWErdTt3Kz11KXt2YXIgdj1sP1A6dyxoPWw/dzpQO2lmKHIuZ2V0KHYsaCkhPT1mJiYoZj0hZixuLnB1c2goe3g6dix5Omh9KSxuLmxlbmd0aD09PXQrMSkpYnJlYWs7aWYoKGsrPUIpPjApe2lmKFA9PT1kKWJyZWFrO1ArPW0say09aX19Zm9yKHZhciBwPVtdLHk9MDt5PHQ7eSsrKW5beV0mJm5beSsxXT9wLnB1c2goQyhuW3ldLG5beSsxXSkpOnAucHVzaCgwKTtyZXR1cm4gcH1mdW5jdGlvbiBkKG8sZSxyLHQpe3ZhciBjPWUueS1vLnkscz1lLngtby54LGQ9YShvLGUscixNYXRoLmNlaWwodC8yKSksbj1hKG8se3g6by54LXMseTpvLnktY30scixNYXRoLmNlaWwodC8yKSksbD1kLnNoaWZ0KCkrbi5zaGlmdCgpLTE7cmV0dXJuKGk9bi5jb25jYXQobCkpLmNvbmNhdC5hcHBseShpLGQpO3ZhciBpfWZ1bmN0aW9uIG4obyxlKXt2YXIgcj10KG8pL3QoZSksYz0wO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSx0KXtjKz1NYXRoLnBvdyhvW3RdLWUqciwyKX0pLHthdmVyYWdlU2l6ZTpyLGVycm9yOmN9fWZ1bmN0aW9uIGwobyxlLHIpe3RyeXt2YXIgdD1kKG8se3g6LTEseTpvLnl9LHIsZS5sZW5ndGgpLGM9ZChvLHt4Om8ueCx5Oi0xfSxyLGUubGVuZ3RoKSxzPXt4Ok1hdGgubWF4KDAsby54LW8ueSktMSx5Ok1hdGgubWF4KDAsby55LW8ueCktMX0sYT1kKG8scyxyLGUubGVuZ3RoKSxsPXt4Ok1hdGgubWluKHIud2lkdGgsby54K28ueSkrMSx5Ok1hdGgubWluKHIuaGVpZ2h0LG8ueStvLngpKzF9LGk9ZChvLGwscixlLmxlbmd0aCksQj1uKHQsZSksaz1uKGMsZSksdT1uKGEsZSksQz1uKGksZSksbT1NYXRoLnNxcnQoQi5lcnJvcipCLmVycm9yK2suZXJyb3Iqay5lcnJvcit1LmVycm9yKnUuZXJyb3IrQy5lcnJvcipDLmVycm9yKSxmPShCLmF2ZXJhZ2VTaXplK2suYXZlcmFnZVNpemUrdS5hdmVyYWdlU2l6ZStDLmF2ZXJhZ2VTaXplKS80O3JldHVybiBtKyhNYXRoLnBvdyhCLmF2ZXJhZ2VTaXplLWYsMikrTWF0aC5wb3coay5hdmVyYWdlU2l6ZS1mLDIpK01hdGgucG93KHUuYXZlcmFnZVNpemUtZiwyKStNYXRoLnBvdyhDLmF2ZXJhZ2VTaXplLWYsMikpL2Z9Y2F0Y2gobyl7cmV0dXJuIDEvMH19ZnVuY3Rpb24gaShvKXtmb3IodmFyIGU9W10scj1bXSxhPVtdLGQ9W10sbj0wO248PW8uaGVpZ2h0O24rKykhZnVuY3Rpb24oYyl7Zm9yKHZhciBzPTAsbj0hMSxsPVswLDAsMCwwLDBdLGk9LTE7aTw9by53aWR0aDtpKyspIWZ1bmN0aW9uKGUpe3ZhciBhPW8uZ2V0KGUsYyk7aWYoYT09PW4pcysrO2Vsc2V7bD1bbFsxXSxsWzJdLGxbM10sbFs0XSxzXSxzPTEsbj1hO3ZhciBpPXQobCkvNyxCPU1hdGguYWJzKGxbMF0taSk8aSYmTWF0aC5hYnMobFsxXS1pKTxpJiZNYXRoLmFicyhsWzJdLTMqaSk8MyppJiZNYXRoLmFicyhsWzNdLWkpPGkmJk1hdGguYWJzKGxbNF0taSk8aSYmIWEsQz10KGwuc2xpY2UoLTMpKS8zLG09TWF0aC5hYnMobFsyXS1DKTxDJiZNYXRoLmFicyhsWzNdLUMpPEMmJk1hdGguYWJzKGxbNF0tQyk8QyYmYTtpZihCKXt2YXIgZj1lLWxbM10tbFs0XSx3PWYtbFsyXSxQPXtzdGFydFg6dyxlbmRYOmYseTpjfSx2PXIuZmlsdGVyKGZ1bmN0aW9uKG8pe3JldHVybiB3Pj1vLmJvdHRvbS5zdGFydFgmJnc8PW8uYm90dG9tLmVuZFh8fGY+PW8uYm90dG9tLnN0YXJ0WCYmdzw9by5ib3R0b20uZW5kWHx8dzw9by5ib3R0b20uc3RhcnRYJiZmPj1vLmJvdHRvbS5lbmRYJiZsWzJdLyhvLmJvdHRvbS5lbmRYLW8uYm90dG9tLnN0YXJ0WCk8dSYmbFsyXS8oby5ib3R0b20uZW5kWC1vLmJvdHRvbS5zdGFydFgpPmt9KTt2Lmxlbmd0aD4wP3ZbMF0uYm90dG9tPVA6ci5wdXNoKHt0b3A6UCxib3R0b206UH0pfWlmKG0pe3ZhciBoPWUtbFs0XSxwPWgtbFszXSxQPXtzdGFydFg6cCx5OmMsZW5kWDpofSx2PWQuZmlsdGVyKGZ1bmN0aW9uKG8pe3JldHVybiBwPj1vLmJvdHRvbS5zdGFydFgmJnA8PW8uYm90dG9tLmVuZFh8fGg+PW8uYm90dG9tLnN0YXJ0WCYmcDw9by5ib3R0b20uZW5kWHx8cDw9by5ib3R0b20uc3RhcnRYJiZoPj1vLmJvdHRvbS5lbmRYJiZsWzJdLyhvLmJvdHRvbS5lbmRYLW8uYm90dG9tLnN0YXJ0WCk8dSYmbFsyXS8oby5ib3R0b20uZW5kWC1vLmJvdHRvbS5zdGFydFgpPmt9KTt2Lmxlbmd0aD4wP3ZbMF0uYm90dG9tPVA6ZC5wdXNoKHt0b3A6UCxib3R0b206UH0pfX19KGkpO2UucHVzaC5hcHBseShlLHIuZmlsdGVyKGZ1bmN0aW9uKG8pe3JldHVybiBvLmJvdHRvbS55IT09YyYmby5ib3R0b20ueS1vLnRvcC55Pj0yfSkpLHI9ci5maWx0ZXIoZnVuY3Rpb24obyl7cmV0dXJuIG8uYm90dG9tLnk9PT1jfSksYS5wdXNoLmFwcGx5KGEsZC5maWx0ZXIoZnVuY3Rpb24obyl7cmV0dXJuIG8uYm90dG9tLnkhPT1jfSkpLGQ9ZC5maWx0ZXIoZnVuY3Rpb24obyl7cmV0dXJuIG8uYm90dG9tLnk9PT1jfSl9KG4pO2UucHVzaC5hcHBseShlLHIuZmlsdGVyKGZ1bmN0aW9uKG8pe3JldHVybiBvLmJvdHRvbS55LW8udG9wLnk+PTJ9KSksYS5wdXNoLmFwcGx5KGEsZCk7dmFyIGk9ZS5maWx0ZXIoZnVuY3Rpb24obyl7cmV0dXJuIG8uYm90dG9tLnktby50b3AueT49Mn0pLm1hcChmdW5jdGlvbihlKXt2YXIgcj0oZS50b3Auc3RhcnRYK2UudG9wLmVuZFgrZS5ib3R0b20uc3RhcnRYK2UuYm90dG9tLmVuZFgpLzQsYz0oZS50b3AueStlLmJvdHRvbS55KzEpLzI7aWYoby5nZXQoTWF0aC5yb3VuZChyKSxNYXRoLnJvdW5kKGMpKSl7XFxudmFyIHM9W2UudG9wLmVuZFgtZS50b3Auc3RhcnRYLGUuYm90dG9tLmVuZFgtZS5ib3R0b20uc3RhcnRYLGUuYm90dG9tLnktZS50b3AueSsxXSxhPXQocykvcy5sZW5ndGg7cmV0dXJue3Njb3JlOmwoe3g6TWF0aC5yb3VuZChyKSx5Ok1hdGgucm91bmQoYyl9LFsxLDEsMywxLDFdLG8pLHg6cix5OmMsc2l6ZTphfX19KS5maWx0ZXIoZnVuY3Rpb24obyl7cmV0dXJuISFvfSkuc29ydChmdW5jdGlvbihvLGUpe3JldHVybiBvLnNjb3JlLWUuc2NvcmV9KS5tYXAoZnVuY3Rpb24obyxlLHIpe2lmKGU+QilyZXR1cm4gbnVsbDt2YXIgdD1yLmZpbHRlcihmdW5jdGlvbihvLHIpe3JldHVybiBlIT09cn0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm57eDplLngseTplLnksc2NvcmU6ZS5zY29yZStNYXRoLnBvdyhlLnNpemUtby5zaXplLDIpL28uc2l6ZSxzaXplOmUuc2l6ZX19KS5zb3J0KGZ1bmN0aW9uKG8sZSl7cmV0dXJuIG8uc2NvcmUtZS5zY29yZX0pO2lmKHQubGVuZ3RoPDIpcmV0dXJuIG51bGw7dmFyIGM9by5zY29yZSt0WzBdLnNjb3JlK3RbMV0uc2NvcmU7cmV0dXJue3BvaW50czpbb10uY29uY2F0KHQuc2xpY2UoMCwyKSksc2NvcmU6Y319KS5maWx0ZXIoZnVuY3Rpb24obyl7cmV0dXJuISFvfSkuc29ydChmdW5jdGlvbihvLGUpe3JldHVybiBvLnNjb3JlLWUuc2NvcmV9KTtpZigwPT09aS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIG0sZix3PWMoaVswXS5wb2ludHNbMF0saVswXS5wb2ludHNbMV0saVswXS5wb2ludHNbMl0pLFA9dy50b3BSaWdodCx2PXcudG9wTGVmdCxoPXcuYm90dG9tTGVmdDt0cnl7TD1zKHYsUCxoLG8pLG09TC5kaW1lbnNpb24sZj1MLm1vZHVsZVNpemV9Y2F0Y2gobyl7cmV0dXJuIG51bGx9dmFyIHA9e3g6UC54LXYueCtoLngseTpQLnktdi55K2gueX0seT0oQyh2LGgpK0ModixQKSkvMi9mLGI9MS0zL3ksZz17eDp2LngrYioocC54LXYueCkseTp2LnkrYioocC55LXYueSl9LHg9YS5tYXAoZnVuY3Rpb24oZSl7dmFyIHI9KGUudG9wLnN0YXJ0WCtlLnRvcC5lbmRYK2UuYm90dG9tLnN0YXJ0WCtlLmJvdHRvbS5lbmRYKS80LGM9KGUudG9wLnkrZS5ib3R0b20ueSsxKS8yO2lmKG8uZ2V0KE1hdGguZmxvb3IociksTWF0aC5mbG9vcihjKSkpe3ZhciBzPVtlLnRvcC5lbmRYLWUudG9wLnN0YXJ0WCxlLmJvdHRvbS5lbmRYLWUuYm90dG9tLnN0YXJ0WCxlLmJvdHRvbS55LWUudG9wLnkrMV07dChzKTtyZXR1cm57eDpyLHk6YyxzY29yZTpsKHt4Ok1hdGguZmxvb3IocikseTpNYXRoLmZsb29yKGMpfSxbMSwxLDFdLG8pK0Moe3g6cix5OmN9LGcpfX19KS5maWx0ZXIoZnVuY3Rpb24obyl7cmV0dXJuISFvfSkuc29ydChmdW5jdGlvbihvLGUpe3JldHVybiBvLnNjb3JlLWUuc2NvcmV9KSxNPXk+PTE1JiZ4Lmxlbmd0aD94WzBdOmc7cmV0dXJue2FsaWdubWVudFBhdHRlcm46e3g6TS54LHk6TS55fSxib3R0b21MZWZ0Ont4OmgueCx5OmgueX0sZGltZW5zaW9uOm0sdG9wTGVmdDp7eDp2LngseTp2Lnl9LHRvcFJpZ2h0Ont4OlAueCx5OlAueX19O3ZhciBMfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTt2YXIgQj00LGs9LjUsdT0xLjUsQz1mdW5jdGlvbihvLGUpe3JldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZS54LW8ueCwyKStNYXRoLnBvdyhlLnktby55LDIpKX07ZS5sb2NhdGU9aX1dKS5kZWZhdWx0fSksc2VsZi5hZGRFdmVudExpc3RlbmVyKFxcXCJtZXNzYWdlXFxcIixmdW5jdGlvbihvKXt2YXIgZT1qc1FSKG8uZGF0YS5kYXRhLG8uZGF0YS53aWR0aCxvLmRhdGEuaGVpZ2h0KTtlP3Bvc3RNZXNzYWdlKGUuZGF0YSk6cG9zdE1lc3NhZ2UobnVsbCl9KTtcIl0sIHtcbiAgdHlwZTogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXG59KTtcblxuLy8gUHJvcHMgdGhhdCBhcmUgYWxsb3dlZCB0byBjaGFuZ2UgZHluYW1pY2x5XG52YXIgcHJvcHNLZXlzID0gWydkZWxheScsICdsZWdhY3lNb2RlJywgJ2ZhY2luZ01vZGUnXTtcblxubW9kdWxlLmV4cG9ydHMgPSAoX3RlbXAgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVhZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWFkZXIocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVhZGVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZWFkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZWFkZXIpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5lbHMgPSB7fTtcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtaXJyb3JWaWRlbzogZmFsc2VcblxuICAgICAgLy8gQmluZCBmdW5jdGlvbiB0byB0aGUgY2xhc3NcbiAgICB9O190aGlzLmluaXRpYXRlID0gX3RoaXMuaW5pdGlhdGUuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaW5pdGlhdGVMZWdhY3lNb2RlID0gX3RoaXMuaW5pdGlhdGVMZWdhY3lNb2RlLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmNoZWNrID0gX3RoaXMuY2hlY2suYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlVmlkZW8gPSBfdGhpcy5oYW5kbGVWaWRlby5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5oYW5kbGVMb2FkU3RhcnQgPSBfdGhpcy5oYW5kbGVMb2FkU3RhcnQuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2UgPSBfdGhpcy5oYW5kbGVJbnB1dENoYW5nZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5jbGVhckNvbXBvbmVudCA9IF90aGlzLmNsZWFyQ29tcG9uZW50LmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZVJlYWRlckxvYWQgPSBfdGhpcy5oYW5kbGVSZWFkZXJMb2FkLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9wZW5JbWFnZURpYWxvZyA9IF90aGlzLm9wZW5JbWFnZURpYWxvZy5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5oYW5kbGVXb3JrZXJNZXNzYWdlID0gX3RoaXMuaGFuZGxlV29ya2VyTWVzc2FnZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5zZXRSZWZGYWN0b3J5ID0gX3RoaXMuc2V0UmVmRmFjdG9yeS5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVhZGVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAvLyBJbml0aWF0ZSB3ZWIgd29ya2VyIGV4ZWN1dGUgaGFuZGxlciBhY2NvcmRpbmcgdG8gbW9kZS5cbiAgICAgIHRoaXMud29ya2VyID0gbmV3IFdvcmtlcihVUkwuY3JlYXRlT2JqZWN0VVJMKHdvcmtlckJsb2IpKTtcbiAgICAgIHRoaXMud29ya2VyLm9ubWVzc2FnZSA9IHRoaXMuaGFuZGxlV29ya2VyTWVzc2FnZTtcblxuICAgICAgaWYgKCF0aGlzLnByb3BzLmxlZ2FjeU1vZGUpIHtcbiAgICAgICAgdGhpcy5pbml0aWF0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbml0aWF0ZUxlZ2FjeU1vZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIC8vIFJlYWN0IGFjY29yZGluZyB0byBjaGFuZ2UgaW4gcHJvcHNcbiAgICAgIHZhciBjaGFuZ2VkUHJvcHMgPSBoYXZlUHJvcHNDaGFuZ2VkKHRoaXMucHJvcHMsIG5leHRQcm9wcywgcHJvcHNLZXlzKTtcblxuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGNoYW5nZWRQcm9wc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgcHJvcCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHByb3AgPT0gJ2ZhY2luZ01vZGUnKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ29tcG9uZW50KCk7XG4gICAgICAgICAgICB0aGlzLmluaXRpYXRlKG5leHRQcm9wcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKHByb3AgPT0gJ2RlbGF5Jykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGVsYXkgPT0gZmFsc2UgJiYgIW5leHRQcm9wcy5sZWdhY3lNb2RlKSB7XG4gICAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5jaGVjaywgbmV4dFByb3BzLmRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuZGVsYXkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChwcm9wID09ICdsZWdhY3lNb2RlJykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubGVnYWN5TW9kZSAmJiAhbmV4dFByb3BzLmxlZ2FjeU1vZGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5jbGVhckNvbXBvbmVudCgpO1xuICAgICAgICAgICAgICB0aGlzLmluaXRpYXRlKG5leHRQcm9wcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNsZWFyQ29tcG9uZW50KCk7XG4gICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5pbml0aWF0ZUxlZ2FjeU1vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgaWYgKG5leHRTdGF0ZSAhPT0gdGhpcy5zdGF0ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSByZW5kZXIgd2hlbiB0aGUgYHByb3BzS2V5c2AgaGF2ZSBjaGFuZ2VkLlxuICAgICAgdmFyIGNoYW5nZWRQcm9wcyA9IGhhdmVQcm9wc0NoYW5nZWQodGhpcy5wcm9wcywgbmV4dFByb3BzLCBwcm9wc0tleXMpO1xuICAgICAgcmV0dXJuIGNoYW5nZWRQcm9wcy5sZW5ndGggPiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAvLyBTdG9wIHdlYi13b3JrZXIgYW5kIGNsZWFyIHRoZSBjb21wb25lbnRcbiAgICAgIGlmICh0aGlzLndvcmtlcikge1xuICAgICAgICB0aGlzLndvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgdGhpcy53b3JrZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB0aGlzLmNsZWFyQ29tcG9uZW50KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xlYXJDb21wb25lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhckNvbXBvbmVudCgpIHtcbiAgICAgIC8vIFJlbW92ZSBhbGwgZXZlbnQgbGlzdGVuZXJzIGFuZCB2YXJpYWJsZXNcbiAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0b3BDYW1lcmEpIHtcbiAgICAgICAgdGhpcy5zdG9wQ2FtZXJhKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZWFkZXIpIHtcbiAgICAgICAgdGhpcy5yZWFkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuaGFuZGxlUmVhZGVyTG9hZCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5lbHMuaW1nKSB7XG4gICAgICAgIHRoaXMuZWxzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5jaGVjayk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5pdGlhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWF0ZSgpIHtcbiAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5wcm9wcztcbiAgICAgIHZhciBvbkVycm9yID0gcHJvcHMub25FcnJvcixcbiAgICAgICAgICBmYWNpbmdNb2RlID0gcHJvcHMuZmFjaW5nTW9kZTtcblxuICAgICAgLy8gQ2hlY2sgYnJvd3NlciBmYWNpbmdNb2RlIGNvbnN0cmFpbnQgc3VwcG9ydFxuICAgICAgLy8gRmlyZWZveCBpZ25vcmVzIGZhY2luZ01vZGUgb3IgZGV2aWNlSWQgY29uc3RyYWludHNcblxuICAgICAgdmFyIGlzRmlyZWZveCA9IC9maXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciBzdXBwb3J0ZWQgPSB7fTtcbiAgICAgIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIHR5cGVvZiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFN1cHBvcnRlZENvbnN0cmFpbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHN1cHBvcnRlZCA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMoKTtcbiAgICAgIH1cbiAgICAgIHZhciBjb25zdHJhaW50cyA9IHt9O1xuXG4gICAgICBpZiAoc3VwcG9ydGVkLmZhY2luZ01vZGUpIHtcbiAgICAgICAgY29uc3RyYWludHMuZmFjaW5nTW9kZSA9IHsgaWRlYWw6IGZhY2luZ01vZGUgfTtcbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0ZWQuZnJhbWVSYXRlKSB7XG4gICAgICAgIGNvbnN0cmFpbnRzLmZyYW1lUmF0ZSA9IHsgaWRlYWw6IDI1LCBtaW46IDEwIH07XG4gICAgICB9XG5cbiAgICAgIHZhciB2Q29uc3RyYWludHNQcm9taXNlID0gc3VwcG9ydGVkLmZhY2luZ01vZGUgfHwgaXNGaXJlZm94ID8gUHJvbWlzZS5yZXNvbHZlKHByb3BzLmNvbnN0cmFpbnRzIHx8IGNvbnN0cmFpbnRzKSA6IGdldERldmljZUlkKGZhY2luZ01vZGUpLnRoZW4oZnVuY3Rpb24gKGRldmljZUlkKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB7IGRldmljZUlkOiBkZXZpY2VJZCB9LCBwcm9wcy5jb25zdHJhaW50cyk7XG4gICAgICB9KTtcblxuICAgICAgdkNvbnN0cmFpbnRzUHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2aWRlbykge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoeyB2aWRlbzogdmlkZW8gfSk7XG4gICAgICB9KS50aGVuKHRoaXMuaGFuZGxlVmlkZW8pLmNhdGNoKG9uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVZpZGVvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlVmlkZW8oc3RyZWFtKSB7XG4gICAgICB2YXIgcHJldmlldyA9IHRoaXMuZWxzLnByZXZpZXc7XG4gICAgICB2YXIgZmFjaW5nTW9kZSA9IHRoaXMucHJvcHMuZmFjaW5nTW9kZTtcblxuICAgICAgLy8gUHJldmlldyBlbGVtZW50IGhhc24ndCBiZWVuIHJlbmRlcmVkIHNvIHdhaXQgZm9yIGl0LlxuXG4gICAgICBpZiAoIXByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQodGhpcy5oYW5kbGVWaWRlbywgMjAwLCBzdHJlYW0pO1xuICAgICAgfVxuXG4gICAgICAvLyBIYW5kbGUgZGlmZmVyZW50IGJyb3dzZXIgaW1wbGVtZW50YXRpb25zIG9mIE1lZGlhU3RyZWFtcyBhcyBzcmNcbiAgICAgIGlmICgocHJldmlldyB8fCB7fSkuc3JjT2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJldmlldy5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9IGVsc2UgaWYgKHByZXZpZXcubW96U3JjT2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJldmlldy5tb3pTcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9IGVsc2UgaWYgKHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKSB7XG4gICAgICAgIHByZXZpZXcuc3JjID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKTtcbiAgICAgIH0gZWxzZSBpZiAod2luZG93LndlYmtpdFVSTCkge1xuICAgICAgICBwcmV2aWV3LnNyYyA9IHdpbmRvdy53ZWJraXRVUkwuY3JlYXRlT2JqZWN0VVJMKHN0cmVhbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aWV3LnNyYyA9IHN0cmVhbTtcbiAgICAgIH1cblxuICAgICAgLy8gSU9TIHBsYXkgaW4gZnVsbHNjcmVlblxuICAgICAgcHJldmlldy5wbGF5c0lubGluZSA9IHRydWU7XG5cbiAgICAgIHZhciBzdHJlYW1UcmFjayA9IHN0cmVhbS5nZXRUcmFja3MoKVswXTtcbiAgICAgIC8vIEFzc2lnbiBgc3RvcENhbWVyYWAgc28gdGhlIHRyYWNrIGNhbiBiZSBzdG9wcGVkIG9uY2UgY29tcG9uZW50IGlzIGNsZWFyZWRcbiAgICAgIHRoaXMuc3RvcENhbWVyYSA9IHN0cmVhbVRyYWNrLnN0b3AuYmluZChzdHJlYW1UcmFjayk7XG5cbiAgICAgIHByZXZpZXcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0JywgdGhpcy5oYW5kbGVMb2FkU3RhcnQpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgbWlycm9yVmlkZW86IGZhY2luZ01vZGUgPT0gJ3VzZXInLCBzdHJlYW1MYWJlbDogc3RyZWFtVHJhY2subGFiZWwgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlTG9hZFN0YXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlTG9hZFN0YXJ0KCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGVsYXkgPSBfcHJvcHMuZGVsYXksXG4gICAgICAgICAgb25Mb2FkID0gX3Byb3BzLm9uTG9hZDtcbiAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIG1pcnJvclZpZGVvID0gX3N0YXRlLm1pcnJvclZpZGVvLFxuICAgICAgICAgIHN0cmVhbUxhYmVsID0gX3N0YXRlLnN0cmVhbUxhYmVsO1xuXG4gICAgICB2YXIgcHJldmlldyA9IHRoaXMuZWxzLnByZXZpZXc7XG4gICAgICBwcmV2aWV3LnBsYXkoKTtcblxuICAgICAgaWYgKHR5cGVvZiBvbkxvYWQgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvbkxvYWQoeyBtaXJyb3JWaWRlbzogbWlycm9yVmlkZW8sIHN0cmVhbUxhYmVsOiBzdHJlYW1MYWJlbCB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkZWxheSA9PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuY2hlY2ssIGRlbGF5KTtcbiAgICAgIH1cblxuICAgICAgLy8gU29tZSBicm93c2VycyBjYWxsIGxvYWRzdGFydCBjb250aW51b3VzbHlcbiAgICAgIHByZXZpZXcucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0JywgdGhpcy5oYW5kbGVMb2FkU3RhcnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NoZWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2soKSB7XG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgbGVnYWN5TW9kZSA9IF9wcm9wczIubGVnYWN5TW9kZSxcbiAgICAgICAgICByZXNvbHV0aW9uID0gX3Byb3BzMi5yZXNvbHV0aW9uLFxuICAgICAgICAgIGRlbGF5ID0gX3Byb3BzMi5kZWxheTtcbiAgICAgIHZhciBfZWxzID0gdGhpcy5lbHMsXG4gICAgICAgICAgcHJldmlldyA9IF9lbHMucHJldmlldyxcbiAgICAgICAgICBjYW52YXMgPSBfZWxzLmNhbnZhcyxcbiAgICAgICAgICBpbWcgPSBfZWxzLmltZztcblxuICAgICAgLy8gR2V0IGltYWdlL3ZpZGVvIGRpbWVuc2lvbnNcblxuICAgICAgdmFyIHdpZHRoID0gTWF0aC5mbG9vcihsZWdhY3lNb2RlID8gaW1nLm5hdHVyYWxXaWR0aCA6IHByZXZpZXcudmlkZW9XaWR0aCk7XG4gICAgICB2YXIgaGVpZ2h0ID0gTWF0aC5mbG9vcihsZWdhY3lNb2RlID8gaW1nLm5hdHVyYWxIZWlnaHQgOiBwcmV2aWV3LnZpZGVvSGVpZ2h0KTtcblxuICAgICAgLy8gQ2FudmFzIGRyYXcgb2Zmc2V0c1xuICAgICAgdmFyIGhvek9mZnNldCA9IDA7XG4gICAgICB2YXIgdmVydE9mZnNldCA9IDA7XG5cbiAgICAgIC8vIFNjYWxlIGltYWdlIHRvIGNvcnJlY3QgcmVzb2x1dGlvblxuICAgICAgaWYgKGxlZ2FjeU1vZGUpIHtcbiAgICAgICAgLy8gS2VlcCBpbWFnZSBhc3BlY3QgcmF0aW9cbiAgICAgICAgdmFyIGdyZWF0ZXN0U2l6ZSA9IHdpZHRoID4gaGVpZ2h0ID8gd2lkdGggOiBoZWlnaHQ7XG4gICAgICAgIHZhciByYXRpbyA9IHJlc29sdXRpb24gLyBncmVhdGVzdFNpemU7XG5cbiAgICAgICAgaGVpZ2h0ID0gcmF0aW8gKiBoZWlnaHQ7XG4gICAgICAgIHdpZHRoID0gcmF0aW8gKiB3aWR0aDtcblxuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENyb3AgaW1hZ2UgdG8gZml0IDE6MSBhc3BlY3QgcmF0aW9cbiAgICAgICAgdmFyIHNtYWxsZXN0U2l6ZSA9IHdpZHRoIDwgaGVpZ2h0ID8gd2lkdGggOiBoZWlnaHQ7XG4gICAgICAgIHZhciBfcmF0aW8gPSByZXNvbHV0aW9uIC8gc21hbGxlc3RTaXplO1xuXG4gICAgICAgIGhlaWdodCA9IF9yYXRpbyAqIGhlaWdodDtcbiAgICAgICAgd2lkdGggPSBfcmF0aW8gKiB3aWR0aDtcblxuICAgICAgICB2ZXJ0T2Zmc2V0ID0gKGhlaWdodCAtIHJlc29sdXRpb24pIC8gMiAqIC0xO1xuICAgICAgICBob3pPZmZzZXQgPSAod2lkdGggLSByZXNvbHV0aW9uKSAvIDIgKiAtMTtcblxuICAgICAgICBjYW52YXMud2lkdGggPSByZXNvbHV0aW9uO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gcmVzb2x1dGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZpZXdJc1BsYXlpbmcgPSBwcmV2aWV3ICYmIHByZXZpZXcucmVhZHlTdGF0ZSA9PT0gcHJldmlldy5IQVZFX0VOT1VHSF9EQVRBO1xuXG4gICAgICBpZiAobGVnYWN5TW9kZSB8fCBwcmV2aWV3SXNQbGF5aW5nKSB7XG4gICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICBjdHguZHJhd0ltYWdlKGxlZ2FjeU1vZGUgPyBpbWcgOiBwcmV2aWV3LCBob3pPZmZzZXQsIHZlcnRPZmZzZXQsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIHZhciBpbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIC8vIFNlbmQgZGF0YSB0byB3ZWItd29ya2VyXG4gICAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKGltYWdlRGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBQcmV2aWV3IG5vdCByZWFkeSAtPiBjaGVjayBsYXRlclxuICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuY2hlY2ssIGRlbGF5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVXb3JrZXJNZXNzYWdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlV29ya2VyTWVzc2FnZShlKSB7XG4gICAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb25TY2FuID0gX3Byb3BzMy5vblNjYW4sXG4gICAgICAgICAgbGVnYWN5TW9kZSA9IF9wcm9wczMubGVnYWN5TW9kZSxcbiAgICAgICAgICBkZWxheSA9IF9wcm9wczMuZGVsYXk7XG5cbiAgICAgIHZhciBkZWNvZGVkID0gZS5kYXRhO1xuICAgICAgb25TY2FuKGRlY29kZWQgfHwgbnVsbCk7XG5cbiAgICAgIGlmICghbGVnYWN5TW9kZSAmJiB0eXBlb2YgZGVsYXkgPT0gJ251bWJlcicgJiYgdGhpcy53b3JrZXIpIHtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmNoZWNrLCBkZWxheSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5pdGlhdGVMZWdhY3lNb2RlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGlhdGVMZWdhY3lNb2RlKCkge1xuICAgICAgdGhpcy5yZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgdGhpcy5yZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuaGFuZGxlUmVhZGVyTG9hZCk7XG4gICAgICB0aGlzLmVscy5pbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuY2hlY2ssIGZhbHNlKTtcblxuICAgICAgLy8gUmVzZXQgY29tcG9uZW50RGlkVXBkYXRlXG4gICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uTG9hZCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25Mb2FkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlSW5wdXRDaGFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVJbnB1dENoYW5nZShlKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRJbWcgPSBlLnRhcmdldC5maWxlc1swXTtcbiAgICAgIHRoaXMucmVhZGVyLnJlYWRBc0RhdGFVUkwoc2VsZWN0ZWRJbWcpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVJlYWRlckxvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSZWFkZXJMb2FkKGUpIHtcbiAgICAgIC8vIFNldCBzZWxlY3RlZCBpbWFnZSBibG9iIGFzIGltZyBzb3VyY2VcbiAgICAgIHRoaXMuZWxzLmltZy5zcmMgPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3BlbkltYWdlRGlhbG9nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbkltYWdlRGlhbG9nKCkge1xuICAgICAgLy8gRnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgYnkgcGFyZW50IGluIHVzZXIgYWN0aW9uIGNvbnRleHQgdG8gdHJpZ2dlciBpbWcgZmlsZSB1cGxvYWRlclxuICAgICAgdGhpcy5lbHMuaW5wdXQuY2xpY2soKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRSZWZGYWN0b3J5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UmVmRmFjdG9yeShrZXkpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgX3RoaXMyLmVsc1trZXldID0gZWxlbWVudDtcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzNC5zdHlsZSxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHM0LmNsYXNzTmFtZSxcbiAgICAgICAgICBvbkltYWdlTG9hZCA9IF9wcm9wczQub25JbWFnZUxvYWQsXG4gICAgICAgICAgbGVnYWN5TW9kZSA9IF9wcm9wczQubGVnYWN5TW9kZSxcbiAgICAgICAgICBzaG93Vmlld0ZpbmRlciA9IF9wcm9wczQuc2hvd1ZpZXdGaW5kZXIsXG4gICAgICAgICAgZmFjaW5nTW9kZSA9IF9wcm9wczQuZmFjaW5nTW9kZTtcblxuXG4gICAgICB2YXIgY29udGFpbmVyU3R5bGUgPSB7XG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBhZGRpbmdUb3A6ICcxMDAlJ1xuICAgICAgfTtcbiAgICAgIHZhciBoaWRkZW5TdHlsZSA9IHsgZGlzcGxheTogJ25vbmUnIH07XG4gICAgICB2YXIgcHJldmlld1N0eWxlID0ge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgdmFyIHZpZGVvUHJldmlld1N0eWxlID0gX2V4dGVuZHMoe30sIHByZXZpZXdTdHlsZSwge1xuICAgICAgICBvYmplY3RGaXQ6ICdjb3ZlcicsXG4gICAgICAgIHRyYW5zZm9ybTogdGhpcy5zdGF0ZS5taXJyb3JWaWRlbyA/ICdzY2FsZVgoLTEpJyA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICB2YXIgaW1nUHJldmlld1N0eWxlID0gX2V4dGVuZHMoe30sIHByZXZpZXdTdHlsZSwge1xuICAgICAgICBvYmplY3RGaXQ6ICdzY2FsZS1kb3duJ1xuICAgICAgfSk7XG5cbiAgICAgIHZhciB2aWV3RmluZGVyU3R5bGUgPSB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgYm9yZGVyOiAnNTBweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMyknLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCA1cHggcmdiYSgyNTUsIDAsIDAsIDAuNSknLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc2VjdGlvbicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiBzdHlsZSB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgICB7IHN0eWxlOiBjb250YWluZXJTdHlsZSB9LFxuICAgICAgICAgICFsZWdhY3lNb2RlICYmIHNob3dWaWV3RmluZGVyID8gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogdmlld0ZpbmRlclN0eWxlIH0pIDogbnVsbCxcbiAgICAgICAgICBsZWdhY3lNb2RlID8gUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICAgICAgICBzdHlsZTogaGlkZGVuU3R5bGUsXG4gICAgICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgICAgICBhY2NlcHQ6ICdpbWFnZS8qJyxcbiAgICAgICAgICAgIHJlZjogdGhpcy5zZXRSZWZGYWN0b3J5KCdpbnB1dCcpLFxuICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2VcbiAgICAgICAgICB9KSA6IG51bGwsXG4gICAgICAgICAgbGVnYWN5TW9kZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgc3R5bGU6IGltZ1ByZXZpZXdTdHlsZSwgcmVmOiB0aGlzLnNldFJlZkZhY3RvcnkoJ2ltZycpLCBvbkxvYWQ6IG9uSW1hZ2VMb2FkIH0pIDogUmVhY3QuY3JlYXRlRWxlbWVudCgndmlkZW8nLCB7IHN0eWxlOiB2aWRlb1ByZXZpZXdTdHlsZSwgcmVmOiB0aGlzLnNldFJlZkZhY3RvcnkoJ3ByZXZpZXcnKSB9KSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdjYW52YXMnLCB7IHN0eWxlOiBoaWRkZW5TdHlsZSwgcmVmOiB0aGlzLnNldFJlZkZhY3RvcnkoJ2NhbnZhcycpIH0pXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlYWRlcjtcbn0oQ29tcG9uZW50KSwgX2NsYXNzLnByb3BUeXBlcyA9IHtcbiAgb25TY2FuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkVycm9yOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkxvYWQ6IFByb3BUeXBlcy5mdW5jLFxuICBvbkltYWdlTG9hZDogUHJvcFR5cGVzLmZ1bmMsXG4gIGRlbGF5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICBmYWNpbmdNb2RlOiBQcm9wVHlwZXMub25lT2YoWyd1c2VyJywgJ2Vudmlyb25tZW50J10pLFxuICBsZWdhY3lNb2RlOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmVzb2x1dGlvbjogUHJvcFR5cGVzLm51bWJlcixcbiAgc2hvd1ZpZXdGaW5kZXI6IFByb3BUeXBlcy5ib29sLFxuICBzdHlsZTogUHJvcFR5cGVzLmFueSxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb25zdHJhaW50czogUHJvcFR5cGVzLm9iamVjdFxufSwgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGVsYXk6IDUwMCxcbiAgcmVzb2x1dGlvbjogNjAwLFxuICBmYWNpbmdNb2RlOiAnZW52aXJvbm1lbnQnLFxuICBzaG93Vmlld0ZpbmRlcjogdHJ1ZSxcbiAgY29uc3RyYWludHM6IG51bGxcbn0sIF90ZW1wKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1xci1yZWFkZXIvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9lcnJvcnMnKSxcbiAgICBOb1ZpZGVvSW5wdXREZXZpY2VzRXJyb3IgPSBfcmVxdWlyZS5Ob1ZpZGVvSW5wdXREZXZpY2VzRXJyb3I7XG5cbmZ1bmN0aW9uIGRlZmF1bHREZXZpY2VJZENob29zZXIoZmlsdGVyZWREZXZpY2VzLCB2aWRlb0RldmljZXMsIGZhY2luZ01vZGUpIHtcbiAgaWYgKGZpbHRlcmVkRGV2aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGZpbHRlcmVkRGV2aWNlc1swXS5kZXZpY2VJZDtcbiAgfVxuICBpZiAodmlkZW9EZXZpY2VzLmxlbmd0aCA9PSAxIHx8IGZhY2luZ01vZGUgPT0gJ3VzZXInKSB7XG4gICAgcmV0dXJuIHZpZGVvRGV2aWNlc1swXS5kZXZpY2VJZDtcbiAgfVxuICByZXR1cm4gdmlkZW9EZXZpY2VzWzFdLmRldmljZUlkO1xufVxuXG52YXIgZ2V0RmFjaW5nTW9kZVBhdHRlcm4gPSBmdW5jdGlvbiBnZXRGYWNpbmdNb2RlUGF0dGVybihmYWNpbmdNb2RlKSB7XG4gIHJldHVybiBmYWNpbmdNb2RlID09ICdlbnZpcm9ubWVudCcgPyAvcmVhcnxiYWNrfGVudmlyb25tZW50L2lnIDogL2Zyb250fHVzZXJ8ZmFjZS9pZztcbn07XG5cbmZ1bmN0aW9uIGdldERldmljZUlkKGZhY2luZ01vZGUpIHtcbiAgdmFyIGNob29zZURldmljZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0RGV2aWNlSWRDaG9vc2VyO1xuXG4gIC8vIEdldCBtYW51YWwgZGV2aWNlSWQgZnJvbSBhdmFpbGFibGUgZGV2aWNlcy5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgZW51bWVyYXRlRGV2aWNlcyA9IHZvaWQgMDtcbiAgICB0cnkge1xuICAgICAgZW51bWVyYXRlRGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmVqZWN0KG5ldyBOb1ZpZGVvSW5wdXREZXZpY2VzRXJyb3IoKSk7XG4gICAgfVxuICAgIGVudW1lcmF0ZURldmljZXMudGhlbihmdW5jdGlvbiAoZGV2aWNlcykge1xuICAgICAgLy8gRmlsdGVyIG91dCBub24tdmlkZW9pbnB1dHNcbiAgICAgIHZhciB2aWRlb0RldmljZXMgPSBkZXZpY2VzLmZpbHRlcihmdW5jdGlvbiAoZGV2aWNlKSB7XG4gICAgICAgIHJldHVybiBkZXZpY2Uua2luZCA9PSAndmlkZW9pbnB1dCc7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHZpZGVvRGV2aWNlcy5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJlamVjdChuZXcgTm9WaWRlb0lucHV0RGV2aWNlc0Vycm9yKCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXR0ZXJuID0gZ2V0RmFjaW5nTW9kZVBhdHRlcm4oZmFjaW5nTW9kZSk7XG5cbiAgICAgIC8vIEZpbHRlciBvdXQgdmlkZW8gZGV2aWNlcyB3aXRob3V0IHRoZSBwYXR0ZXJuXG4gICAgICB2YXIgZmlsdGVyZWREZXZpY2VzID0gdmlkZW9EZXZpY2VzLmZpbHRlcihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgbGFiZWwgPSBfcmVmLmxhYmVsO1xuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KGxhYmVsKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXNvbHZlKGNob29zZURldmljZUlkKGZpbHRlcmVkRGV2aWNlcywgdmlkZW9EZXZpY2VzLCBmYWNpbmdNb2RlKSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZ2V0RGV2aWNlSWQ6IGdldERldmljZUlkLCBnZXRGYWNpbmdNb2RlUGF0dGVybjogZ2V0RmFjaW5nTW9kZVBhdHRlcm4gfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1xci1yZWFkZXIvbGliL2dldERldmljZUlkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gTm9WaWRlb0lucHV0RGV2aWNlc0Vycm9yKCkge1xuICB0aGlzLm5hbWUgPSAnTm9WaWRlb0lucHV0RGV2aWNlc0Vycm9yJztcbiAgdGhpcy5tZXNzYWdlID0gJ05vIHZpZGVvIGlucHV0IGRldmljZXMgZm91bmQnO1xufVxuTm9WaWRlb0lucHV0RGV2aWNlc0Vycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTm9WaWRlb0lucHV0RGV2aWNlc0Vycm9yOiBOb1ZpZGVvSW5wdXREZXZpY2VzRXJyb3Jcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QtcXItcmVhZGVyL2xpYi9lcnJvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDEzNDdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGF2ZVByb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywga2V5cykge1xuICB2YXIgY2hhbmdlZFByb3BzID0gW107XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHByZXZQcm9wc1trZXldICE9IG5leHRQcm9wc1trZXldKSB7XG4gICAgICBjaGFuZ2VkUHJvcHMucHVzaChrZXkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGFuZ2VkUHJvcHM7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXFyLXJlYWRlci9saWIvaGF2ZVByb3BzQ2hhbmdlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTM0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBGcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL25vbGFubGF3c29uLzEwMzQwMjU1XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlQmxvYihwYXJ0cywgcHJvcGVydGllcykge1xuICBwYXJ0cyA9IHBhcnRzIHx8IFtdO1xuICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcyB8fCB7fTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IEJsb2IocGFydHMsIHByb3BlcnRpZXMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUubmFtZSAhPT0gXCJUeXBlRXJyb3JcIikge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgdmFyIEJsb2JCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5NU0Jsb2JCdWlsZGVyIHx8IHdpbmRvdy5Nb3pCbG9iQnVpbGRlciB8fCB3aW5kb3cuV2ViS2l0QmxvYkJ1aWxkZXI7XG4gICAgdmFyIGJ1aWxkZXIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBidWlsZGVyLmFwcGVuZChwYXJ0c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBidWlsZGVyLmdldEJsb2IocHJvcGVydGllcy50eXBlKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1xci1yZWFkZXIvbGliL2NyZWF0ZUJsb2IuanNcbi8vIG1vZHVsZSBpZCA9IDEzNDlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge2FkYXB0ZXJGYWN0b3J5fSBmcm9tICcuL2FkYXB0ZXJfZmFjdG9yeS5qcyc7XG5cbmNvbnN0IGFkYXB0ZXIgPVxuICBhZGFwdGVyRmFjdG9yeSh7d2luZG93OiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IHdpbmRvd30pO1xuZXhwb3J0IGRlZmF1bHQgYWRhcHRlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2NvcmUuanNcbi8vIG1vZHVsZSBpZCA9IDEzNTBcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuICAvLyBCcm93c2VyIHNoaW1zLlxuaW1wb3J0ICogYXMgY2hyb21lU2hpbSBmcm9tICcuL2Nocm9tZS9jaHJvbWVfc2hpbSc7XG5pbXBvcnQgKiBhcyBlZGdlU2hpbSBmcm9tICcuL2VkZ2UvZWRnZV9zaGltJztcbmltcG9ydCAqIGFzIGZpcmVmb3hTaGltIGZyb20gJy4vZmlyZWZveC9maXJlZm94X3NoaW0nO1xuaW1wb3J0ICogYXMgc2FmYXJpU2hpbSBmcm9tICcuL3NhZmFyaS9zYWZhcmlfc2hpbSc7XG5pbXBvcnQgKiBhcyBjb21tb25TaGltIGZyb20gJy4vY29tbW9uX3NoaW0nO1xuXG4vLyBTaGltbWluZyBzdGFydHMgaGVyZS5cbmV4cG9ydCBmdW5jdGlvbiBhZGFwdGVyRmFjdG9yeSh7d2luZG93fSA9IHt9LCBvcHRpb25zID0ge1xuICBzaGltQ2hyb21lOiB0cnVlLFxuICBzaGltRmlyZWZveDogdHJ1ZSxcbiAgc2hpbUVkZ2U6IHRydWUsXG4gIHNoaW1TYWZhcmk6IHRydWUsXG59KSB7XG4gIC8vIFV0aWxzLlxuICBjb25zdCBsb2dnaW5nID0gdXRpbHMubG9nO1xuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICBjb25zdCBhZGFwdGVyID0ge1xuICAgIGJyb3dzZXJEZXRhaWxzLFxuICAgIGNvbW1vblNoaW0sXG4gICAgZXh0cmFjdFZlcnNpb246IHV0aWxzLmV4dHJhY3RWZXJzaW9uLFxuICAgIGRpc2FibGVMb2c6IHV0aWxzLmRpc2FibGVMb2csXG4gICAgZGlzYWJsZVdhcm5pbmdzOiB1dGlscy5kaXNhYmxlV2FybmluZ3NcbiAgfTtcblxuICAvLyBTaGltIGJyb3dzZXIgaWYgZm91bmQuXG4gIHN3aXRjaCAoYnJvd3NlckRldGFpbHMuYnJvd3Nlcikge1xuICAgIGNhc2UgJ2Nocm9tZSc6XG4gICAgICBpZiAoIWNocm9tZVNoaW0gfHwgIWNocm9tZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uIHx8XG4gICAgICAgICAgIW9wdGlvbnMuc2hpbUNocm9tZSkge1xuICAgICAgICBsb2dnaW5nKCdDaHJvbWUgc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuJyk7XG4gICAgICAgIHJldHVybiBhZGFwdGVyO1xuICAgICAgfVxuICAgICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPT09IG51bGwpIHtcbiAgICAgICAgbG9nZ2luZygnQ2hyb21lIHNoaW0gY2FuIG5vdCBkZXRlcm1pbmUgdmVyc2lvbiwgbm90IHNoaW1taW5nLicpO1xuICAgICAgICByZXR1cm4gYWRhcHRlcjtcbiAgICAgIH1cbiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgY2hyb21lLicpO1xuICAgICAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgIGFkYXB0ZXIuYnJvd3NlclNoaW0gPSBjaHJvbWVTaGltO1xuXG4gICAgICBjaHJvbWVTaGltLnNoaW1HZXRVc2VyTWVkaWEod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbU1lZGlhU3RyZWFtKHdpbmRvdyk7XG4gICAgICBjaHJvbWVTaGltLnNoaW1QZWVyQ29ubmVjdGlvbih3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltT25UcmFjayh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltQWRkVHJhY2tSZW1vdmVUcmFjayh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltR2V0U2VuZGVyc1dpdGhEdG1mKHdpbmRvdyk7XG4gICAgICBjaHJvbWVTaGltLnNoaW1HZXRTdGF0cyh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltU2VuZGVyUmVjZWl2ZXJHZXRTdGF0cyh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5maXhOZWdvdGlhdGlvbk5lZWRlZCh3aW5kb3cpO1xuXG4gICAgICBjb21tb25TaGltLnNoaW1SVENJY2VDYW5kaWRhdGUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbUNvbm5lY3Rpb25TdGF0ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltTWF4TWVzc2FnZVNpemUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5yZW1vdmVBbGxvd0V4dG1hcE1peGVkKHdpbmRvdyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmaXJlZm94JzpcbiAgICAgIGlmICghZmlyZWZveFNoaW0gfHwgIWZpcmVmb3hTaGltLnNoaW1QZWVyQ29ubmVjdGlvbiB8fFxuICAgICAgICAgICFvcHRpb25zLnNoaW1GaXJlZm94KSB7XG4gICAgICAgIGxvZ2dpbmcoJ0ZpcmVmb3ggc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuJyk7XG4gICAgICAgIHJldHVybiBhZGFwdGVyO1xuICAgICAgfVxuICAgICAgbG9nZ2luZygnYWRhcHRlci5qcyBzaGltbWluZyBmaXJlZm94LicpO1xuICAgICAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgIGFkYXB0ZXIuYnJvd3NlclNoaW0gPSBmaXJlZm94U2hpbTtcblxuICAgICAgZmlyZWZveFNoaW0uc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVBlZXJDb25uZWN0aW9uKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltT25UcmFjayh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVJlbW92ZVN0cmVhbSh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVNlbmRlckdldFN0YXRzKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltUmVjZWl2ZXJHZXRTdGF0cyh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVJUQ0RhdGFDaGFubmVsKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltQWRkVHJhbnNjZWl2ZXIod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1HZXRQYXJhbWV0ZXJzKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltQ3JlYXRlT2ZmZXIod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1DcmVhdGVBbnN3ZXIod2luZG93KTtcblxuICAgICAgY29tbW9uU2hpbS5zaGltUlRDSWNlQ2FuZGlkYXRlKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1Db25uZWN0aW9uU3RhdGUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbU1heE1lc3NhZ2VTaXplKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1TZW5kVGhyb3dUeXBlRXJyb3Iod2luZG93KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2VkZ2UnOlxuICAgICAgaWYgKCFlZGdlU2hpbSB8fCAhZWRnZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uIHx8ICFvcHRpb25zLnNoaW1FZGdlKSB7XG4gICAgICAgIGxvZ2dpbmcoJ01TIGVkZ2Ugc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuJyk7XG4gICAgICAgIHJldHVybiBhZGFwdGVyO1xuICAgICAgfVxuICAgICAgbG9nZ2luZygnYWRhcHRlci5qcyBzaGltbWluZyBlZGdlLicpO1xuICAgICAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgIGFkYXB0ZXIuYnJvd3NlclNoaW0gPSBlZGdlU2hpbTtcblxuICAgICAgZWRnZVNoaW0uc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpO1xuICAgICAgZWRnZVNoaW0uc2hpbUdldERpc3BsYXlNZWRpYSh3aW5kb3cpO1xuICAgICAgZWRnZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uKHdpbmRvdyk7XG4gICAgICBlZGdlU2hpbS5zaGltUmVwbGFjZVRyYWNrKHdpbmRvdyk7XG5cbiAgICAgIC8vIHRoZSBlZGdlIHNoaW0gaW1wbGVtZW50cyB0aGUgZnVsbCBSVENJY2VDYW5kaWRhdGUgb2JqZWN0LlxuXG4gICAgICBjb21tb25TaGltLnNoaW1NYXhNZXNzYWdlU2l6ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltU2VuZFRocm93VHlwZUVycm9yKHdpbmRvdyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzYWZhcmknOlxuICAgICAgaWYgKCFzYWZhcmlTaGltIHx8ICFvcHRpb25zLnNoaW1TYWZhcmkpIHtcbiAgICAgICAgbG9nZ2luZygnU2FmYXJpIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpO1xuICAgICAgICByZXR1cm4gYWRhcHRlcjtcbiAgICAgIH1cbiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgc2FmYXJpLicpO1xuICAgICAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgIGFkYXB0ZXIuYnJvd3NlclNoaW0gPSBzYWZhcmlTaGltO1xuXG4gICAgICBzYWZhcmlTaGltLnNoaW1SVENJY2VTZXJ2ZXJVcmxzKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1DcmVhdGVPZmZlckxlZ2FjeSh3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltQ2FsbGJhY2tzQVBJKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1Mb2NhbFN0cmVhbXNBUEkod2luZG93KTtcbiAgICAgIHNhZmFyaVNoaW0uc2hpbVJlbW90ZVN0cmVhbXNBUEkod2luZG93KTtcbiAgICAgIHNhZmFyaVNoaW0uc2hpbVRyYWNrRXZlbnRUcmFuc2NlaXZlcih3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltR2V0VXNlck1lZGlhKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1BdWRpb0NvbnRleHQod2luZG93KTtcblxuICAgICAgY29tbW9uU2hpbS5zaGltUlRDSWNlQ2FuZGlkYXRlKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1NYXhNZXNzYWdlU2l6ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltU2VuZFRocm93VHlwZUVycm9yKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnJlbW92ZUFsbG93RXh0bWFwTWl4ZWQod2luZG93KTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsb2dnaW5nKCdVbnN1cHBvcnRlZCBicm93c2VyIScpO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2ZhY3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDEzNTFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbmV4cG9ydCB7c2hpbUdldFVzZXJNZWRpYX0gZnJvbSAnLi9nZXR1c2VybWVkaWEnO1xuZXhwb3J0IHtzaGltR2V0RGlzcGxheU1lZGlhfSBmcm9tICcuL2dldGRpc3BsYXltZWRpYSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltTWVkaWFTdHJlYW0od2luZG93KSB7XG4gIHdpbmRvdy5NZWRpYVN0cmVhbSA9IHdpbmRvdy5NZWRpYVN0cmVhbSB8fCB3aW5kb3cud2Via2l0TWVkaWFTdHJlYW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltT25UcmFjayh3aW5kb3cpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiAhKCdvbnRyYWNrJyBpblxuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ29udHJhY2snLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbnRyYWNrO1xuICAgICAgfSxcbiAgICAgIHNldChmKSB7XG4gICAgICAgIGlmICh0aGlzLl9vbnRyYWNrKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29udHJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbnRyYWNrID0gZik7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIGNvbnN0IG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb247XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICBmdW5jdGlvbiBzZXRSZW1vdGVEZXNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9vbnRyYWNrcG9seSkge1xuICAgICAgICAgIHRoaXMuX29udHJhY2twb2x5ID0gKGUpID0+IHtcbiAgICAgICAgICAgIC8vIG9uYWRkc3RyZWFtIGRvZXMgbm90IGZpcmUgd2hlbiBhIHRyYWNrIGlzIGFkZGVkIHRvIGFuIGV4aXN0aW5nXG4gICAgICAgICAgICAvLyBzdHJlYW0uIEJ1dCBzdHJlYW0ub25hZGR0cmFjayBpcyBpbXBsZW1lbnRlZCBzbyB3ZSB1c2UgdGhhdC5cbiAgICAgICAgICAgIGUuc3RyZWFtLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdGUgPT4ge1xuICAgICAgICAgICAgICBsZXQgcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycykge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0gdGhpcy5nZXRSZWNlaXZlcnMoKVxuICAgICAgICAgICAgICAgICAgLmZpbmQociA9PiByLnRyYWNrICYmIHIudHJhY2suaWQgPT09IHRlLnRyYWNrLmlkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlciA9IHt0cmFjazogdGUudHJhY2t9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYWNrID0gdGUudHJhY2s7XG4gICAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYW5zY2VpdmVyID0ge3JlY2VpdmVyfTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtcyA9IFtlLnN0cmVhbV07XG4gICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGUuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgICBsZXQgcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycykge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0gdGhpcy5nZXRSZWNlaXZlcnMoKVxuICAgICAgICAgICAgICAgICAgLmZpbmQociA9PiByLnRyYWNrICYmIHIudHJhY2suaWQgPT09IHRyYWNrLmlkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlciA9IHt0cmFja307XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYWNrID0gdHJhY2s7XG4gICAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYW5zY2VpdmVyID0ge3JlY2VpdmVyfTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtcyA9IFtlLnN0cmVhbV07XG4gICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignYWRkc3RyZWFtJywgdGhpcy5fb250cmFja3BvbHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gZXZlbiBpZiBSVENSdHBUcmFuc2NlaXZlciBpcyBpbiB3aW5kb3csIGl0IGlzIG9ubHkgdXNlZCBhbmRcbiAgICAvLyBlbWl0dGVkIGluIHVuaWZpZWQtcGxhbi4gVW5mb3J0dW5hdGVseSB0aGlzIG1lYW5zIHdlIG5lZWRcbiAgICAvLyB0byB1bmNvbmRpdGlvbmFsbHkgd3JhcCB0aGUgZXZlbnQuXG4gICAgdXRpbHMud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQod2luZG93LCAndHJhY2snLCBlID0+IHtcbiAgICAgIGlmICghZS50cmFuc2NlaXZlcikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgJ3RyYW5zY2VpdmVyJyxcbiAgICAgICAgICB7dmFsdWU6IHtyZWNlaXZlcjogZS5yZWNlaXZlcn19KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0U2VuZGVyc1dpdGhEdG1mKHdpbmRvdykge1xuICAvLyBPdmVycmlkZXMgYWRkVHJhY2svcmVtb3ZlVHJhY2ssIGRlcGVuZHMgb24gc2hpbUFkZFRyYWNrUmVtb3ZlVHJhY2suXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgICEoJ2dldFNlbmRlcnMnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpICYmXG4gICAgICAnY3JlYXRlRFRNRlNlbmRlcicgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkge1xuICAgIGNvbnN0IHNoaW1TZW5kZXJXaXRoRHRtZiA9IGZ1bmN0aW9uKHBjLCB0cmFjaykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHJhY2ssXG4gICAgICAgIGdldCBkdG1mKCkge1xuICAgICAgICAgIGlmICh0aGlzLl9kdG1mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0cmFjay5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2R0bWYgPSBwYy5jcmVhdGVEVE1GU2VuZGVyKHRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX2R0bWYgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5fZHRtZjtcbiAgICAgICAgfSxcbiAgICAgICAgX3BjOiBwY1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLy8gYXVnbWVudCBhZGRUcmFjayB3aGVuIGdldFNlbmRlcnMgaXMgbm90IGF2YWlsYWJsZS5cbiAgICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycykge1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzID0gZnVuY3Rpb24gZ2V0U2VuZGVycygpIHtcbiAgICAgICAgdGhpcy5fc2VuZGVycyA9IHRoaXMuX3NlbmRlcnMgfHwgW107XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kZXJzLnNsaWNlKCk7IC8vIHJldHVybiBhIGNvcHkgb2YgdGhlIGludGVybmFsIHN0YXRlLlxuICAgICAgfTtcbiAgICAgIGNvbnN0IG9yaWdBZGRUcmFjayA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID1cbiAgICAgICAgZnVuY3Rpb24gYWRkVHJhY2sodHJhY2ssIHN0cmVhbSkge1xuICAgICAgICAgIGxldCBzZW5kZXIgPSBvcmlnQWRkVHJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICBpZiAoIXNlbmRlcikge1xuICAgICAgICAgICAgc2VuZGVyID0gc2hpbVNlbmRlcldpdGhEdG1mKHRoaXMsIHRyYWNrKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRlcnMucHVzaChzZW5kZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2VuZGVyO1xuICAgICAgICB9O1xuXG4gICAgICBjb25zdCBvcmlnUmVtb3ZlVHJhY2sgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrO1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjayA9XG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHNlbmRlcikge1xuICAgICAgICAgIG9yaWdSZW1vdmVUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX3NlbmRlcnMuaW5kZXhPZihzZW5kZXIpO1xuICAgICAgICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qgb3JpZ0FkZFN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24gYWRkU3RyZWFtKHN0cmVhbSkge1xuICAgICAgdGhpcy5fc2VuZGVycyA9IHRoaXMuX3NlbmRlcnMgfHwgW107XG4gICAgICBvcmlnQWRkU3RyZWFtLmFwcGx5KHRoaXMsIFtzdHJlYW1dKTtcbiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgdGhpcy5fc2VuZGVycy5wdXNoKHNoaW1TZW5kZXJXaXRoRHRtZih0aGlzLCB0cmFjaykpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9yaWdSZW1vdmVTdHJlYW0gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbTtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgICBmdW5jdGlvbiByZW1vdmVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIHRoaXMuX3NlbmRlcnMgPSB0aGlzLl9zZW5kZXJzIHx8IFtdO1xuICAgICAgICBvcmlnUmVtb3ZlU3RyZWFtLmFwcGx5KHRoaXMsIFtzdHJlYW1dKTtcblxuICAgICAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XG4gICAgICAgICAgY29uc3Qgc2VuZGVyID0gdGhpcy5fc2VuZGVycy5maW5kKHMgPT4gcy50cmFjayA9PT0gdHJhY2spO1xuICAgICAgICAgIGlmIChzZW5kZXIpIHsgLy8gcmVtb3ZlIHNlbmRlclxuICAgICAgICAgICAgdGhpcy5fc2VuZGVycy5zcGxpY2UodGhpcy5fc2VuZGVycy5pbmRleE9mKHNlbmRlciksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgICdnZXRTZW5kZXJzJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlICYmXG4gICAgICAgICAgICAgJ2NyZWF0ZURUTUZTZW5kZXInIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUgJiZcbiAgICAgICAgICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyICYmXG4gICAgICAgICAgICAgISgnZHRtZicgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpKSB7XG4gICAgY29uc3Qgb3JpZ0dldFNlbmRlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzID0gZnVuY3Rpb24gZ2V0U2VuZGVycygpIHtcbiAgICAgIGNvbnN0IHNlbmRlcnMgPSBvcmlnR2V0U2VuZGVycy5hcHBseSh0aGlzLCBbXSk7XG4gICAgICBzZW5kZXJzLmZvckVhY2goc2VuZGVyID0+IHNlbmRlci5fcGMgPSB0aGlzKTtcbiAgICAgIHJldHVybiBzZW5kZXJzO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUsICdkdG1mJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fZHRtZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMudHJhY2sua2luZCA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgdGhpcy5fZHRtZiA9IHRoaXMuX3BjLmNyZWF0ZURUTUZTZW5kZXIodGhpcy50cmFjayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2R0bWYgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZHRtZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldFN0YXRzKHdpbmRvdykge1xuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9yaWdHZXRTdGF0cyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICBjb25zdCBbc2VsZWN0b3IsIG9uU3VjYywgb25FcnJdID0gYXJndW1lbnRzO1xuXG4gICAgLy8gSWYgc2VsZWN0b3IgaXMgYSBmdW5jdGlvbiB0aGVuIHdlIGFyZSBpbiB0aGUgb2xkIHN0eWxlIHN0YXRzIHNvIGp1c3RcbiAgICAvLyBwYXNzIGJhY2sgdGhlIG9yaWdpbmFsIGdldFN0YXRzIGZvcm1hdCB0byBhdm9pZCBicmVha2luZyBvbGQgdXNlcnMuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG9yaWdHZXRTdGF0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gc3BlYy1zdHlsZSBnZXRTdGF0cyBpcyBzdXBwb3J0ZWQsIHJldHVybiB0aG9zZSB3aGVuIGNhbGxlZCB3aXRoXG4gICAgLy8gZWl0aGVyIG5vIGFyZ3VtZW50cyBvciB0aGUgc2VsZWN0b3IgYXJndW1lbnQgaXMgbnVsbC5cbiAgICBpZiAob3JpZ0dldFN0YXRzLmxlbmd0aCA9PT0gMCAmJiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICB0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpKSB7XG4gICAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtdKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaXhDaHJvbWVTdGF0c18gPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgY29uc3Qgc3RhbmRhcmRSZXBvcnQgPSB7fTtcbiAgICAgIGNvbnN0IHJlcG9ydHMgPSByZXNwb25zZS5yZXN1bHQoKTtcbiAgICAgIHJlcG9ydHMuZm9yRWFjaChyZXBvcnQgPT4ge1xuICAgICAgICBjb25zdCBzdGFuZGFyZFN0YXRzID0ge1xuICAgICAgICAgIGlkOiByZXBvcnQuaWQsXG4gICAgICAgICAgdGltZXN0YW1wOiByZXBvcnQudGltZXN0YW1wLFxuICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgIGxvY2FsY2FuZGlkYXRlOiAnbG9jYWwtY2FuZGlkYXRlJyxcbiAgICAgICAgICAgIHJlbW90ZWNhbmRpZGF0ZTogJ3JlbW90ZS1jYW5kaWRhdGUnXG4gICAgICAgICAgfVtyZXBvcnQudHlwZV0gfHwgcmVwb3J0LnR5cGVcbiAgICAgICAgfTtcbiAgICAgICAgcmVwb3J0Lm5hbWVzKCkuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgICBzdGFuZGFyZFN0YXRzW25hbWVdID0gcmVwb3J0LnN0YXQobmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdGFuZGFyZFJlcG9ydFtzdGFuZGFyZFN0YXRzLmlkXSA9IHN0YW5kYXJkU3RhdHM7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHN0YW5kYXJkUmVwb3J0O1xuICAgIH07XG5cbiAgICAvLyBzaGltIGdldFN0YXRzIHdpdGggbWFwbGlrZSBzdXBwb3J0XG4gICAgY29uc3QgbWFrZU1hcFN0YXRzID0gZnVuY3Rpb24oc3RhdHMpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwKE9iamVjdC5rZXlzKHN0YXRzKS5tYXAoa2V5ID0+IFtrZXksIHN0YXRzW2tleV1dKSk7XG4gICAgfTtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3NDYWxsYmFja1dyYXBwZXJfID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgb25TdWNjKG1ha2VNYXBTdGF0cyhmaXhDaHJvbWVTdGF0c18ocmVzcG9uc2UpKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtzdWNjZXNzQ2FsbGJhY2tXcmFwcGVyXyxcbiAgICAgICAgc2VsZWN0b3JdKTtcbiAgICB9XG5cbiAgICAvLyBwcm9taXNlLXN1cHBvcnRcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICByZXNvbHZlKG1ha2VNYXBTdGF0cyhmaXhDaHJvbWVTdGF0c18ocmVzcG9uc2UpKSk7XG4gICAgICAgIH0sIHJlamVjdF0pO1xuICAgIH0pLnRoZW4ob25TdWNjLCBvbkVycik7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltU2VuZGVyUmVjZWl2ZXJHZXRTdGF0cyh3aW5kb3cpIHtcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyICYmIHdpbmRvdy5SVENSdHBSZWNlaXZlcikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBzaGltIHNlbmRlciBzdGF0cy5cbiAgaWYgKCEoJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSkpIHtcbiAgICBjb25zdCBvcmlnR2V0U2VuZGVycyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycztcbiAgICBpZiAob3JpZ0dldFNlbmRlcnMpIHtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycyA9IGZ1bmN0aW9uIGdldFNlbmRlcnMoKSB7XG4gICAgICAgIGNvbnN0IHNlbmRlcnMgPSBvcmlnR2V0U2VuZGVycy5hcHBseSh0aGlzLCBbXSk7XG4gICAgICAgIHNlbmRlcnMuZm9yRWFjaChzZW5kZXIgPT4gc2VuZGVyLl9wYyA9IHRoaXMpO1xuICAgICAgICByZXR1cm4gc2VuZGVycztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgICBpZiAob3JpZ0FkZFRyYWNrKSB7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID0gZnVuY3Rpb24gYWRkVHJhY2soKSB7XG4gICAgICAgIGNvbnN0IHNlbmRlciA9IG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBzZW5kZXIuX3BjID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHNlbmRlcjtcbiAgICAgIH07XG4gICAgfVxuICAgIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgICBjb25zdCBzZW5kZXIgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCkudGhlbihyZXN1bHQgPT5cbiAgICAgICAgLyogTm90ZTogdGhpcyB3aWxsIGluY2x1ZGUgc3RhdHMgb2YgYWxsIHNlbmRlcnMgdGhhdFxuICAgICAgICAgKiAgIHNlbmQgYSB0cmFjayB3aXRoIHRoZSBzYW1lIGlkIGFzIHNlbmRlci50cmFjayBhc1xuICAgICAgICAgKiAgIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBpZGVudGlmeSB0aGUgUlRDUnRwU2VuZGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdXRpbHMuZmlsdGVyU3RhdHMocmVzdWx0LCBzZW5kZXIudHJhY2ssIHRydWUpKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gc2hpbSByZWNlaXZlciBzdGF0cy5cbiAgaWYgKCEoJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlKSkge1xuICAgIGNvbnN0IG9yaWdHZXRSZWNlaXZlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycztcbiAgICBpZiAob3JpZ0dldFJlY2VpdmVycykge1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnMgPVxuICAgICAgICBmdW5jdGlvbiBnZXRSZWNlaXZlcnMoKSB7XG4gICAgICAgICAgY29uc3QgcmVjZWl2ZXJzID0gb3JpZ0dldFJlY2VpdmVycy5hcHBseSh0aGlzLCBbXSk7XG4gICAgICAgICAgcmVjZWl2ZXJzLmZvckVhY2gocmVjZWl2ZXIgPT4gcmVjZWl2ZXIuX3BjID0gdGhpcyk7XG4gICAgICAgICAgcmV0dXJuIHJlY2VpdmVycztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXRpbHMud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQod2luZG93LCAndHJhY2snLCBlID0+IHtcbiAgICAgIGUucmVjZWl2ZXIuX3BjID0gZS5zcmNFbGVtZW50O1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gICAgd2luZG93LlJUQ1J0cFJlY2VpdmVyLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uIGdldFN0YXRzKCkge1xuICAgICAgY29uc3QgcmVjZWl2ZXIgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCkudGhlbihyZXN1bHQgPT5cbiAgICAgICAgdXRpbHMuZmlsdGVyU3RhdHMocmVzdWx0LCByZWNlaXZlci50cmFjaywgZmFsc2UpKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCEoJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSAmJlxuICAgICAgJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHNoaW0gUlRDUGVlckNvbm5lY3Rpb24uZ2V0U3RhdHModHJhY2spLlxuICBjb25zdCBvcmlnR2V0U3RhdHMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmXG4gICAgICAgIGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrKSB7XG4gICAgICBjb25zdCB0cmFjayA9IGFyZ3VtZW50c1swXTtcbiAgICAgIGxldCBzZW5kZXI7XG4gICAgICBsZXQgcmVjZWl2ZXI7XG4gICAgICBsZXQgZXJyO1xuICAgICAgdGhpcy5nZXRTZW5kZXJzKCkuZm9yRWFjaChzID0+IHtcbiAgICAgICAgaWYgKHMudHJhY2sgPT09IHRyYWNrKSB7XG4gICAgICAgICAgaWYgKHNlbmRlcikge1xuICAgICAgICAgICAgZXJyID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZGVyID0gcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXRSZWNlaXZlcnMoKS5mb3JFYWNoKHIgPT4ge1xuICAgICAgICBpZiAoci50cmFjayA9PT0gdHJhY2spIHtcbiAgICAgICAgICBpZiAocmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGVyciA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlY2VpdmVyID0gcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHIudHJhY2sgPT09IHRyYWNrO1xuICAgICAgfSk7XG4gICAgICBpZiAoZXJyIHx8IChzZW5kZXIgJiYgcmVjZWl2ZXIpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRE9NRXhjZXB0aW9uKFxuICAgICAgICAgICdUaGVyZSBhcmUgbW9yZSB0aGFuIG9uZSBzZW5kZXIgb3IgcmVjZWl2ZXIgZm9yIHRoZSB0cmFjay4nLFxuICAgICAgICAgICdJbnZhbGlkQWNjZXNzRXJyb3InKSk7XG4gICAgICB9IGVsc2UgaWYgKHNlbmRlcikge1xuICAgICAgICByZXR1cm4gc2VuZGVyLmdldFN0YXRzKCk7XG4gICAgICB9IGVsc2UgaWYgKHJlY2VpdmVyKSB7XG4gICAgICAgIHJldHVybiByZWNlaXZlci5nZXRTdGF0cygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICdUaGVyZSBpcyBubyBzZW5kZXIgb3IgcmVjZWl2ZXIgZm9yIHRoZSB0cmFjay4nLFxuICAgICAgICAnSW52YWxpZEFjY2Vzc0Vycm9yJykpO1xuICAgIH1cbiAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQWRkVHJhY2tSZW1vdmVUcmFja1dpdGhOYXRpdmUod2luZG93KSB7XG4gIC8vIHNoaW0gYWRkVHJhY2svcmVtb3ZlVHJhY2sgd2l0aCBuYXRpdmUgdmFyaWFudHMgaW4gb3JkZXIgdG8gbWFrZVxuICAvLyB0aGUgaW50ZXJhY3Rpb25zIHdpdGggbGVnYWN5IGdldExvY2FsU3RyZWFtcyBiZWhhdmUgYXMgaW4gb3RoZXIgYnJvd3NlcnMuXG4gIC8vIEtlZXBzIGEgbWFwcGluZyBzdHJlYW0uaWQgPT4gW3N0cmVhbSwgcnRwc2VuZGVycy4uLl1cbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFN0cmVhbXMgPVxuICAgIGZ1bmN0aW9uIGdldExvY2FsU3RyZWFtcygpIHtcbiAgICAgIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgPSB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zIHx8IHt9O1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMpXG4gICAgICAgIC5tYXAoc3RyZWFtSWQgPT4gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW1JZF1bMF0pO1xuICAgIH07XG5cbiAgY29uc3Qgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayA9XG4gICAgZnVuY3Rpb24gYWRkVHJhY2sodHJhY2ssIHN0cmVhbSkge1xuICAgICAgaWYgKCFzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG5cbiAgICAgIGNvbnN0IHNlbmRlciA9IG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKCF0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF0pIHtcbiAgICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdID0gW3N0cmVhbSwgc2VuZGVyXTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdLmluZGV4T2Yoc2VuZGVyKSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdLnB1c2goc2VuZGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZW5kZXI7XG4gICAgfTtcblxuICBjb25zdCBvcmlnQWRkU3RyZWFtID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW07XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24gYWRkU3RyZWFtKHN0cmVhbSkge1xuICAgIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgPSB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zIHx8IHt9O1xuXG4gICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgY29uc3QgYWxyZWFkeUV4aXN0cyA9IHRoaXMuZ2V0U2VuZGVycygpLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUcmFjayBhbHJlYWR5IGV4aXN0cy4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGV4aXN0aW5nU2VuZGVycyA9IHRoaXMuZ2V0U2VuZGVycygpO1xuICAgIG9yaWdBZGRTdHJlYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBjb25zdCBuZXdTZW5kZXJzID0gdGhpcy5nZXRTZW5kZXJzKClcbiAgICAgIC5maWx0ZXIobmV3U2VuZGVyID0+IGV4aXN0aW5nU2VuZGVycy5pbmRleE9mKG5ld1NlbmRlcikgPT09IC0xKTtcbiAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF0gPSBbc3RyZWFtXS5jb25jYXQobmV3U2VuZGVycyk7XG4gIH07XG5cbiAgY29uc3Qgb3JpZ1JlbW92ZVN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG4gICAgICBkZWxldGUgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdO1xuICAgICAgcmV0dXJuIG9yaWdSZW1vdmVTdHJlYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gIGNvbnN0IG9yaWdSZW1vdmVUcmFjayA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2s7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2sgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHNlbmRlcikge1xuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG4gICAgICBpZiAoc2VuZGVyKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMpLmZvckVhY2goc3RyZWFtSWQgPT4ge1xuICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtSWRdLmluZGV4T2Yoc2VuZGVyKTtcbiAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW1JZF0uc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbUlkXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbUlkXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdSZW1vdmVUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQWRkVHJhY2tSZW1vdmVUcmFjayh3aW5kb3cpIHtcbiAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG4gIC8vIHNoaW0gYWRkVHJhY2sgYW5kIHJlbW92ZVRyYWNrLlxuICBpZiAod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayAmJlxuICAgICAgYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA2NSkge1xuICAgIHJldHVybiBzaGltQWRkVHJhY2tSZW1vdmVUcmFja1dpdGhOYXRpdmUod2luZG93KTtcbiAgfVxuXG4gIC8vIGFsc28gc2hpbSBwYy5nZXRMb2NhbFN0cmVhbXMgd2hlbiBhZGRUcmFjayBpcyBzaGltbWVkXG4gIC8vIHRvIHJldHVybiB0aGUgb3JpZ2luYWwgc3RyZWFtcy5cbiAgY29uc3Qgb3JpZ0dldExvY2FsU3RyZWFtcyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVcbiAgICAgIC5nZXRMb2NhbFN0cmVhbXM7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zID1cbiAgICBmdW5jdGlvbiBnZXRMb2NhbFN0cmVhbXMoKSB7XG4gICAgICBjb25zdCBuYXRpdmVTdHJlYW1zID0gb3JpZ0dldExvY2FsU3RyZWFtcy5hcHBseSh0aGlzKTtcbiAgICAgIHRoaXMuX3JldmVyc2VTdHJlYW1zID0gdGhpcy5fcmV2ZXJzZVN0cmVhbXMgfHwge307XG4gICAgICByZXR1cm4gbmF0aXZlU3RyZWFtcy5tYXAoc3RyZWFtID0+IHRoaXMuX3JldmVyc2VTdHJlYW1zW3N0cmVhbS5pZF0pO1xuICAgIH07XG5cbiAgY29uc3Qgb3JpZ0FkZFN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbSA9IGZ1bmN0aW9uIGFkZFN0cmVhbShzdHJlYW0pIHtcbiAgICB0aGlzLl9zdHJlYW1zID0gdGhpcy5fc3RyZWFtcyB8fCB7fTtcbiAgICB0aGlzLl9yZXZlcnNlU3RyZWFtcyA9IHRoaXMuX3JldmVyc2VTdHJlYW1zIHx8IHt9O1xuXG4gICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgY29uc3QgYWxyZWFkeUV4aXN0cyA9IHRoaXMuZ2V0U2VuZGVycygpLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUcmFjayBhbHJlYWR5IGV4aXN0cy4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFkZCBpZGVudGl0eSBtYXBwaW5nIGZvciBjb25zaXN0ZW5jeSB3aXRoIGFkZFRyYWNrLlxuICAgIC8vIFVubGVzcyB0aGlzIGlzIGJlaW5nIHVzZWQgd2l0aCBhIHN0cmVhbSBmcm9tIGFkZFRyYWNrLlxuICAgIGlmICghdGhpcy5fcmV2ZXJzZVN0cmVhbXNbc3RyZWFtLmlkXSkge1xuICAgICAgY29uc3QgbmV3U3RyZWFtID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbShzdHJlYW0uZ2V0VHJhY2tzKCkpO1xuICAgICAgdGhpcy5fc3RyZWFtc1tzdHJlYW0uaWRdID0gbmV3U3RyZWFtO1xuICAgICAgdGhpcy5fcmV2ZXJzZVN0cmVhbXNbbmV3U3RyZWFtLmlkXSA9IHN0cmVhbTtcbiAgICAgIHN0cmVhbSA9IG5ld1N0cmVhbTtcbiAgICB9XG4gICAgb3JpZ0FkZFN0cmVhbS5hcHBseSh0aGlzLCBbc3RyZWFtXSk7XG4gIH07XG5cbiAgY29uc3Qgb3JpZ1JlbW92ZVN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgdGhpcy5fc3RyZWFtcyA9IHRoaXMuX3N0cmVhbXMgfHwge307XG4gICAgICB0aGlzLl9yZXZlcnNlU3RyZWFtcyA9IHRoaXMuX3JldmVyc2VTdHJlYW1zIHx8IHt9O1xuXG4gICAgICBvcmlnUmVtb3ZlU3RyZWFtLmFwcGx5KHRoaXMsIFsodGhpcy5fc3RyZWFtc1tzdHJlYW0uaWRdIHx8IHN0cmVhbSldKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9yZXZlcnNlU3RyZWFtc1sodGhpcy5fc3RyZWFtc1tzdHJlYW0uaWRdID9cbiAgICAgICAgICB0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF0uaWQgOiBzdHJlYW0uaWQpXTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF07XG4gICAgfTtcblxuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID1cbiAgICBmdW5jdGlvbiBhZGRUcmFjayh0cmFjaywgc3RyZWFtKSB7XG4gICAgICBpZiAodGhpcy5zaWduYWxpbmdTdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgICAnVGhlIFJUQ1BlZXJDb25uZWN0aW9uXFwncyBzaWduYWxpbmdTdGF0ZSBpcyBcXCdjbG9zZWRcXCcuJyxcbiAgICAgICAgICAnSW52YWxpZFN0YXRlRXJyb3InKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0cmVhbXMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICBpZiAoc3RyZWFtcy5sZW5ndGggIT09IDEgfHxcbiAgICAgICAgICAhc3RyZWFtc1swXS5nZXRUcmFja3MoKS5maW5kKHQgPT4gdCA9PT0gdHJhY2spKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IGZ1bGx5IGNvcnJlY3QgYnV0IGFsbCB3ZSBjYW4gbWFuYWdlIHdpdGhvdXRcbiAgICAgICAgLy8gW1thc3NvY2lhdGVkIE1lZGlhU3RyZWFtc11dIGludGVybmFsIHNsb3QuXG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICAgJ1RoZSBhZGFwdGVyLmpzIGFkZFRyYWNrIHBvbHlmaWxsIG9ubHkgc3VwcG9ydHMgYSBzaW5nbGUgJyArXG4gICAgICAgICAgJyBzdHJlYW0gd2hpY2ggaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQgdHJhY2suJyxcbiAgICAgICAgICAnTm90U3VwcG9ydGVkRXJyb3InKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWxyZWFkeUV4aXN0cyA9IHRoaXMuZ2V0U2VuZGVycygpLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUcmFjayBhbHJlYWR5IGV4aXN0cy4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdHJlYW1zID0gdGhpcy5fc3RyZWFtcyB8fCB7fTtcbiAgICAgIHRoaXMuX3JldmVyc2VTdHJlYW1zID0gdGhpcy5fcmV2ZXJzZVN0cmVhbXMgfHwge307XG4gICAgICBjb25zdCBvbGRTdHJlYW0gPSB0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF07XG4gICAgICBpZiAob2xkU3RyZWFtKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgdXNpbmcgb2RkIENocm9tZSBiZWhhdmlvdXIsIHVzZSB3aXRoIGNhdXRpb246XG4gICAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD03ODE1XG4gICAgICAgIC8vIE5vdGU6IHdlIHJlbHkgb24gdGhlIGhpZ2gtbGV2ZWwgYWRkVHJhY2svZHRtZiBzaGltIHRvXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgc2VuZGVyIHdpdGggYSBkdG1mIHNlbmRlci5cbiAgICAgICAgb2xkU3RyZWFtLmFkZFRyYWNrKHRyYWNrKTtcblxuICAgICAgICAvLyBUcmlnZ2VyIE9OTiBhc3luYy5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnbmVnb3RpYXRpb25uZWVkZWQnKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbmV3U3RyZWFtID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbShbdHJhY2tdKTtcbiAgICAgICAgdGhpcy5fc3RyZWFtc1tzdHJlYW0uaWRdID0gbmV3U3RyZWFtO1xuICAgICAgICB0aGlzLl9yZXZlcnNlU3RyZWFtc1tuZXdTdHJlYW0uaWRdID0gc3RyZWFtO1xuICAgICAgICB0aGlzLmFkZFN0cmVhbShuZXdTdHJlYW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VuZGVycygpLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgfTtcblxuICAvLyByZXBsYWNlIHRoZSBpbnRlcm5hbCBzdHJlYW0gaWQgd2l0aCB0aGUgZXh0ZXJuYWwgb25lIGFuZFxuICAvLyB2aWNlIHZlcnNhLlxuICBmdW5jdGlvbiByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZChwYywgZGVzY3JpcHRpb24pIHtcbiAgICBsZXQgc2RwID0gZGVzY3JpcHRpb24uc2RwO1xuICAgIE9iamVjdC5rZXlzKHBjLl9yZXZlcnNlU3RyZWFtcyB8fCBbXSkuZm9yRWFjaChpbnRlcm5hbElkID0+IHtcbiAgICAgIGNvbnN0IGV4dGVybmFsU3RyZWFtID0gcGMuX3JldmVyc2VTdHJlYW1zW2ludGVybmFsSWRdO1xuICAgICAgY29uc3QgaW50ZXJuYWxTdHJlYW0gPSBwYy5fc3RyZWFtc1tleHRlcm5hbFN0cmVhbS5pZF07XG4gICAgICBzZHAgPSBzZHAucmVwbGFjZShuZXcgUmVnRXhwKGludGVybmFsU3RyZWFtLmlkLCAnZycpLFxuICAgICAgICAgIGV4dGVybmFsU3RyZWFtLmlkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7XG4gICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlLFxuICAgICAgc2RwXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVwbGFjZUV4dGVybmFsU3RyZWFtSWQocGMsIGRlc2NyaXB0aW9uKSB7XG4gICAgbGV0IHNkcCA9IGRlc2NyaXB0aW9uLnNkcDtcbiAgICBPYmplY3Qua2V5cyhwYy5fcmV2ZXJzZVN0cmVhbXMgfHwgW10pLmZvckVhY2goaW50ZXJuYWxJZCA9PiB7XG4gICAgICBjb25zdCBleHRlcm5hbFN0cmVhbSA9IHBjLl9yZXZlcnNlU3RyZWFtc1tpbnRlcm5hbElkXTtcbiAgICAgIGNvbnN0IGludGVybmFsU3RyZWFtID0gcGMuX3N0cmVhbXNbZXh0ZXJuYWxTdHJlYW0uaWRdO1xuICAgICAgc2RwID0gc2RwLnJlcGxhY2UobmV3IFJlZ0V4cChleHRlcm5hbFN0cmVhbS5pZCwgJ2cnKSxcbiAgICAgICAgICBpbnRlcm5hbFN0cmVhbS5pZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe1xuICAgICAgdHlwZTogZGVzY3JpcHRpb24udHlwZSxcbiAgICAgIHNkcFxuICAgIH0pO1xuICB9XG4gIFsnY3JlYXRlT2ZmZXInLCAnY3JlYXRlQW5zd2VyJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICBjb25zdCBuYXRpdmVNZXRob2QgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgY29uc3QgbWV0aG9kT2JqID0ge1ttZXRob2RdKCkge1xuICAgICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGNvbnN0IGlzTGVnYWN5Q2FsbCA9IGFyZ3VtZW50cy5sZW5ndGggJiZcbiAgICAgICAgICB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKGlzTGVnYWN5Q2FsbCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgICAoZGVzY3JpcHRpb24pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlc2MgPSByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZCh0aGlzLCBkZXNjcmlwdGlvbik7XG4gICAgICAgICAgICBhcmdzWzBdLmFwcGx5KG51bGwsIFtkZXNjXSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXJnc1sxXSkge1xuICAgICAgICAgICAgICBhcmdzWzFdLmFwcGx5KG51bGwsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgYXJndW1lbnRzWzJdXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAudGhlbihkZXNjcmlwdGlvbiA9PiByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZCh0aGlzLCBkZXNjcmlwdGlvbikpO1xuICAgIH19O1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IG1ldGhvZE9ialttZXRob2RdO1xuICB9KTtcblxuICBjb25zdCBvcmlnU2V0TG9jYWxEZXNjcmlwdGlvbiA9XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb247XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbiA9XG4gICAgZnVuY3Rpb24gc2V0TG9jYWxEZXNjcmlwdGlvbigpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCB8fCAhYXJndW1lbnRzWzBdLnR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdTZXRMb2NhbERlc2NyaXB0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBhcmd1bWVudHNbMF0gPSByZXBsYWNlRXh0ZXJuYWxTdHJlYW1JZCh0aGlzLCBhcmd1bWVudHNbMF0pO1xuICAgICAgcmV0dXJuIG9yaWdTZXRMb2NhbERlc2NyaXB0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAvLyBUT0RPOiBtYW5nbGUgZ2V0U3RhdHM6IGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtc3RhdHMvI2RvbS1ydGNtZWRpYXN0cmVhbXN0YXRzLXN0cmVhbWlkZW50aWZpZXJcblxuICBjb25zdCBvcmlnTG9jYWxEZXNjcmlwdGlvbiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAnbG9jYWxEZXNjcmlwdGlvbicpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSxcbiAgICAgICdsb2NhbERlc2NyaXB0aW9uJywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBvcmlnTG9jYWxEZXNjcmlwdGlvbi5nZXQuYXBwbHkodGhpcyk7XG4gICAgICAgICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZCh0aGlzLCBkZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2sgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHNlbmRlcikge1xuICAgICAgaWYgKHRoaXMuc2lnbmFsaW5nU3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICAgJ1RoZSBSVENQZWVyQ29ubmVjdGlvblxcJ3Mgc2lnbmFsaW5nU3RhdGUgaXMgXFwnY2xvc2VkXFwnLicsXG4gICAgICAgICAgJ0ludmFsaWRTdGF0ZUVycm9yJyk7XG4gICAgICB9XG4gICAgICAvLyBXZSBjYW4gbm90IHlldCBjaGVjayBmb3Igc2VuZGVyIGluc3RhbmNlb2YgUlRDUnRwU2VuZGVyXG4gICAgICAvLyBzaW5jZSB3ZSBzaGltIFJUUFNlbmRlci4gU28gd2UgY2hlY2sgaWYgc2VuZGVyLl9wYyBpcyBzZXQuXG4gICAgICBpZiAoIXNlbmRlci5fcGMpIHtcbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignQXJndW1lbnQgMSBvZiBSVENQZWVyQ29ubmVjdGlvbi5yZW1vdmVUcmFjayAnICtcbiAgICAgICAgICAgICdkb2VzIG5vdCBpbXBsZW1lbnQgaW50ZXJmYWNlIFJUQ1J0cFNlbmRlci4nLCAnVHlwZUVycm9yJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBpc0xvY2FsID0gc2VuZGVyLl9wYyA9PT0gdGhpcztcbiAgICAgIGlmICghaXNMb2NhbCkge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdTZW5kZXIgd2FzIG5vdCBjcmVhdGVkIGJ5IHRoaXMgY29ubmVjdGlvbi4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWFyY2ggZm9yIHRoZSBuYXRpdmUgc3RyZWFtIHRoZSBzZW5kZXJzIHRyYWNrIGJlbG9uZ3MgdG8uXG4gICAgICB0aGlzLl9zdHJlYW1zID0gdGhpcy5fc3RyZWFtcyB8fCB7fTtcbiAgICAgIGxldCBzdHJlYW07XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLl9zdHJlYW1zKS5mb3JFYWNoKHN0cmVhbWlkID0+IHtcbiAgICAgICAgY29uc3QgaGFzVHJhY2sgPSB0aGlzLl9zdHJlYW1zW3N0cmVhbWlkXS5nZXRUcmFja3MoKVxuICAgICAgICAgIC5maW5kKHRyYWNrID0+IHNlbmRlci50cmFjayA9PT0gdHJhY2spO1xuICAgICAgICBpZiAoaGFzVHJhY2spIHtcbiAgICAgICAgICBzdHJlYW0gPSB0aGlzLl9zdHJlYW1zW3N0cmVhbWlkXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgaWYgKHN0cmVhbS5nZXRUcmFja3MoKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIHRoZSBsYXN0IHRyYWNrIG9mIHRoZSBzdHJlYW0sIHJlbW92ZSB0aGUgc3RyZWFtLiBUaGlzXG4gICAgICAgICAgLy8gdGFrZXMgY2FyZSBvZiBhbnkgc2hpbW1lZCBfc2VuZGVycy5cbiAgICAgICAgICB0aGlzLnJlbW92ZVN0cmVhbSh0aGlzLl9yZXZlcnNlU3RyZWFtc1tzdHJlYW0uaWRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZWx5aW5nIG9uIHRoZSBzYW1lIG9kZCBjaHJvbWUgYmVoYXZpb3VyIGFzIGFib3ZlLlxuICAgICAgICAgIHN0cmVhbS5yZW1vdmVUcmFjayhzZW5kZXIudHJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ25lZ290aWF0aW9ubmVlZGVkJykpO1xuICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUGVlckNvbm5lY3Rpb24od2luZG93KSB7XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuXG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmIHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbikge1xuICAgIC8vIHZlcnkgYmFzaWMgc3VwcG9ydCBmb3Igb2xkIHZlcnNpb25zLlxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9IHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbjtcbiAgfVxuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFkZEljZUNhbmRpZGF0ZU51bGxTdXBwb3J0ZWQgPVxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlLmxlbmd0aCA9PT0gMDtcblxuICAvLyBzaGltIGltcGxpY2l0IGNyZWF0aW9uIG9mIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbi9SVENJY2VDYW5kaWRhdGVcbiAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA1Mykge1xuICAgIFsnc2V0TG9jYWxEZXNjcmlwdGlvbicsICdzZXRSZW1vdGVEZXNjcmlwdGlvbicsICdhZGRJY2VDYW5kaWRhdGUnXVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgICBjb25zdCBuYXRpdmVNZXRob2QgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgICAgICAgY29uc3QgbWV0aG9kT2JqID0ge1ttZXRob2RdKCkge1xuICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gbmV3ICgobWV0aG9kID09PSAnYWRkSWNlQ2FuZGlkYXRlJykgP1xuICAgICAgICAgICAgICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgOlxuICAgICAgICAgICAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pKGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfX07XG4gICAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gbWV0aG9kT2JqW21ldGhvZF07XG4gICAgICAgIH0pO1xuICB9XG5cbiAgLy8gc3VwcG9ydCBmb3IgYWRkSWNlQ2FuZGlkYXRlKG51bGwgb3IgdW5kZWZpbmVkKVxuICBjb25zdCBuYXRpdmVBZGRJY2VDYW5kaWRhdGUgPVxuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID1cbiAgICBmdW5jdGlvbiBhZGRJY2VDYW5kaWRhdGUoKSB7XG4gICAgICBpZiAoIWFkZEljZUNhbmRpZGF0ZU51bGxTdXBwb3J0ZWQgJiYgIWFyZ3VtZW50c1swXSkge1xuICAgICAgICBpZiAoYXJndW1lbnRzWzFdKSB7XG4gICAgICAgICAgYXJndW1lbnRzWzFdLmFwcGx5KG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICAgIC8vIEZpcmVmb3ggNjgrIGVtaXRzIGFuZCBwcm9jZXNzZXMge2NhbmRpZGF0ZTogXCJcIiwgLi4ufSwgaWdub3JlXG4gICAgICAvLyBpbiBvbGRlciB2ZXJzaW9ucy4gTmF0aXZlIHN1cHBvcnQgcGxhbm5lZCBmb3IgQ2hyb21lIE03Ny5cbiAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNzggJiZcbiAgICAgICAgYXJndW1lbnRzWzBdICYmIGFyZ3VtZW50c1swXS5jYW5kaWRhdGUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVBZGRJY2VDYW5kaWRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vLyBBdHRlbXB0IHRvIGZpeCBPTk4gaW4gcGxhbi1iIG1vZGUuXG5leHBvcnQgZnVuY3Rpb24gZml4TmVnb3RpYXRpb25OZWVkZWQod2luZG93KSB7XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICduZWdvdGlhdGlvbm5lZWRlZCcsIGUgPT4ge1xuICAgIGNvbnN0IHBjID0gZS50YXJnZXQ7XG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA3MiB8fCAocGMuZ2V0Q29uZmlndXJhdGlvbiAmJlxuICAgICAgICBwYy5nZXRDb25maWd1cmF0aW9uKCkuc2RwU2VtYW50aWNzID09PSAncGxhbi1iJykpIHtcbiAgICAgIGlmIChwYy5zaWduYWxpbmdTdGF0ZSAhPT0gJ3N0YWJsZScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZTtcbiAgfSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY2hyb21lL2Nocm9tZV9zaGltLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzUyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5jb25zdCBsb2dnaW5nID0gdXRpbHMubG9nO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpIHtcbiAgY29uc3QgbmF2aWdhdG9yID0gd2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3I7XG5cbiAgaWYgKCFuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG5cbiAgY29uc3QgY29uc3RyYWludHNUb0Nocm9tZV8gPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKHR5cGVvZiBjICE9PSAnb2JqZWN0JyB8fCBjLm1hbmRhdG9yeSB8fCBjLm9wdGlvbmFsKSB7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgY29uc3QgY2MgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhjKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoa2V5ID09PSAncmVxdWlyZScgfHwga2V5ID09PSAnYWR2YW5jZWQnIHx8IGtleSA9PT0gJ21lZGlhU291cmNlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCByID0gKHR5cGVvZiBjW2tleV0gPT09ICdvYmplY3QnKSA/IGNba2V5XSA6IHtpZGVhbDogY1trZXldfTtcbiAgICAgIGlmIChyLmV4YWN0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHIuZXhhY3QgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHIubWluID0gci5tYXggPSByLmV4YWN0O1xuICAgICAgfVxuICAgICAgY29uc3Qgb2xkbmFtZV8gPSBmdW5jdGlvbihwcmVmaXgsIG5hbWUpIHtcbiAgICAgICAgaWYgKHByZWZpeCkge1xuICAgICAgICAgIHJldHVybiBwcmVmaXggKyBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG5hbWUgPT09ICdkZXZpY2VJZCcpID8gJ3NvdXJjZUlkJyA6IG5hbWU7XG4gICAgICB9O1xuICAgICAgaWYgKHIuaWRlYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYy5vcHRpb25hbCA9IGNjLm9wdGlvbmFsIHx8IFtdO1xuICAgICAgICBsZXQgb2MgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiByLmlkZWFsID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG9jW29sZG5hbWVfKCdtaW4nLCBrZXkpXSA9IHIuaWRlYWw7XG4gICAgICAgICAgY2Mub3B0aW9uYWwucHVzaChvYyk7XG4gICAgICAgICAgb2MgPSB7fTtcbiAgICAgICAgICBvY1tvbGRuYW1lXygnbWF4Jywga2V5KV0gPSByLmlkZWFsO1xuICAgICAgICAgIGNjLm9wdGlvbmFsLnB1c2gob2MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9jW29sZG5hbWVfKCcnLCBrZXkpXSA9IHIuaWRlYWw7XG4gICAgICAgICAgY2Mub3B0aW9uYWwucHVzaChvYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyLmV4YWN0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHIuZXhhY3QgIT09ICdudW1iZXInKSB7XG4gICAgICAgIGNjLm1hbmRhdG9yeSA9IGNjLm1hbmRhdG9yeSB8fCB7fTtcbiAgICAgICAgY2MubWFuZGF0b3J5W29sZG5hbWVfKCcnLCBrZXkpXSA9IHIuZXhhY3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBbJ21pbicsICdtYXgnXS5mb3JFYWNoKG1peCA9PiB7XG4gICAgICAgICAgaWYgKHJbbWl4XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYy5tYW5kYXRvcnkgPSBjYy5tYW5kYXRvcnkgfHwge307XG4gICAgICAgICAgICBjYy5tYW5kYXRvcnlbb2xkbmFtZV8obWl4LCBrZXkpXSA9IHJbbWl4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChjLmFkdmFuY2VkKSB7XG4gICAgICBjYy5vcHRpb25hbCA9IChjYy5vcHRpb25hbCB8fCBbXSkuY29uY2F0KGMuYWR2YW5jZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY2M7XG4gIH07XG5cbiAgY29uc3Qgc2hpbUNvbnN0cmFpbnRzXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBmdW5jKSB7XG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPj0gNjEpIHtcbiAgICAgIHJldHVybiBmdW5jKGNvbnN0cmFpbnRzKTtcbiAgICB9XG4gICAgY29uc3RyYWludHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7XG4gICAgaWYgKGNvbnN0cmFpbnRzICYmIHR5cGVvZiBjb25zdHJhaW50cy5hdWRpbyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNvbnN0IHJlbWFwID0gZnVuY3Rpb24ob2JqLCBhLCBiKSB7XG4gICAgICAgIGlmIChhIGluIG9iaiAmJiAhKGIgaW4gb2JqKSkge1xuICAgICAgICAgIG9ialtiXSA9IG9ialthXTtcbiAgICAgICAgICBkZWxldGUgb2JqW2FdO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3RyYWludHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7XG4gICAgICByZW1hcChjb25zdHJhaW50cy5hdWRpbywgJ2F1dG9HYWluQ29udHJvbCcsICdnb29nQXV0b0dhaW5Db250cm9sJyk7XG4gICAgICByZW1hcChjb25zdHJhaW50cy5hdWRpbywgJ25vaXNlU3VwcHJlc3Npb24nLCAnZ29vZ05vaXNlU3VwcHJlc3Npb24nKTtcbiAgICAgIGNvbnN0cmFpbnRzLmF1ZGlvID0gY29uc3RyYWludHNUb0Nocm9tZV8oY29uc3RyYWludHMuYXVkaW8pO1xuICAgIH1cbiAgICBpZiAoY29uc3RyYWludHMgJiYgdHlwZW9mIGNvbnN0cmFpbnRzLnZpZGVvID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gU2hpbSBmYWNpbmdNb2RlIGZvciBtb2JpbGUgJiBzdXJmYWNlIHByby5cbiAgICAgIGxldCBmYWNlID0gY29uc3RyYWludHMudmlkZW8uZmFjaW5nTW9kZTtcbiAgICAgIGZhY2UgPSBmYWNlICYmICgodHlwZW9mIGZhY2UgPT09ICdvYmplY3QnKSA/IGZhY2UgOiB7aWRlYWw6IGZhY2V9KTtcbiAgICAgIGNvbnN0IGdldFN1cHBvcnRlZEZhY2luZ01vZGVMaWVzID0gYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDY2O1xuXG4gICAgICBpZiAoKGZhY2UgJiYgKGZhY2UuZXhhY3QgPT09ICd1c2VyJyB8fCBmYWNlLmV4YWN0ID09PSAnZW52aXJvbm1lbnQnIHx8XG4gICAgICAgICAgICAgICAgICAgIGZhY2UuaWRlYWwgPT09ICd1c2VyJyB8fCBmYWNlLmlkZWFsID09PSAnZW52aXJvbm1lbnQnKSkgJiZcbiAgICAgICAgICAhKG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMgJiZcbiAgICAgICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMoKS5mYWNpbmdNb2RlICYmXG4gICAgICAgICAgICAhZ2V0U3VwcG9ydGVkRmFjaW5nTW9kZUxpZXMpKSB7XG4gICAgICAgIGRlbGV0ZSBjb25zdHJhaW50cy52aWRlby5mYWNpbmdNb2RlO1xuICAgICAgICBsZXQgbWF0Y2hlcztcbiAgICAgICAgaWYgKGZhY2UuZXhhY3QgPT09ICdlbnZpcm9ubWVudCcgfHwgZmFjZS5pZGVhbCA9PT0gJ2Vudmlyb25tZW50Jykge1xuICAgICAgICAgIG1hdGNoZXMgPSBbJ2JhY2snLCAncmVhciddO1xuICAgICAgICB9IGVsc2UgaWYgKGZhY2UuZXhhY3QgPT09ICd1c2VyJyB8fCBmYWNlLmlkZWFsID09PSAndXNlcicpIHtcbiAgICAgICAgICBtYXRjaGVzID0gWydmcm9udCddO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgLy8gTG9vayBmb3IgbWF0Y2hlcyBpbiBsYWJlbCwgb3IgdXNlIGxhc3QgY2FtIGZvciBiYWNrICh0eXBpY2FsKS5cbiAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKClcbiAgICAgICAgICAudGhlbihkZXZpY2VzID0+IHtcbiAgICAgICAgICAgIGRldmljZXMgPSBkZXZpY2VzLmZpbHRlcihkID0+IGQua2luZCA9PT0gJ3ZpZGVvaW5wdXQnKTtcbiAgICAgICAgICAgIGxldCBkZXYgPSBkZXZpY2VzLmZpbmQoZCA9PiBtYXRjaGVzLnNvbWUobWF0Y2ggPT5cbiAgICAgICAgICAgICAgZC5sYWJlbC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG1hdGNoKSkpO1xuICAgICAgICAgICAgaWYgKCFkZXYgJiYgZGV2aWNlcy5sZW5ndGggJiYgbWF0Y2hlcy5pbmNsdWRlcygnYmFjaycpKSB7XG4gICAgICAgICAgICAgIGRldiA9IGRldmljZXNbZGV2aWNlcy5sZW5ndGggLSAxXTsgLy8gbW9yZSBsaWtlbHkgdGhlIGJhY2sgY2FtXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGV2KSB7XG4gICAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLmRldmljZUlkID0gZmFjZS5leGFjdCA/IHtleGFjdDogZGV2LmRldmljZUlkfSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZGVhbDogZGV2LmRldmljZUlkfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvID0gY29uc3RyYWludHNUb0Nocm9tZV8oY29uc3RyYWludHMudmlkZW8pO1xuICAgICAgICAgICAgbG9nZ2luZygnY2hyb21lOiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jKGNvbnN0cmFpbnRzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3RyYWludHMudmlkZW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjb25zdHJhaW50cy52aWRlbyk7XG4gICAgfVxuICAgIGxvZ2dpbmcoJ2Nocm9tZTogJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7XG4gICAgcmV0dXJuIGZ1bmMoY29uc3RyYWludHMpO1xuICB9O1xuXG4gIGNvbnN0IHNoaW1FcnJvcl8gPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPj0gNjQpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZToge1xuICAgICAgICBQZXJtaXNzaW9uRGVuaWVkRXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InLFxuICAgICAgICBQZXJtaXNzaW9uRGlzbWlzc2VkRXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InLFxuICAgICAgICBJbnZhbGlkU3RhdGVFcnJvcjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIERldmljZXNOb3RGb3VuZEVycm9yOiAnTm90Rm91bmRFcnJvcicsXG4gICAgICAgIENvbnN0cmFpbnROb3RTYXRpc2ZpZWRFcnJvcjogJ092ZXJjb25zdHJhaW5lZEVycm9yJyxcbiAgICAgICAgVHJhY2tTdGFydEVycm9yOiAnTm90UmVhZGFibGVFcnJvcicsXG4gICAgICAgIE1lZGlhRGV2aWNlRmFpbGVkRHVlVG9TaHV0ZG93bjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIE1lZGlhRGV2aWNlS2lsbFN3aXRjaE9uOiAnTm90QWxsb3dlZEVycm9yJyxcbiAgICAgICAgVGFiQ2FwdHVyZUVycm9yOiAnQWJvcnRFcnJvcicsXG4gICAgICAgIFNjcmVlbkNhcHR1cmVFcnJvcjogJ0Fib3J0RXJyb3InLFxuICAgICAgICBEZXZpY2VDYXB0dXJlRXJyb3I6ICdBYm9ydEVycm9yJ1xuICAgICAgfVtlLm5hbWVdIHx8IGUubmFtZSxcbiAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgIGNvbnN0cmFpbnQ6IGUuY29uc3RyYWludCB8fCBlLmNvbnN0cmFpbnROYW1lLFxuICAgICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyAodGhpcy5tZXNzYWdlICYmICc6ICcpICsgdGhpcy5tZXNzYWdlO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgY29uc3QgZ2V0VXNlck1lZGlhXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcbiAgICBzaGltQ29uc3RyYWludHNfKGNvbnN0cmFpbnRzLCBjID0+IHtcbiAgICAgIG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEoYywgb25TdWNjZXNzLCBlID0+IHtcbiAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICBvbkVycm9yKHNoaW1FcnJvcl8oZSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IGdldFVzZXJNZWRpYV8uYmluZChuYXZpZ2F0b3IpO1xuXG4gIC8vIEV2ZW4gdGhvdWdoIENocm9tZSA0NSBoYXMgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyBhbmQgYSBnZXRVc2VyTWVkaWFcbiAgLy8gZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIFByb21pc2UsIGl0IGRvZXMgbm90IGFjY2VwdCBzcGVjLXN0eWxlXG4gIC8vIGNvbnN0cmFpbnRzLlxuICBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHtcbiAgICBjb25zdCBvcmlnR2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuXG4gICAgICAgIGJpbmQobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyk7XG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjcykge1xuICAgICAgcmV0dXJuIHNoaW1Db25zdHJhaW50c18oY3MsIGMgPT4gb3JpZ0dldFVzZXJNZWRpYShjKS50aGVuKHN0cmVhbSA9PiB7XG4gICAgICAgIGlmIChjLmF1ZGlvICYmICFzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGggfHxcbiAgICAgICAgICAgIGMudmlkZW8gJiYgIXN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCkge1xuICAgICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCcnLCAnTm90Rm91bmRFcnJvcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LCBlID0+IFByb21pc2UucmVqZWN0KHNoaW1FcnJvcl8oZSkpKSk7XG4gICAgfTtcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2Nocm9tZS9nZXR1c2VybWVkaWEuanNcbi8vIG1vZHVsZSBpZCA9IDEzNTNcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIGFkYXB0ZXIuanMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldERpc3BsYXlNZWRpYSh3aW5kb3csIGdldFNvdXJjZUlkKSB7XG4gIGlmICh3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJlxuICAgICdnZXREaXNwbGF5TWVkaWEnIGluIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBnZXRTb3VyY2VJZCBpcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIHdpdGhcbiAgLy8gdGhlIHNvdXJjZUlkIG9mIHRoZSBzY3JlZW4vd2luZG93L3RhYiB0byBiZSBzaGFyZWQuXG4gIGlmICh0eXBlb2YgZ2V0U291cmNlSWQgIT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKCdzaGltR2V0RGlzcGxheU1lZGlhOiBnZXRTb3VyY2VJZCBhcmd1bWVudCBpcyBub3QgJyArXG4gICAgICAgICdhIGZ1bmN0aW9uJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldERpc3BsYXlNZWRpYSA9XG4gICAgZnVuY3Rpb24gZ2V0RGlzcGxheU1lZGlhKGNvbnN0cmFpbnRzKSB7XG4gICAgICByZXR1cm4gZ2V0U291cmNlSWQoY29uc3RyYWludHMpXG4gICAgICAgIC50aGVuKHNvdXJjZUlkID0+IHtcbiAgICAgICAgICBjb25zdCB3aWR0aFNwZWNpZmllZCA9IGNvbnN0cmFpbnRzLnZpZGVvICYmIGNvbnN0cmFpbnRzLnZpZGVvLndpZHRoO1xuICAgICAgICAgIGNvbnN0IGhlaWdodFNwZWNpZmllZCA9IGNvbnN0cmFpbnRzLnZpZGVvICYmXG4gICAgICAgICAgICBjb25zdHJhaW50cy52aWRlby5oZWlnaHQ7XG4gICAgICAgICAgY29uc3QgZnJhbWVSYXRlU3BlY2lmaWVkID0gY29uc3RyYWludHMudmlkZW8gJiZcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLmZyYW1lUmF0ZTtcbiAgICAgICAgICBjb25zdHJhaW50cy52aWRlbyA9IHtcbiAgICAgICAgICAgIG1hbmRhdG9yeToge1xuICAgICAgICAgICAgICBjaHJvbWVNZWRpYVNvdXJjZTogJ2Rlc2t0b3AnLFxuICAgICAgICAgICAgICBjaHJvbWVNZWRpYVNvdXJjZUlkOiBzb3VyY2VJZCxcbiAgICAgICAgICAgICAgbWF4RnJhbWVSYXRlOiBmcmFtZVJhdGVTcGVjaWZpZWQgfHwgM1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKHdpZHRoU3BlY2lmaWVkKSB7XG4gICAgICAgICAgICBjb25zdHJhaW50cy52aWRlby5tYW5kYXRvcnkubWF4V2lkdGggPSB3aWR0aFNwZWNpZmllZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhlaWdodFNwZWNpZmllZCkge1xuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8ubWFuZGF0b3J5Lm1heEhlaWdodCA9IGhlaWdodFNwZWNpZmllZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cyk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY2hyb21lL2dldGRpc3BsYXltZWRpYS5qc1xuLy8gbW9kdWxlIGlkID0gMTM1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQge2ZpbHRlckljZVNlcnZlcnN9IGZyb20gJy4vZmlsdGVyaWNlc2VydmVycyc7XG5pbXBvcnQgc2hpbVJUQ1BlZXJDb25uZWN0aW9uIGZyb20gJ3J0Y3BlZXJjb25uZWN0aW9uLXNoaW0nO1xuXG5leHBvcnQge3NoaW1HZXRVc2VyTWVkaWF9IGZyb20gJy4vZ2V0dXNlcm1lZGlhJztcbmV4cG9ydCB7c2hpbUdldERpc3BsYXlNZWRpYX0gZnJvbSAnLi9nZXRkaXNwbGF5bWVkaWEnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVBlZXJDb25uZWN0aW9uKHdpbmRvdykge1xuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICBpZiAod2luZG93LlJUQ0ljZUdhdGhlcmVyKSB7XG4gICAgaWYgKCF3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlKSB7XG4gICAgICB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24gUlRDSWNlQ2FuZGlkYXRlKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIXdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pIHtcbiAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24gPSBmdW5jdGlvbiBSVENTZXNzaW9uRGVzY3JpcHRpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIHRoaXMgYWRkcyBhbiBhZGRpdGlvbmFsIGV2ZW50IGxpc3RlbmVyIHRvIE1lZGlhU3RyYWNrVHJhY2sgdGhhdCBzaWduYWxzXG4gICAgLy8gd2hlbiBhIHRyYWNrcyBlbmFibGVkIHByb3BlcnR5IHdhcyBjaGFuZ2VkLiBXb3JrYXJvdW5kIGZvciBhIGJ1ZyBpblxuICAgIC8vIGFkZFN0cmVhbSwgc2VlIGJlbG93LiBObyBsb25nZXIgcmVxdWlyZWQgaW4gMTUwMjUrXG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCAxNTAyNSkge1xuICAgICAgY29uc3Qgb3JpZ01TVEVuYWJsZWQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgICAgIHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZSwgJ2VuYWJsZWQnKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUsICdlbmFibGVkJywge1xuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICBvcmlnTVNURW5hYmxlZC5zZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgY29uc3QgZXYgPSBuZXcgRXZlbnQoJ2VuYWJsZWQnKTtcbiAgICAgICAgICBldi5lbmFibGVkID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gT1JUQyBkZWZpbmVzIHRoZSBEVE1GIHNlbmRlciBhIGJpdCBkaWZmZXJlbnQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93M2Mvb3J0Yy9pc3N1ZXMvNzE0XG4gIGlmICh3aW5kb3cuUlRDUnRwU2VuZGVyICYmICEoJ2R0bWYnIGluIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSwgJ2R0bWYnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kdG1mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy50cmFjay5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICB0aGlzLl9kdG1mID0gbmV3IHdpbmRvdy5SVENEdG1mU2VuZGVyKHRoaXMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFjay5raW5kID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICB0aGlzLl9kdG1mID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2R0bWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLy8gRWRnZSBjdXJyZW50bHkgb25seSBpbXBsZW1lbnRzIHRoZSBSVENEdG1mU2VuZGVyLCBub3QgdGhlXG4gIC8vIFJUQ0RUTUZTZW5kZXIgYWxpYXMuIFNlZSBodHRwOi8vZHJhZnQub3J0Yy5vcmcvI3J0Y2R0bWZzZW5kZXIyKlxuICBpZiAod2luZG93LlJUQ0R0bWZTZW5kZXIgJiYgIXdpbmRvdy5SVENEVE1GU2VuZGVyKSB7XG4gICAgd2luZG93LlJUQ0RUTUZTZW5kZXIgPSB3aW5kb3cuUlRDRHRtZlNlbmRlcjtcbiAgfVxuXG4gIGNvbnN0IFJUQ1BlZXJDb25uZWN0aW9uU2hpbSA9IHNoaW1SVENQZWVyQ29ubmVjdGlvbih3aW5kb3csXG4gICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uKTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gZnVuY3Rpb24gUlRDUGVlckNvbm5lY3Rpb24oY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuaWNlU2VydmVycykge1xuICAgICAgY29uZmlnLmljZVNlcnZlcnMgPSBmaWx0ZXJJY2VTZXJ2ZXJzKGNvbmZpZy5pY2VTZXJ2ZXJzLFxuICAgICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uKTtcbiAgICAgIHV0aWxzLmxvZygnSUNFIHNlcnZlcnMgYWZ0ZXIgZmlsdGVyaW5nOicsIGNvbmZpZy5pY2VTZXJ2ZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSVENQZWVyQ29ubmVjdGlvblNoaW0oY29uZmlnKTtcbiAgfTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSA9IFJUQ1BlZXJDb25uZWN0aW9uU2hpbS5wcm90b3R5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUmVwbGFjZVRyYWNrKHdpbmRvdykge1xuICAvLyBPUlRDIGhhcyByZXBsYWNlVHJhY2sgLS0gaHR0cHM6Ly9naXRodWIuY29tL3czYy9vcnRjL2lzc3Vlcy82MTRcbiAgaWYgKHdpbmRvdy5SVENSdHBTZW5kZXIgJiZcbiAgICAgICEoJ3JlcGxhY2VUcmFjaycgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpKSB7XG4gICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUucmVwbGFjZVRyYWNrID1cbiAgICAgICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuc2V0VHJhY2s7XG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2VkZ2Vfc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gMTM1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxOCBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG4vLyBFZGdlIGRvZXMgbm90IGxpa2Vcbi8vIDEpIHN0dW46IGZpbHRlcmVkIGFmdGVyIDE0MzkzIHVubGVzcyA/dHJhbnNwb3J0PXVkcCBpcyBwcmVzZW50XG4vLyAyKSB0dXJuOiB0aGF0IGRvZXMgbm90IGhhdmUgYWxsIG9mIHR1cm46aG9zdDpwb3J0P3RyYW5zcG9ydD11ZHBcbi8vIDMpIHR1cm46IHdpdGggaXB2NiBhZGRyZXNzZXNcbi8vIDQpIHR1cm46IG9jY3VycmluZyBtdWxpcGxlIHRpbWVzXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVySWNlU2VydmVycyhpY2VTZXJ2ZXJzLCBlZGdlVmVyc2lvbikge1xuICBsZXQgaGFzVHVybiA9IGZhbHNlO1xuICBpY2VTZXJ2ZXJzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpY2VTZXJ2ZXJzKSk7XG4gIHJldHVybiBpY2VTZXJ2ZXJzLmZpbHRlcihzZXJ2ZXIgPT4ge1xuICAgIGlmIChzZXJ2ZXIgJiYgKHNlcnZlci51cmxzIHx8IHNlcnZlci51cmwpKSB7XG4gICAgICBsZXQgdXJscyA9IHNlcnZlci51cmxzIHx8IHNlcnZlci51cmw7XG4gICAgICBpZiAoc2VydmVyLnVybCAmJiAhc2VydmVyLnVybHMpIHtcbiAgICAgICAgdXRpbHMuZGVwcmVjYXRlZCgnUlRDSWNlU2VydmVyLnVybCcsICdSVENJY2VTZXJ2ZXIudXJscycpO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNTdHJpbmcgPSB0eXBlb2YgdXJscyA9PT0gJ3N0cmluZyc7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdXJscyA9IFt1cmxzXTtcbiAgICAgIH1cbiAgICAgIHVybHMgPSB1cmxzLmZpbHRlcih1cmwgPT4ge1xuICAgICAgICAvLyBmaWx0ZXIgU1RVTiB1bmNvbmRpdGlvbmFsbHkuXG4gICAgICAgIGlmICh1cmwuaW5kZXhPZignc3R1bjonKSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhbGlkVHVybiA9IHVybC5zdGFydHNXaXRoKCd0dXJuJykgJiZcbiAgICAgICAgICAgICF1cmwuc3RhcnRzV2l0aCgndHVybjpbJykgJiZcbiAgICAgICAgICAgIHVybC5pbmNsdWRlcygndHJhbnNwb3J0PXVkcCcpO1xuICAgICAgICBpZiAodmFsaWRUdXJuICYmICFoYXNUdXJuKSB7XG4gICAgICAgICAgaGFzVHVybiA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbGlkVHVybiAmJiAhaGFzVHVybjtcbiAgICAgIH0pO1xuXG4gICAgICBkZWxldGUgc2VydmVyLnVybDtcbiAgICAgIHNlcnZlci51cmxzID0gaXNTdHJpbmcgPyB1cmxzWzBdIDogdXJscztcbiAgICAgIHJldHVybiAhIXVybHMubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9maWx0ZXJpY2VzZXJ2ZXJzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzU2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuIC8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU0RQVXRpbHMgPSByZXF1aXJlKCdzZHAnKTtcblxuZnVuY3Rpb24gZml4U3RhdHNUeXBlKHN0YXQpIHtcbiAgcmV0dXJuIHtcbiAgICBpbmJvdW5kcnRwOiAnaW5ib3VuZC1ydHAnLFxuICAgIG91dGJvdW5kcnRwOiAnb3V0Ym91bmQtcnRwJyxcbiAgICBjYW5kaWRhdGVwYWlyOiAnY2FuZGlkYXRlLXBhaXInLFxuICAgIGxvY2FsY2FuZGlkYXRlOiAnbG9jYWwtY2FuZGlkYXRlJyxcbiAgICByZW1vdGVjYW5kaWRhdGU6ICdyZW1vdGUtY2FuZGlkYXRlJ1xuICB9W3N0YXQudHlwZV0gfHwgc3RhdC50eXBlO1xufVxuXG5mdW5jdGlvbiB3cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwgY2FwcywgdHlwZSwgc3RyZWFtLCBkdGxzUm9sZSkge1xuICB2YXIgc2RwID0gU0RQVXRpbHMud3JpdGVSdHBEZXNjcmlwdGlvbih0cmFuc2NlaXZlci5raW5kLCBjYXBzKTtcblxuICAvLyBNYXAgSUNFIHBhcmFtZXRlcnMgKHVmcmFnLCBwd2QpIHRvIFNEUC5cbiAgc2RwICs9IFNEUFV0aWxzLndyaXRlSWNlUGFyYW1ldGVycyhcbiAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLmdldExvY2FsUGFyYW1ldGVycygpKTtcblxuICAvLyBNYXAgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC5cbiAgc2RwICs9IFNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMoXG4gICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LmdldExvY2FsUGFyYW1ldGVycygpLFxuICAgICAgdHlwZSA9PT0gJ29mZmVyJyA/ICdhY3RwYXNzJyA6IGR0bHNSb2xlIHx8ICdhY3RpdmUnKTtcblxuICBzZHAgKz0gJ2E9bWlkOicgKyB0cmFuc2NlaXZlci5taWQgKyAnXFxyXFxuJztcblxuICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyICYmIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7XG4gICAgc2RwICs9ICdhPXNlbmRyZWN2XFxyXFxuJztcbiAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICBzZHAgKz0gJ2E9c2VuZG9ubHlcXHJcXG4nO1xuICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7XG4gICAgc2RwICs9ICdhPXJlY3Zvbmx5XFxyXFxuJztcbiAgfSBlbHNlIHtcbiAgICBzZHAgKz0gJ2E9aW5hY3RpdmVcXHJcXG4nO1xuICB9XG5cbiAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgIHZhciB0cmFja0lkID0gdHJhbnNjZWl2ZXIucnRwU2VuZGVyLl9pbml0aWFsVHJhY2tJZCB8fFxuICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIudHJhY2suaWQ7XG4gICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLl9pbml0aWFsVHJhY2tJZCA9IHRyYWNrSWQ7XG4gICAgLy8gc3BlYy5cbiAgICB2YXIgbXNpZCA9ICdtc2lkOicgKyAoc3RyZWFtID8gc3RyZWFtLmlkIDogJy0nKSArICcgJyArXG4gICAgICAgIHRyYWNrSWQgKyAnXFxyXFxuJztcbiAgICBzZHAgKz0gJ2E9JyArIG1zaWQ7XG4gICAgLy8gZm9yIENocm9tZS4gTGVnYWN5IHNob3VsZCBubyBsb25nZXIgYmUgcmVxdWlyZWQuXG4gICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArXG4gICAgICAgICcgJyArIG1zaWQ7XG5cbiAgICAvLyBSVFhcbiAgICBpZiAodHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjICtcbiAgICAgICAgICAnICcgKyBtc2lkO1xuICAgICAgc2RwICs9ICdhPXNzcmMtZ3JvdXA6RklEICcgK1xuICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArICcgJyArXG4gICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYyArXG4gICAgICAgICAgJ1xcclxcbic7XG4gICAgfVxuICB9XG4gIC8vIEZJWE1FOiB0aGlzIHNob3VsZCBiZSB3cml0dGVuIGJ5IHdyaXRlUnRwRGVzY3JpcHRpb24uXG4gIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgK1xuICAgICAgJyBjbmFtZTonICsgU0RQVXRpbHMubG9jYWxDTmFtZSArICdcXHJcXG4nO1xuICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyICYmIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMgK1xuICAgICAgICAnIGNuYW1lOicgKyBTRFBVdGlscy5sb2NhbENOYW1lICsgJ1xcclxcbic7XG4gIH1cbiAgcmV0dXJuIHNkcDtcbn1cblxuLy8gRWRnZSBkb2VzIG5vdCBsaWtlXG4vLyAxKSBzdHVuOiBmaWx0ZXJlZCBhZnRlciAxNDM5MyB1bmxlc3MgP3RyYW5zcG9ydD11ZHAgaXMgcHJlc2VudFxuLy8gMikgdHVybjogdGhhdCBkb2VzIG5vdCBoYXZlIGFsbCBvZiB0dXJuOmhvc3Q6cG9ydD90cmFuc3BvcnQ9dWRwXG4vLyAzKSB0dXJuOiB3aXRoIGlwdjYgYWRkcmVzc2VzXG4vLyA0KSB0dXJuOiBvY2N1cnJpbmcgbXVsaXBsZSB0aW1lc1xuZnVuY3Rpb24gZmlsdGVySWNlU2VydmVycyhpY2VTZXJ2ZXJzLCBlZGdlVmVyc2lvbikge1xuICB2YXIgaGFzVHVybiA9IGZhbHNlO1xuICBpY2VTZXJ2ZXJzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpY2VTZXJ2ZXJzKSk7XG4gIHJldHVybiBpY2VTZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbihzZXJ2ZXIpIHtcbiAgICBpZiAoc2VydmVyICYmIChzZXJ2ZXIudXJscyB8fCBzZXJ2ZXIudXJsKSkge1xuICAgICAgdmFyIHVybHMgPSBzZXJ2ZXIudXJscyB8fCBzZXJ2ZXIudXJsO1xuICAgICAgaWYgKHNlcnZlci51cmwgJiYgIXNlcnZlci51cmxzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignUlRDSWNlU2VydmVyLnVybCBpcyBkZXByZWNhdGVkISBVc2UgdXJscyBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgICAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIHVybHMgPT09ICdzdHJpbmcnO1xuICAgICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICAgIHVybHMgPSBbdXJsc107XG4gICAgICB9XG4gICAgICB1cmxzID0gdXJscy5maWx0ZXIoZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIHZhciB2YWxpZFR1cm4gPSB1cmwuaW5kZXhPZigndHVybjonKSA9PT0gMCAmJlxuICAgICAgICAgICAgdXJsLmluZGV4T2YoJ3RyYW5zcG9ydD11ZHAnKSAhPT0gLTEgJiZcbiAgICAgICAgICAgIHVybC5pbmRleE9mKCd0dXJuOlsnKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICFoYXNUdXJuO1xuXG4gICAgICAgIGlmICh2YWxpZFR1cm4pIHtcbiAgICAgICAgICBoYXNUdXJuID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsLmluZGV4T2YoJ3N0dW46JykgPT09IDAgJiYgZWRnZVZlcnNpb24gPj0gMTQzOTMgJiZcbiAgICAgICAgICAgIHVybC5pbmRleE9mKCc/dHJhbnNwb3J0PXVkcCcpID09PSAtMTtcbiAgICAgIH0pO1xuXG4gICAgICBkZWxldGUgc2VydmVyLnVybDtcbiAgICAgIHNlcnZlci51cmxzID0gaXNTdHJpbmcgPyB1cmxzWzBdIDogdXJscztcbiAgICAgIHJldHVybiAhIXVybHMubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIERldGVybWluZXMgdGhlIGludGVyc2VjdGlvbiBvZiBsb2NhbCBhbmQgcmVtb3RlIGNhcGFiaWxpdGllcy5cbmZ1bmN0aW9uIGdldENvbW1vbkNhcGFiaWxpdGllcyhsb2NhbENhcGFiaWxpdGllcywgcmVtb3RlQ2FwYWJpbGl0aWVzKSB7XG4gIHZhciBjb21tb25DYXBhYmlsaXRpZXMgPSB7XG4gICAgY29kZWNzOiBbXSxcbiAgICBoZWFkZXJFeHRlbnNpb25zOiBbXSxcbiAgICBmZWNNZWNoYW5pc21zOiBbXVxuICB9O1xuXG4gIHZhciBmaW5kQ29kZWNCeVBheWxvYWRUeXBlID0gZnVuY3Rpb24ocHQsIGNvZGVjcykge1xuICAgIHB0ID0gcGFyc2VJbnQocHQsIDEwKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVjcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGNvZGVjc1tpXS5wYXlsb2FkVHlwZSA9PT0gcHQgfHxcbiAgICAgICAgICBjb2RlY3NbaV0ucHJlZmVycmVkUGF5bG9hZFR5cGUgPT09IHB0KSB7XG4gICAgICAgIHJldHVybiBjb2RlY3NbaV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBydHhDYXBhYmlsaXR5TWF0Y2hlcyA9IGZ1bmN0aW9uKGxSdHgsIHJSdHgsIGxDb2RlY3MsIHJDb2RlY3MpIHtcbiAgICB2YXIgbENvZGVjID0gZmluZENvZGVjQnlQYXlsb2FkVHlwZShsUnR4LnBhcmFtZXRlcnMuYXB0LCBsQ29kZWNzKTtcbiAgICB2YXIgckNvZGVjID0gZmluZENvZGVjQnlQYXlsb2FkVHlwZShyUnR4LnBhcmFtZXRlcnMuYXB0LCByQ29kZWNzKTtcbiAgICByZXR1cm4gbENvZGVjICYmIHJDb2RlYyAmJlxuICAgICAgICBsQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpID09PSByQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9O1xuXG4gIGxvY2FsQ2FwYWJpbGl0aWVzLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGxDb2RlYykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJDb2RlYyA9IHJlbW90ZUNhcGFiaWxpdGllcy5jb2RlY3NbaV07XG4gICAgICBpZiAobENvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gckNvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSAmJlxuICAgICAgICAgIGxDb2RlYy5jbG9ja1JhdGUgPT09IHJDb2RlYy5jbG9ja1JhdGUpIHtcbiAgICAgICAgaWYgKGxDb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdydHgnICYmXG4gICAgICAgICAgICBsQ29kZWMucGFyYW1ldGVycyAmJiByQ29kZWMucGFyYW1ldGVycy5hcHQpIHtcbiAgICAgICAgICAvLyBmb3IgUlRYIHdlIG5lZWQgdG8gZmluZCB0aGUgbG9jYWwgcnR4IHRoYXQgaGFzIGEgYXB0XG4gICAgICAgICAgLy8gd2hpY2ggcG9pbnRzIHRvIHRoZSBzYW1lIGxvY2FsIGNvZGVjIGFzIHRoZSByZW1vdGUgb25lLlxuICAgICAgICAgIGlmICghcnR4Q2FwYWJpbGl0eU1hdGNoZXMobENvZGVjLCByQ29kZWMsXG4gICAgICAgICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzLmNvZGVjcywgcmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByQ29kZWMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJDb2RlYykpOyAvLyBkZWVwY29weVxuICAgICAgICAvLyBudW1iZXIgb2YgY2hhbm5lbHMgaXMgdGhlIGhpZ2hlc3QgY29tbW9uIG51bWJlciBvZiBjaGFubmVsc1xuICAgICAgICByQ29kZWMubnVtQ2hhbm5lbHMgPSBNYXRoLm1pbihsQ29kZWMubnVtQ2hhbm5lbHMsXG4gICAgICAgICAgICByQ29kZWMubnVtQ2hhbm5lbHMpO1xuICAgICAgICAvLyBwdXNoIHJDb2RlYyBzbyB3ZSByZXBseSB3aXRoIG9mZmVyZXIgcGF5bG9hZCB0eXBlXG4gICAgICAgIGNvbW1vbkNhcGFiaWxpdGllcy5jb2RlY3MucHVzaChyQ29kZWMpO1xuXG4gICAgICAgIC8vIGRldGVybWluZSBjb21tb24gZmVlZGJhY2sgbWVjaGFuaXNtc1xuICAgICAgICByQ29kZWMucnRjcEZlZWRiYWNrID0gckNvZGVjLnJ0Y3BGZWVkYmFjay5maWx0ZXIoZnVuY3Rpb24oZmIpIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxDb2RlYy5ydGNwRmVlZGJhY2subGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChsQ29kZWMucnRjcEZlZWRiYWNrW2pdLnR5cGUgPT09IGZiLnR5cGUgJiZcbiAgICAgICAgICAgICAgICBsQ29kZWMucnRjcEZlZWRiYWNrW2pdLnBhcmFtZXRlciA9PT0gZmIucGFyYW1ldGVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBGSVhNRTogYWxzbyBuZWVkIHRvIGRldGVybWluZSAucGFyYW1ldGVyc1xuICAgICAgICAvLyAgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVucGVlci9vcnRjL2lzc3Vlcy81NjlcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBsb2NhbENhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24obEhlYWRlckV4dGVuc2lvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtb3RlQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMubGVuZ3RoO1xuICAgICAgICAgaSsrKSB7XG4gICAgICB2YXIgckhlYWRlckV4dGVuc2lvbiA9IHJlbW90ZUNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zW2ldO1xuICAgICAgaWYgKGxIZWFkZXJFeHRlbnNpb24udXJpID09PSBySGVhZGVyRXh0ZW5zaW9uLnVyaSkge1xuICAgICAgICBjb21tb25DYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKHJIZWFkZXJFeHRlbnNpb24pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8vIEZJWE1FOiBmZWNNZWNoYW5pc21zXG4gIHJldHVybiBjb21tb25DYXBhYmlsaXRpZXM7XG59XG5cbi8vIGlzIGFjdGlvbj1zZXRMb2NhbERlc2NyaXB0aW9uIHdpdGggdHlwZSBhbGxvd2VkIGluIHNpZ25hbGluZ1N0YXRlXG5mdW5jdGlvbiBpc0FjdGlvbkFsbG93ZWRJblNpZ25hbGluZ1N0YXRlKGFjdGlvbiwgdHlwZSwgc2lnbmFsaW5nU3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBvZmZlcjoge1xuICAgICAgc2V0TG9jYWxEZXNjcmlwdGlvbjogWydzdGFibGUnLCAnaGF2ZS1sb2NhbC1vZmZlciddLFxuICAgICAgc2V0UmVtb3RlRGVzY3JpcHRpb246IFsnc3RhYmxlJywgJ2hhdmUtcmVtb3RlLW9mZmVyJ11cbiAgICB9LFxuICAgIGFuc3dlcjoge1xuICAgICAgc2V0TG9jYWxEZXNjcmlwdGlvbjogWydoYXZlLXJlbW90ZS1vZmZlcicsICdoYXZlLWxvY2FsLXByYW5zd2VyJ10sXG4gICAgICBzZXRSZW1vdGVEZXNjcmlwdGlvbjogWydoYXZlLWxvY2FsLW9mZmVyJywgJ2hhdmUtcmVtb3RlLXByYW5zd2VyJ11cbiAgICB9XG4gIH1bdHlwZV1bYWN0aW9uXS5pbmRleE9mKHNpZ25hbGluZ1N0YXRlKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIG1heWJlQWRkQ2FuZGlkYXRlKGljZVRyYW5zcG9ydCwgY2FuZGlkYXRlKSB7XG4gIC8vIEVkZ2UncyBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBhZGRzIHNvbWUgZmllbGRzIHRoZXJlZm9yZVxuICAvLyBub3QgYWxsIGZpZWxk0ZUgYXJlIHRha2VuIGludG8gYWNjb3VudC5cbiAgdmFyIGFscmVhZHlBZGRlZCA9IGljZVRyYW5zcG9ydC5nZXRSZW1vdGVDYW5kaWRhdGVzKClcbiAgICAgIC5maW5kKGZ1bmN0aW9uKHJlbW90ZUNhbmRpZGF0ZSkge1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlLmZvdW5kYXRpb24gPT09IHJlbW90ZUNhbmRpZGF0ZS5mb3VuZGF0aW9uICYmXG4gICAgICAgICAgICBjYW5kaWRhdGUuaXAgPT09IHJlbW90ZUNhbmRpZGF0ZS5pcCAmJlxuICAgICAgICAgICAgY2FuZGlkYXRlLnBvcnQgPT09IHJlbW90ZUNhbmRpZGF0ZS5wb3J0ICYmXG4gICAgICAgICAgICBjYW5kaWRhdGUucHJpb3JpdHkgPT09IHJlbW90ZUNhbmRpZGF0ZS5wcmlvcml0eSAmJlxuICAgICAgICAgICAgY2FuZGlkYXRlLnByb3RvY29sID09PSByZW1vdGVDYW5kaWRhdGUucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIGNhbmRpZGF0ZS50eXBlID09PSByZW1vdGVDYW5kaWRhdGUudHlwZTtcbiAgICAgIH0pO1xuICBpZiAoIWFscmVhZHlBZGRlZCkge1xuICAgIGljZVRyYW5zcG9ydC5hZGRSZW1vdGVDYW5kaWRhdGUoY2FuZGlkYXRlKTtcbiAgfVxuICByZXR1cm4gIWFscmVhZHlBZGRlZDtcbn1cblxuXG5mdW5jdGlvbiBtYWtlRXJyb3IobmFtZSwgZGVzY3JpcHRpb24pIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IoZGVzY3JpcHRpb24pO1xuICBlLm5hbWUgPSBuYW1lO1xuICAvLyBsZWdhY3kgZXJyb3IgY29kZXMgZnJvbSBodHRwczovL2hleWNhbS5naXRodWIuaW8vd2ViaWRsLyNpZGwtRE9NRXhjZXB0aW9uLWVycm9yLW5hbWVzXG4gIGUuY29kZSA9IHtcbiAgICBOb3RTdXBwb3J0ZWRFcnJvcjogOSxcbiAgICBJbnZhbGlkU3RhdGVFcnJvcjogMTEsXG4gICAgSW52YWxpZEFjY2Vzc0Vycm9yOiAxNSxcbiAgICBUeXBlRXJyb3I6IHVuZGVmaW5lZCxcbiAgICBPcGVyYXRpb25FcnJvcjogdW5kZWZpbmVkXG4gIH1bbmFtZV07XG4gIHJldHVybiBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHdpbmRvdywgZWRnZVZlcnNpb24pIHtcbiAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21lZGlhY2FwdHVyZS1tYWluLyNtZWRpYXN0cmVhbVxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gYWRkIHRoZSB0cmFjayB0byB0aGUgc3RyZWFtIGFuZFxuICAvLyBkaXNwYXRjaCB0aGUgZXZlbnQgb3Vyc2VsdmVzLlxuICBmdW5jdGlvbiBhZGRUcmFja1RvU3RyZWFtQW5kRmlyZUV2ZW50KHRyYWNrLCBzdHJlYW0pIHtcbiAgICBzdHJlYW0uYWRkVHJhY2sodHJhY2spO1xuICAgIHN0cmVhbS5kaXNwYXRjaEV2ZW50KG5ldyB3aW5kb3cuTWVkaWFTdHJlYW1UcmFja0V2ZW50KCdhZGR0cmFjaycsXG4gICAgICAgIHt0cmFjazogdHJhY2t9KSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVUcmFja0Zyb21TdHJlYW1BbmRGaXJlRXZlbnQodHJhY2ssIHN0cmVhbSkge1xuICAgIHN0cmVhbS5yZW1vdmVUcmFjayh0cmFjayk7XG4gICAgc3RyZWFtLmRpc3BhdGNoRXZlbnQobmV3IHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrRXZlbnQoJ3JlbW92ZXRyYWNrJyxcbiAgICAgICAge3RyYWNrOiB0cmFja30pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpcmVBZGRUcmFjayhwYywgdHJhY2ssIHJlY2VpdmVyLCBzdHJlYW1zKSB7XG4gICAgdmFyIHRyYWNrRXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7XG4gICAgdHJhY2tFdmVudC50cmFjayA9IHRyYWNrO1xuICAgIHRyYWNrRXZlbnQucmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICB0cmFja0V2ZW50LnRyYW5zY2VpdmVyID0ge3JlY2VpdmVyOiByZWNlaXZlcn07XG4gICAgdHJhY2tFdmVudC5zdHJlYW1zID0gc3RyZWFtcztcbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHBjLl9kaXNwYXRjaEV2ZW50KCd0cmFjaycsIHRyYWNrRXZlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIFJUQ1BlZXJDb25uZWN0aW9uID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgdmFyIHBjID0gdGhpcztcblxuICAgIHZhciBfZXZlbnRUYXJnZXQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCAnZGlzcGF0Y2hFdmVudCddXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgIHBjW21ldGhvZF0gPSBfZXZlbnRUYXJnZXRbbWV0aG9kXS5iaW5kKF9ldmVudFRhcmdldCk7XG4gICAgICAgIH0pO1xuXG4gICAgdGhpcy5jYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcyA9IG51bGw7XG5cbiAgICB0aGlzLm5lZWROZWdvdGlhdGlvbiA9IGZhbHNlO1xuXG4gICAgdGhpcy5sb2NhbFN0cmVhbXMgPSBbXTtcbiAgICB0aGlzLnJlbW90ZVN0cmVhbXMgPSBbXTtcblxuICAgIHRoaXMuX2xvY2FsRGVzY3JpcHRpb24gPSBudWxsO1xuICAgIHRoaXMuX3JlbW90ZURlc2NyaXB0aW9uID0gbnVsbDtcblxuICAgIHRoaXMuc2lnbmFsaW5nU3RhdGUgPSAnc3RhYmxlJztcbiAgICB0aGlzLmljZUNvbm5lY3Rpb25TdGF0ZSA9ICduZXcnO1xuICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gJ25ldyc7XG4gICAgdGhpcy5pY2VHYXRoZXJpbmdTdGF0ZSA9ICduZXcnO1xuXG4gICAgY29uZmlnID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb25maWcgfHwge30pKTtcblxuICAgIHRoaXMudXNpbmdCdW5kbGUgPSBjb25maWcuYnVuZGxlUG9saWN5ID09PSAnbWF4LWJ1bmRsZSc7XG4gICAgaWYgKGNvbmZpZy5ydGNwTXV4UG9saWN5ID09PSAnbmVnb3RpYXRlJykge1xuICAgICAgdGhyb3cobWFrZUVycm9yKCdOb3RTdXBwb3J0ZWRFcnJvcicsXG4gICAgICAgICAgJ3J0Y3BNdXhQb2xpY3kgXFwnbmVnb3RpYXRlXFwnIGlzIG5vdCBzdXBwb3J0ZWQnKSk7XG4gICAgfSBlbHNlIGlmICghY29uZmlnLnJ0Y3BNdXhQb2xpY3kpIHtcbiAgICAgIGNvbmZpZy5ydGNwTXV4UG9saWN5ID0gJ3JlcXVpcmUnO1xuICAgIH1cblxuICAgIHN3aXRjaCAoY29uZmlnLmljZVRyYW5zcG9ydFBvbGljeSkge1xuICAgICAgY2FzZSAnYWxsJzpcbiAgICAgIGNhc2UgJ3JlbGF5JzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25maWcuaWNlVHJhbnNwb3J0UG9saWN5ID0gJ2FsbCc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN3aXRjaCAoY29uZmlnLmJ1bmRsZVBvbGljeSkge1xuICAgICAgY2FzZSAnYmFsYW5jZWQnOlxuICAgICAgY2FzZSAnbWF4LWNvbXBhdCc6XG4gICAgICBjYXNlICdtYXgtYnVuZGxlJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25maWcuYnVuZGxlUG9saWN5ID0gJ2JhbGFuY2VkJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uZmlnLmljZVNlcnZlcnMgPSBmaWx0ZXJJY2VTZXJ2ZXJzKGNvbmZpZy5pY2VTZXJ2ZXJzIHx8IFtdLCBlZGdlVmVyc2lvbik7XG5cbiAgICB0aGlzLl9pY2VHYXRoZXJlcnMgPSBbXTtcbiAgICBpZiAoY29uZmlnLmljZUNhbmRpZGF0ZVBvb2xTaXplKSB7XG4gICAgICBmb3IgKHZhciBpID0gY29uZmlnLmljZUNhbmRpZGF0ZVBvb2xTaXplOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMuX2ljZUdhdGhlcmVycy5wdXNoKG5ldyB3aW5kb3cuUlRDSWNlR2F0aGVyZXIoe1xuICAgICAgICAgIGljZVNlcnZlcnM6IGNvbmZpZy5pY2VTZXJ2ZXJzLFxuICAgICAgICAgIGdhdGhlclBvbGljeTogY29uZmlnLmljZVRyYW5zcG9ydFBvbGljeVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZy5pY2VDYW5kaWRhdGVQb29sU2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuXG4gICAgLy8gcGVyLXRyYWNrIGljZUdhdGhlcnMsIGljZVRyYW5zcG9ydHMsIGR0bHNUcmFuc3BvcnRzLCBydHBTZW5kZXJzLCAuLi5cbiAgICAvLyBldmVyeXRoaW5nIHRoYXQgaXMgbmVlZGVkIHRvIGRlc2NyaWJlIGEgU0RQIG0tbGluZS5cbiAgICB0aGlzLnRyYW5zY2VpdmVycyA9IFtdO1xuXG4gICAgdGhpcy5fc2RwU2Vzc2lvbklkID0gU0RQVXRpbHMuZ2VuZXJhdGVTZXNzaW9uSWQoKTtcbiAgICB0aGlzLl9zZHBTZXNzaW9uVmVyc2lvbiA9IDA7XG5cbiAgICB0aGlzLl9kdGxzUm9sZSA9IHVuZGVmaW5lZDsgLy8gcm9sZSBmb3IgYT1zZXR1cCB0byB1c2UgaW4gYW5zd2Vycy5cblxuICAgIHRoaXMuX2lzQ2xvc2VkID0gZmFsc2U7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ2xvY2FsRGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9jYWxEZXNjcmlwdGlvbjtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAncmVtb3RlRGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVtb3RlRGVzY3JpcHRpb247XG4gICAgfVxuICB9KTtcblxuICAvLyBzZXQgdXAgZXZlbnQgaGFuZGxlcnMgb24gcHJvdG90eXBlXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmljZWNhbmRpZGF0ZSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmFkZHN0cmVhbSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbnRyYWNrID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9ucmVtb3Zlc3RyZWFtID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2UgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25jb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbm5lZ290aWF0aW9ubmVlZGVkID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uZGF0YWNoYW5uZWwgPSBudWxsO1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKG5hbWUsIGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuX2lzQ2xvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgaWYgKHR5cGVvZiB0aGlzWydvbicgKyBuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1snb24nICsgbmFtZV0oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2VtaXRHYXRoZXJpbmdTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UnKTtcbiAgICB0aGlzLl9kaXNwYXRjaEV2ZW50KCdpY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZScsIGV2ZW50KTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWc7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldExvY2FsU3RyZWFtcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsU3RyZWFtcztcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVtb3RlU3RyZWFtcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlbW90ZVN0cmVhbXM7XG4gIH07XG5cbiAgLy8gaW50ZXJuYWwgaGVscGVyIHRvIGNyZWF0ZSBhIHRyYW5zY2VpdmVyIG9iamVjdC5cbiAgLy8gKHdoaWNoIGlzIG5vdCB5ZXQgdGhlIHNhbWUgYXMgdGhlIFdlYlJUQyAxLjAgdHJhbnNjZWl2ZXIpXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fY3JlYXRlVHJhbnNjZWl2ZXIgPSBmdW5jdGlvbihraW5kLCBkb05vdEFkZCkge1xuICAgIHZhciBoYXNCdW5kbGVUcmFuc3BvcnQgPSB0aGlzLnRyYW5zY2VpdmVycy5sZW5ndGggPiAwO1xuICAgIHZhciB0cmFuc2NlaXZlciA9IHtcbiAgICAgIHRyYWNrOiBudWxsLFxuICAgICAgaWNlR2F0aGVyZXI6IG51bGwsXG4gICAgICBpY2VUcmFuc3BvcnQ6IG51bGwsXG4gICAgICBkdGxzVHJhbnNwb3J0OiBudWxsLFxuICAgICAgbG9jYWxDYXBhYmlsaXRpZXM6IG51bGwsXG4gICAgICByZW1vdGVDYXBhYmlsaXRpZXM6IG51bGwsXG4gICAgICBydHBTZW5kZXI6IG51bGwsXG4gICAgICBydHBSZWNlaXZlcjogbnVsbCxcbiAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICBtaWQ6IG51bGwsXG4gICAgICBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzOiBudWxsLFxuICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVyczogbnVsbCxcbiAgICAgIHN0cmVhbTogbnVsbCxcbiAgICAgIGFzc29jaWF0ZWRSZW1vdGVNZWRpYVN0cmVhbXM6IFtdLFxuICAgICAgd2FudFJlY2VpdmU6IHRydWVcbiAgICB9O1xuICAgIGlmICh0aGlzLnVzaW5nQnVuZGxlICYmIGhhc0J1bmRsZVRyYW5zcG9ydCkge1xuICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ID0gdGhpcy50cmFuc2NlaXZlcnNbMF0uaWNlVHJhbnNwb3J0O1xuICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCA9IHRoaXMudHJhbnNjZWl2ZXJzWzBdLmR0bHNUcmFuc3BvcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0cmFuc3BvcnRzID0gdGhpcy5fY3JlYXRlSWNlQW5kRHRsc1RyYW5zcG9ydHMoKTtcbiAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCA9IHRyYW5zcG9ydHMuaWNlVHJhbnNwb3J0O1xuICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCA9IHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydDtcbiAgICB9XG4gICAgaWYgKCFkb05vdEFkZCkge1xuICAgICAgdGhpcy50cmFuc2NlaXZlcnMucHVzaCh0cmFuc2NlaXZlcik7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2NlaXZlcjtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2sgPSBmdW5jdGlvbih0cmFjaywgc3RyZWFtKSB7XG4gICAgaWYgKHRoaXMuX2lzQ2xvc2VkKSB7XG4gICAgICB0aHJvdyBtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAnQXR0ZW1wdGVkIHRvIGNhbGwgYWRkVHJhY2sgb24gYSBjbG9zZWQgcGVlcmNvbm5lY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlFeGlzdHMgPSB0aGlzLnRyYW5zY2VpdmVycy5maW5kKGZ1bmN0aW9uKHMpIHtcbiAgICAgIHJldHVybiBzLnRyYWNrID09PSB0cmFjaztcbiAgICB9KTtcblxuICAgIGlmIChhbHJlYWR5RXhpc3RzKSB7XG4gICAgICB0aHJvdyBtYWtlRXJyb3IoJ0ludmFsaWRBY2Nlc3NFcnJvcicsICdUcmFjayBhbHJlYWR5IGV4aXN0cy4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNjZWl2ZXI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYW5zY2VpdmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCF0aGlzLnRyYW5zY2VpdmVyc1tpXS50cmFjayAmJlxuICAgICAgICAgIHRoaXMudHJhbnNjZWl2ZXJzW2ldLmtpbmQgPT09IHRyYWNrLmtpbmQpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIgPSB0aGlzLnRyYW5zY2VpdmVyc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0cmFuc2NlaXZlcikge1xuICAgICAgdHJhbnNjZWl2ZXIgPSB0aGlzLl9jcmVhdGVUcmFuc2NlaXZlcih0cmFjay5raW5kKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpO1xuXG4gICAgaWYgKHRoaXMubG9jYWxTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMubG9jYWxTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICB9XG5cbiAgICB0cmFuc2NlaXZlci50cmFjayA9IHRyYWNrO1xuICAgIHRyYW5zY2VpdmVyLnN0cmVhbSA9IHN0cmVhbTtcbiAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIgPSBuZXcgd2luZG93LlJUQ1J0cFNlbmRlcih0cmFjayxcbiAgICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCk7XG4gICAgcmV0dXJuIHRyYW5zY2VpdmVyLnJ0cFNlbmRlcjtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICBpZiAoZWRnZVZlcnNpb24gPj0gMTUwMjUpIHtcbiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XG4gICAgICAgIHBjLmFkZFRyYWNrKHRyYWNrLCBzdHJlYW0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENsb25lIGlzIG5lY2Vzc2FyeSBmb3IgbG9jYWwgZGVtb3MgbW9zdGx5LCBhdHRhY2hpbmcgZGlyZWN0bHlcbiAgICAgIC8vIHRvIHR3byBkaWZmZXJlbnQgc2VuZGVycyBkb2VzIG5vdCB3b3JrIChidWlsZCAxMDU0NykuXG4gICAgICAvLyBGaXhlZCBpbiAxNTAyNSAob3IgZWFybGllcilcbiAgICAgIHZhciBjbG9uZWRTdHJlYW0gPSBzdHJlYW0uY2xvbmUoKTtcbiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrLCBpZHgpIHtcbiAgICAgICAgdmFyIGNsb25lZFRyYWNrID0gY2xvbmVkU3RyZWFtLmdldFRyYWNrcygpW2lkeF07XG4gICAgICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2VuYWJsZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIGNsb25lZFRyYWNrLmVuYWJsZWQgPSBldmVudC5lbmFibGVkO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgY2xvbmVkU3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgcGMuYWRkVHJhY2sodHJhY2ssIGNsb25lZFN0cmVhbSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrID0gZnVuY3Rpb24oc2VuZGVyKSB7XG4gICAgaWYgKHRoaXMuX2lzQ2xvc2VkKSB7XG4gICAgICB0aHJvdyBtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAnQXR0ZW1wdGVkIHRvIGNhbGwgcmVtb3ZlVHJhY2sgb24gYSBjbG9zZWQgcGVlcmNvbm5lY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKCEoc2VuZGVyIGluc3RhbmNlb2Ygd2luZG93LlJUQ1J0cFNlbmRlcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IDEgb2YgUlRDUGVlckNvbm5lY3Rpb24ucmVtb3ZlVHJhY2sgJyArXG4gICAgICAgICAgJ2RvZXMgbm90IGltcGxlbWVudCBpbnRlcmZhY2UgUlRDUnRwU2VuZGVyLicpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2NlaXZlciA9IHRoaXMudHJhbnNjZWl2ZXJzLmZpbmQoZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQucnRwU2VuZGVyID09PSBzZW5kZXI7XG4gICAgfSk7XG5cbiAgICBpZiAoIXRyYW5zY2VpdmVyKSB7XG4gICAgICB0aHJvdyBtYWtlRXJyb3IoJ0ludmFsaWRBY2Nlc3NFcnJvcicsXG4gICAgICAgICAgJ1NlbmRlciB3YXMgbm90IGNyZWF0ZWQgYnkgdGhpcyBjb25uZWN0aW9uLicpO1xuICAgIH1cbiAgICB2YXIgc3RyZWFtID0gdHJhbnNjZWl2ZXIuc3RyZWFtO1xuXG4gICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLnN0b3AoKTtcbiAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIgPSBudWxsO1xuICAgIHRyYW5zY2VpdmVyLnRyYWNrID0gbnVsbDtcbiAgICB0cmFuc2NlaXZlci5zdHJlYW0gPSBudWxsO1xuXG4gICAgLy8gcmVtb3ZlIHRoZSBzdHJlYW0gZnJvbSB0aGUgc2V0IG9mIGxvY2FsIHN0cmVhbXNcbiAgICB2YXIgbG9jYWxTdHJlYW1zID0gdGhpcy50cmFuc2NlaXZlcnMubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiB0LnN0cmVhbTtcbiAgICB9KTtcbiAgICBpZiAobG9jYWxTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA9PT0gLTEgJiZcbiAgICAgICAgdGhpcy5sb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pID4gLTEpIHtcbiAgICAgIHRoaXMubG9jYWxTdHJlYW1zLnNwbGljZSh0aGlzLmxvY2FsU3RyZWFtcy5pbmRleE9mKHN0cmVhbSksIDEpO1xuICAgIH1cblxuICAgIHRoaXMuX21heWJlRmlyZU5lZ290aWF0aW9uTmVlZGVkKCk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcbiAgICAgIHZhciBzZW5kZXIgPSBwYy5nZXRTZW5kZXJzKCkuZmluZChmdW5jdGlvbihzKSB7XG4gICAgICAgIHJldHVybiBzLnRyYWNrID09PSB0cmFjaztcbiAgICAgIH0pO1xuICAgICAgaWYgKHNlbmRlcikge1xuICAgICAgICBwYy5yZW1vdmVUcmFjayhzZW5kZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNjZWl2ZXJzLmZpbHRlcihmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgcmV0dXJuICEhdHJhbnNjZWl2ZXIucnRwU2VuZGVyO1xuICAgIH0pXG4gICAgLm1hcChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLnJ0cFNlbmRlcjtcbiAgICB9KTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNjZWl2ZXJzLmZpbHRlcihmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgcmV0dXJuICEhdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICByZXR1cm4gdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgfSk7XG4gIH07XG5cblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2NyZWF0ZUljZUdhdGhlcmVyID0gZnVuY3Rpb24oc2RwTUxpbmVJbmRleCxcbiAgICAgIHVzaW5nQnVuZGxlKSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICBpZiAodXNpbmdCdW5kbGUgJiYgc2RwTUxpbmVJbmRleCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zY2VpdmVyc1swXS5pY2VHYXRoZXJlcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2ljZUdhdGhlcmVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pY2VHYXRoZXJlcnMuc2hpZnQoKTtcbiAgICB9XG4gICAgdmFyIGljZUdhdGhlcmVyID0gbmV3IHdpbmRvdy5SVENJY2VHYXRoZXJlcih7XG4gICAgICBpY2VTZXJ2ZXJzOiB0aGlzLl9jb25maWcuaWNlU2VydmVycyxcbiAgICAgIGdhdGhlclBvbGljeTogdGhpcy5fY29uZmlnLmljZVRyYW5zcG9ydFBvbGljeVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpY2VHYXRoZXJlciwgJ3N0YXRlJyxcbiAgICAgICAge3ZhbHVlOiAnbmV3Jywgd3JpdGFibGU6IHRydWV9XG4gICAgKTtcblxuICAgIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzID0gW107XG4gICAgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyQ2FuZGlkYXRlcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgZW5kID0gIWV2ZW50LmNhbmRpZGF0ZSB8fCBPYmplY3Qua2V5cyhldmVudC5jYW5kaWRhdGUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIC8vIHBvbHlmaWxsIHNpbmNlIFJUQ0ljZUdhdGhlcmVyLnN0YXRlIGlzIG5vdCBpbXBsZW1lbnRlZCBpblxuICAgICAgLy8gRWRnZSAxMDU0NyB5ZXQuXG4gICAgICBpY2VHYXRoZXJlci5zdGF0ZSA9IGVuZCA/ICdjb21wbGV0ZWQnIDogJ2dhdGhlcmluZyc7XG4gICAgICBpZiAocGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzICE9PSBudWxsKSB7XG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJlZENhbmRpZGF0ZUV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGljZUdhdGhlcmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvY2FsY2FuZGlkYXRlJyxcbiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlckNhbmRpZGF0ZXMpO1xuICAgIHJldHVybiBpY2VHYXRoZXJlcjtcbiAgfTtcblxuICAvLyBzdGFydCBnYXRoZXJpbmcgZnJvbSBhbiBSVENJY2VHYXRoZXJlci5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9nYXRoZXIgPSBmdW5jdGlvbihtaWQsIHNkcE1MaW5lSW5kZXgpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIHZhciBpY2VHYXRoZXJlciA9IHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZUdhdGhlcmVyO1xuICAgIGlmIChpY2VHYXRoZXJlci5vbmxvY2FsY2FuZGlkYXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBidWZmZXJlZENhbmRpZGF0ZUV2ZW50cyA9XG4gICAgICB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJlZENhbmRpZGF0ZUV2ZW50cztcbiAgICB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJlZENhbmRpZGF0ZUV2ZW50cyA9IG51bGw7XG4gICAgaWNlR2F0aGVyZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9jYWxjYW5kaWRhdGUnLFxuICAgICAgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyQ2FuZGlkYXRlcyk7XG4gICAgaWNlR2F0aGVyZXIub25sb2NhbGNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgaWYgKHBjLnVzaW5nQnVuZGxlICYmIHNkcE1MaW5lSW5kZXggPiAwKSB7XG4gICAgICAgIC8vIGlmIHdlIGtub3cgdGhhdCB3ZSB1c2UgYnVuZGxlIHdlIGNhbiBkcm9wIGNhbmRpZGF0ZXMgd2l0aFxuICAgICAgICAvLyDRlWRwTUxpbmVJbmRleCA+IDAuIElmIHdlIGRvbid0IGRvIHRoaXMgdGhlbiBvdXIgc3RhdGUgZ2V0c1xuICAgICAgICAvLyBjb25mdXNlZCBzaW5jZSB3ZSBkaXNwb3NlIHRoZSBleHRyYSBpY2UgZ2F0aGVyZXIuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnaWNlY2FuZGlkYXRlJyk7XG4gICAgICBldmVudC5jYW5kaWRhdGUgPSB7c2RwTWlkOiBtaWQsIHNkcE1MaW5lSW5kZXg6IHNkcE1MaW5lSW5kZXh9O1xuXG4gICAgICB2YXIgY2FuZCA9IGV2dC5jYW5kaWRhdGU7XG4gICAgICAvLyBFZGdlIGVtaXRzIGFuIGVtcHR5IG9iamVjdCBmb3IgUlRDSWNlQ2FuZGlkYXRlQ29tcGxldGXigKVcbiAgICAgIHZhciBlbmQgPSAhY2FuZCB8fCBPYmplY3Qua2V5cyhjYW5kKS5sZW5ndGggPT09IDA7XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIC8vIHBvbHlmaWxsIHNpbmNlIFJUQ0ljZUdhdGhlcmVyLnN0YXRlIGlzIG5vdCBpbXBsZW1lbnRlZCBpblxuICAgICAgICAvLyBFZGdlIDEwNTQ3IHlldC5cbiAgICAgICAgaWYgKGljZUdhdGhlcmVyLnN0YXRlID09PSAnbmV3JyB8fCBpY2VHYXRoZXJlci5zdGF0ZSA9PT0gJ2dhdGhlcmluZycpIHtcbiAgICAgICAgICBpY2VHYXRoZXJlci5zdGF0ZSA9ICdjb21wbGV0ZWQnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaWNlR2F0aGVyZXIuc3RhdGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgaWNlR2F0aGVyZXIuc3RhdGUgPSAnZ2F0aGVyaW5nJztcbiAgICAgICAgfVxuICAgICAgICAvLyBSVENJY2VDYW5kaWRhdGUgZG9lc24ndCBoYXZlIGEgY29tcG9uZW50LCBuZWVkcyB0byBiZSBhZGRlZFxuICAgICAgICBjYW5kLmNvbXBvbmVudCA9IDE7XG4gICAgICAgIC8vIGFsc28gdGhlIHVzZXJuYW1lRnJhZ21lbnQuIFRPRE86IHVwZGF0ZSBTRFAgdG8gdGFrZSBib3RoIHZhcmlhbnRzLlxuICAgICAgICBjYW5kLnVmcmFnID0gaWNlR2F0aGVyZXIuZ2V0TG9jYWxQYXJhbWV0ZXJzKCkudXNlcm5hbWVGcmFnbWVudDtcblxuICAgICAgICB2YXIgc2VyaWFsaXplZENhbmRpZGF0ZSA9IFNEUFV0aWxzLndyaXRlQ2FuZGlkYXRlKGNhbmQpO1xuICAgICAgICBldmVudC5jYW5kaWRhdGUgPSBPYmplY3QuYXNzaWduKGV2ZW50LmNhbmRpZGF0ZSxcbiAgICAgICAgICAgIFNEUFV0aWxzLnBhcnNlQ2FuZGlkYXRlKHNlcmlhbGl6ZWRDYW5kaWRhdGUpKTtcblxuICAgICAgICBldmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlID0gc2VyaWFsaXplZENhbmRpZGF0ZTtcbiAgICAgICAgZXZlbnQuY2FuZGlkYXRlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYW5kaWRhdGU6IGV2ZW50LmNhbmRpZGF0ZS5jYW5kaWRhdGUsXG4gICAgICAgICAgICBzZHBNaWQ6IGV2ZW50LmNhbmRpZGF0ZS5zZHBNaWQsXG4gICAgICAgICAgICBzZHBNTGluZUluZGV4OiBldmVudC5jYW5kaWRhdGUuc2RwTUxpbmVJbmRleCxcbiAgICAgICAgICAgIHVzZXJuYW1lRnJhZ21lbnQ6IGV2ZW50LmNhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gdXBkYXRlIGxvY2FsIGRlc2NyaXB0aW9uLlxuICAgICAgdmFyIHNlY3Rpb25zID0gU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyhwYy5fbG9jYWxEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgaWYgKCFlbmQpIHtcbiAgICAgICAgc2VjdGlvbnNbZXZlbnQuY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXhdICs9XG4gICAgICAgICAgICAnYT0nICsgZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSArICdcXHJcXG4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VjdGlvbnNbZXZlbnQuY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXhdICs9XG4gICAgICAgICAgICAnYT1lbmQtb2YtY2FuZGlkYXRlc1xcclxcbic7XG4gICAgICB9XG4gICAgICBwYy5fbG9jYWxEZXNjcmlwdGlvbi5zZHAgPVxuICAgICAgICAgIFNEUFV0aWxzLmdldERlc2NyaXB0aW9uKHBjLl9sb2NhbERlc2NyaXB0aW9uLnNkcCkgK1xuICAgICAgICAgIHNlY3Rpb25zLmpvaW4oJycpO1xuICAgICAgdmFyIGNvbXBsZXRlID0gcGMudHJhbnNjZWl2ZXJzLmV2ZXJ5KGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2NlaXZlci5pY2VHYXRoZXJlciAmJlxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuc3RhdGUgPT09ICdjb21wbGV0ZWQnO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChwYy5pY2VHYXRoZXJpbmdTdGF0ZSAhPT0gJ2dhdGhlcmluZycpIHtcbiAgICAgICAgcGMuaWNlR2F0aGVyaW5nU3RhdGUgPSAnZ2F0aGVyaW5nJztcbiAgICAgICAgcGMuX2VtaXRHYXRoZXJpbmdTdGF0ZUNoYW5nZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBFbWl0IGNhbmRpZGF0ZS4gQWxzbyBlbWl0IG51bGwgY2FuZGlkYXRlIHdoZW4gYWxsIGdhdGhlcmVycyBhcmVcbiAgICAgIC8vIGNvbXBsZXRlLlxuICAgICAgaWYgKCFlbmQpIHtcbiAgICAgICAgcGMuX2Rpc3BhdGNoRXZlbnQoJ2ljZWNhbmRpZGF0ZScsIGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wbGV0ZSkge1xuICAgICAgICBwYy5fZGlzcGF0Y2hFdmVudCgnaWNlY2FuZGlkYXRlJywgbmV3IEV2ZW50KCdpY2VjYW5kaWRhdGUnKSk7XG4gICAgICAgIHBjLmljZUdhdGhlcmluZ1N0YXRlID0gJ2NvbXBsZXRlJztcbiAgICAgICAgcGMuX2VtaXRHYXRoZXJpbmdTdGF0ZUNoYW5nZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBlbWl0IGFscmVhZHkgZ2F0aGVyZWQgY2FuZGlkYXRlcy5cbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICBpY2VHYXRoZXJlci5vbmxvY2FsY2FuZGlkYXRlKGUpO1xuICAgICAgfSk7XG4gICAgfSwgMCk7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIElDRSB0cmFuc3BvcnQgYW5kIERUTFMgdHJhbnNwb3J0LlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2NyZWF0ZUljZUFuZER0bHNUcmFuc3BvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICB2YXIgaWNlVHJhbnNwb3J0ID0gbmV3IHdpbmRvdy5SVENJY2VUcmFuc3BvcnQobnVsbCk7XG4gICAgaWNlVHJhbnNwb3J0Lm9uaWNlc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHBjLl91cGRhdGVJY2VDb25uZWN0aW9uU3RhdGUoKTtcbiAgICAgIHBjLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTtcbiAgICB9O1xuXG4gICAgdmFyIGR0bHNUcmFuc3BvcnQgPSBuZXcgd2luZG93LlJUQ0R0bHNUcmFuc3BvcnQoaWNlVHJhbnNwb3J0KTtcbiAgICBkdGxzVHJhbnNwb3J0Lm9uZHRsc3N0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICBwYy5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCk7XG4gICAgfTtcbiAgICBkdGxzVHJhbnNwb3J0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIG9uZXJyb3IgZG9lcyBub3Qgc2V0IHN0YXRlIHRvIGZhaWxlZCBieSBpdHNlbGYuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZHRsc1RyYW5zcG9ydCwgJ3N0YXRlJyxcbiAgICAgICAgICB7dmFsdWU6ICdmYWlsZWQnLCB3cml0YWJsZTogdHJ1ZX0pO1xuICAgICAgcGMuX3VwZGF0ZUNvbm5lY3Rpb25TdGF0ZSgpO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgaWNlVHJhbnNwb3J0OiBpY2VUcmFuc3BvcnQsXG4gICAgICBkdGxzVHJhbnNwb3J0OiBkdGxzVHJhbnNwb3J0XG4gICAgfTtcbiAgfTtcblxuICAvLyBEZXN0cm95IElDRSBnYXRoZXJlciwgSUNFIHRyYW5zcG9ydCBhbmQgRFRMUyB0cmFuc3BvcnQuXG4gIC8vIFdpdGhvdXQgdHJpZ2dlcmluZyB0aGUgY2FsbGJhY2tzLlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2Rpc3Bvc2VJY2VBbmREdGxzVHJhbnNwb3J0cyA9IGZ1bmN0aW9uKFxuICAgICAgc2RwTUxpbmVJbmRleCkge1xuICAgIHZhciBpY2VHYXRoZXJlciA9IHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZUdhdGhlcmVyO1xuICAgIGlmIChpY2VHYXRoZXJlcikge1xuICAgICAgZGVsZXRlIGljZUdhdGhlcmVyLm9ubG9jYWxjYW5kaWRhdGU7XG4gICAgICBkZWxldGUgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlR2F0aGVyZXI7XG4gICAgfVxuICAgIHZhciBpY2VUcmFuc3BvcnQgPSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5pY2VUcmFuc3BvcnQ7XG4gICAgaWYgKGljZVRyYW5zcG9ydCkge1xuICAgICAgZGVsZXRlIGljZVRyYW5zcG9ydC5vbmljZXN0YXRlY2hhbmdlO1xuICAgICAgZGVsZXRlIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZVRyYW5zcG9ydDtcbiAgICB9XG4gICAgdmFyIGR0bHNUcmFuc3BvcnQgPSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5kdGxzVHJhbnNwb3J0O1xuICAgIGlmIChkdGxzVHJhbnNwb3J0KSB7XG4gICAgICBkZWxldGUgZHRsc1RyYW5zcG9ydC5vbmR0bHNzdGF0ZWNoYW5nZTtcbiAgICAgIGRlbGV0ZSBkdGxzVHJhbnNwb3J0Lm9uZXJyb3I7XG4gICAgICBkZWxldGUgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uZHRsc1RyYW5zcG9ydDtcbiAgICB9XG4gIH07XG5cbiAgLy8gU3RhcnQgdGhlIFJUUCBTZW5kZXIgYW5kIFJlY2VpdmVyIGZvciBhIHRyYW5zY2VpdmVyLlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX3RyYW5zY2VpdmUgPSBmdW5jdGlvbih0cmFuc2NlaXZlcixcbiAgICAgIHNlbmQsIHJlY3YpIHtcbiAgICB2YXIgcGFyYW1zID0gZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzLFxuICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMpO1xuICAgIGlmIChzZW5kICYmIHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgICAgcGFyYW1zLmVuY29kaW5ncyA9IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICBwYXJhbXMucnRjcCA9IHtcbiAgICAgICAgY25hbWU6IFNEUFV0aWxzLmxvY2FsQ05hbWUsXG4gICAgICAgIGNvbXBvdW5kOiB0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycy5jb21wb3VuZFxuICAgICAgfTtcbiAgICAgIGlmICh0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCkge1xuICAgICAgICBwYXJhbXMucnRjcC5zc3JjID0gdHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjO1xuICAgICAgfVxuICAgICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLnNlbmQocGFyYW1zKTtcbiAgICB9XG4gICAgaWYgKHJlY3YgJiYgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIgJiYgcGFyYW1zLmNvZGVjcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyByZW1vdmUgUlRYIGZpZWxkIGluIEVkZ2UgMTQ5NDJcbiAgICAgIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAndmlkZW8nXG4gICAgICAgICAgJiYgdHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVyc1xuICAgICAgICAgICYmIGVkZ2VWZXJzaW9uIDwgMTUwMTkpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICBkZWxldGUgcC5ydHg7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHBhcmFtcy5lbmNvZGluZ3MgPSB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLmVuY29kaW5ncyA9IFt7fV07XG4gICAgICB9XG4gICAgICBwYXJhbXMucnRjcCA9IHtcbiAgICAgICAgY29tcG91bmQ6IHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzLmNvbXBvdW5kXG4gICAgICB9O1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzLmNuYW1lKSB7XG4gICAgICAgIHBhcmFtcy5ydGNwLmNuYW1lID0gdHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMuY25hbWU7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGgpIHtcbiAgICAgICAgcGFyYW1zLnJ0Y3Auc3NyYyA9IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYztcbiAgICAgIH1cbiAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnJlY2VpdmUocGFyYW1zKTtcbiAgICB9XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb24gPSBmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgIHZhciBwYyA9IHRoaXM7XG5cbiAgICAvLyBOb3RlOiBwcmFuc3dlciBpcyBub3Qgc3VwcG9ydGVkLlxuICAgIGlmIChbJ29mZmVyJywgJ2Fuc3dlciddLmluZGV4T2YoZGVzY3JpcHRpb24udHlwZSkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdUeXBlRXJyb3InLFxuICAgICAgICAgICdVbnN1cHBvcnRlZCB0eXBlIFwiJyArIGRlc2NyaXB0aW9uLnR5cGUgKyAnXCInKSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FjdGlvbkFsbG93ZWRJblNpZ25hbGluZ1N0YXRlKCdzZXRMb2NhbERlc2NyaXB0aW9uJyxcbiAgICAgICAgZGVzY3JpcHRpb24udHlwZSwgcGMuc2lnbmFsaW5nU3RhdGUpIHx8IHBjLl9pc0Nsb3NlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdDYW4gbm90IHNldCBsb2NhbCAnICsgZGVzY3JpcHRpb24udHlwZSArXG4gICAgICAgICAgJyBpbiBzdGF0ZSAnICsgcGMuc2lnbmFsaW5nU3RhdGUpKTtcbiAgICB9XG5cbiAgICB2YXIgc2VjdGlvbnM7XG4gICAgdmFyIHNlc3Npb25wYXJ0O1xuICAgIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInKSB7XG4gICAgICAvLyBWRVJZIGxpbWl0ZWQgc3VwcG9ydCBmb3IgU0RQIG11bmdpbmcuIExpbWl0ZWQgdG86XG4gICAgICAvLyAqIGNoYW5naW5nIHRoZSBvcmRlciBvZiBjb2RlY3NcbiAgICAgIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhkZXNjcmlwdGlvbi5zZHApO1xuICAgICAgc2Vzc2lvbnBhcnQgPSBzZWN0aW9ucy5zaGlmdCgpO1xuICAgICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgICAgdmFyIGNhcHMgPSBTRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmxvY2FsQ2FwYWJpbGl0aWVzID0gY2FwcztcbiAgICAgIH0pO1xuXG4gICAgICBwYy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlciwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgICBwYy5fZ2F0aGVyKHRyYW5zY2VpdmVyLm1pZCwgc2RwTUxpbmVJbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdhbnN3ZXInKSB7XG4gICAgICBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMocGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCk7XG4gICAgICBzZXNzaW9ucGFydCA9IHNlY3Rpb25zLnNoaWZ0KCk7XG4gICAgICB2YXIgaXNJY2VMaXRlID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoc2Vzc2lvbnBhcnQsXG4gICAgICAgICAgJ2E9aWNlLWxpdGUnKS5sZW5ndGggPiAwO1xuICAgICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgICAgdmFyIHRyYW5zY2VpdmVyID0gcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdO1xuICAgICAgICB2YXIgaWNlR2F0aGVyZXIgPSB0cmFuc2NlaXZlci5pY2VHYXRoZXJlcjtcbiAgICAgICAgdmFyIGljZVRyYW5zcG9ydCA9IHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydDtcbiAgICAgICAgdmFyIGR0bHNUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0O1xuICAgICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXMgPSB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcztcbiAgICAgICAgdmFyIHJlbW90ZUNhcGFiaWxpdGllcyA9IHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcztcblxuICAgICAgICAvLyB0cmVhdCBidW5kbGUtb25seSBhcyBub3QtcmVqZWN0ZWQuXG4gICAgICAgIHZhciByZWplY3RlZCA9IFNEUFV0aWxzLmlzUmVqZWN0ZWQobWVkaWFTZWN0aW9uKSAmJlxuICAgICAgICAgICAgU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1idW5kbGUtb25seScpLmxlbmd0aCA9PT0gMDtcblxuICAgICAgICBpZiAoIXJlamVjdGVkICYmICF0cmFuc2NlaXZlci5yZWplY3RlZCkge1xuICAgICAgICAgIHZhciByZW1vdGVJY2VQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyhcbiAgICAgICAgICAgICAgbWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCk7XG4gICAgICAgICAgdmFyIHJlbW90ZUR0bHNQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0RHRsc1BhcmFtZXRlcnMoXG4gICAgICAgICAgICAgIG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpO1xuICAgICAgICAgIGlmIChpc0ljZUxpdGUpIHtcbiAgICAgICAgICAgIHJlbW90ZUR0bHNQYXJhbWV0ZXJzLnJvbGUgPSAnc2VydmVyJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXBjLnVzaW5nQnVuZGxlIHx8IHNkcE1MaW5lSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHBjLl9nYXRoZXIodHJhbnNjZWl2ZXIubWlkLCBzZHBNTGluZUluZGV4KTtcbiAgICAgICAgICAgIGlmIChpY2VUcmFuc3BvcnQuc3RhdGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgICAgIGljZVRyYW5zcG9ydC5zdGFydChpY2VHYXRoZXJlciwgcmVtb3RlSWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIGlzSWNlTGl0ZSA/ICdjb250cm9sbGluZycgOiAnY29udHJvbGxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGR0bHNUcmFuc3BvcnQuc3RhdGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgICAgIGR0bHNUcmFuc3BvcnQuc3RhcnQocmVtb3RlRHRsc1BhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENhbGN1bGF0ZSBpbnRlcnNlY3Rpb24gb2YgY2FwYWJpbGl0aWVzLlxuICAgICAgICAgIHZhciBwYXJhbXMgPSBnZXRDb21tb25DYXBhYmlsaXRpZXMobG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgICAgIHJlbW90ZUNhcGFiaWxpdGllcyk7XG5cbiAgICAgICAgICAvLyBTdGFydCB0aGUgUlRDUnRwU2VuZGVyLiBUaGUgUlRDUnRwUmVjZWl2ZXIgZm9yIHRoaXNcbiAgICAgICAgICAvLyB0cmFuc2NlaXZlciBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQgaW4gc2V0UmVtb3RlRGVzY3JpcHRpb24uXG4gICAgICAgICAgcGMuX3RyYW5zY2VpdmUodHJhbnNjZWl2ZXIsXG4gICAgICAgICAgICAgIHBhcmFtcy5jb2RlY3MubGVuZ3RoID4gMCxcbiAgICAgICAgICAgICAgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwYy5fbG9jYWxEZXNjcmlwdGlvbiA9IHtcbiAgICAgIHR5cGU6IGRlc2NyaXB0aW9uLnR5cGUsXG4gICAgICBzZHA6IGRlc2NyaXB0aW9uLnNkcFxuICAgIH07XG4gICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdvZmZlcicpIHtcbiAgICAgIHBjLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnaGF2ZS1sb2NhbC1vZmZlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ3N0YWJsZScpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb24gPSBmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgIHZhciBwYyA9IHRoaXM7XG5cbiAgICAvLyBOb3RlOiBwcmFuc3dlciBpcyBub3Qgc3VwcG9ydGVkLlxuICAgIGlmIChbJ29mZmVyJywgJ2Fuc3dlciddLmluZGV4T2YoZGVzY3JpcHRpb24udHlwZSkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdUeXBlRXJyb3InLFxuICAgICAgICAgICdVbnN1cHBvcnRlZCB0eXBlIFwiJyArIGRlc2NyaXB0aW9uLnR5cGUgKyAnXCInKSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FjdGlvbkFsbG93ZWRJblNpZ25hbGluZ1N0YXRlKCdzZXRSZW1vdGVEZXNjcmlwdGlvbicsXG4gICAgICAgIGRlc2NyaXB0aW9uLnR5cGUsIHBjLnNpZ25hbGluZ1N0YXRlKSB8fCBwYy5faXNDbG9zZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAnQ2FuIG5vdCBzZXQgcmVtb3RlICcgKyBkZXNjcmlwdGlvbi50eXBlICtcbiAgICAgICAgICAnIGluIHN0YXRlICcgKyBwYy5zaWduYWxpbmdTdGF0ZSkpO1xuICAgIH1cblxuICAgIHZhciBzdHJlYW1zID0ge307XG4gICAgcGMucmVtb3RlU3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgc3RyZWFtc1tzdHJlYW0uaWRdID0gc3RyZWFtO1xuICAgIH0pO1xuICAgIHZhciByZWNlaXZlckxpc3QgPSBbXTtcbiAgICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGRlc2NyaXB0aW9uLnNkcCk7XG4gICAgdmFyIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTtcbiAgICB2YXIgaXNJY2VMaXRlID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoc2Vzc2lvbnBhcnQsXG4gICAgICAgICdhPWljZS1saXRlJykubGVuZ3RoID4gMDtcbiAgICB2YXIgdXNpbmdCdW5kbGUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChzZXNzaW9ucGFydCxcbiAgICAgICAgJ2E9Z3JvdXA6QlVORExFICcpLmxlbmd0aCA+IDA7XG4gICAgcGMudXNpbmdCdW5kbGUgPSB1c2luZ0J1bmRsZTtcbiAgICB2YXIgaWNlT3B0aW9ucyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KHNlc3Npb25wYXJ0LFxuICAgICAgICAnYT1pY2Utb3B0aW9uczonKVswXTtcbiAgICBpZiAoaWNlT3B0aW9ucykge1xuICAgICAgcGMuY2FuVHJpY2tsZUljZUNhbmRpZGF0ZXMgPSBpY2VPcHRpb25zLnN1YnN0cigxNCkuc3BsaXQoJyAnKVxuICAgICAgICAgIC5pbmRleE9mKCd0cmlja2xlJykgPj0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGMuY2FuVHJpY2tsZUljZUNhbmRpZGF0ZXMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICAgICAgdmFyIGtpbmQgPSBTRFBVdGlscy5nZXRLaW5kKG1lZGlhU2VjdGlvbik7XG4gICAgICAvLyB0cmVhdCBidW5kbGUtb25seSBhcyBub3QtcmVqZWN0ZWQuXG4gICAgICB2YXIgcmVqZWN0ZWQgPSBTRFBVdGlscy5pc1JlamVjdGVkKG1lZGlhU2VjdGlvbikgJiZcbiAgICAgICAgICBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPWJ1bmRsZS1vbmx5JykubGVuZ3RoID09PSAwO1xuICAgICAgdmFyIHByb3RvY29sID0gbGluZXNbMF0uc3Vic3RyKDIpLnNwbGl0KCcgJylbMl07XG5cbiAgICAgIHZhciBkaXJlY3Rpb24gPSBTRFBVdGlscy5nZXREaXJlY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCk7XG4gICAgICB2YXIgcmVtb3RlTXNpZCA9IFNEUFV0aWxzLnBhcnNlTXNpZChtZWRpYVNlY3Rpb24pO1xuXG4gICAgICB2YXIgbWlkID0gU0RQVXRpbHMuZ2V0TWlkKG1lZGlhU2VjdGlvbikgfHwgU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyKCk7XG5cbiAgICAgIC8vIFJlamVjdCBkYXRhY2hhbm5lbHMgd2hpY2ggYXJlIG5vdCBpbXBsZW1lbnRlZCB5ZXQuXG4gICAgICBpZiAocmVqZWN0ZWQgfHwgKGtpbmQgPT09ICdhcHBsaWNhdGlvbicgJiYgKHByb3RvY29sID09PSAnRFRMUy9TQ1RQJyB8fFxuICAgICAgICAgIHByb3RvY29sID09PSAnVURQL0RUTFMvU0NUUCcpKSkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGRhbmdlcm91cyBpbiB0aGUgY2FzZSB3aGVyZSBhIG5vbi1yZWplY3RlZCBtLWxpbmVcbiAgICAgICAgLy8gICAgIGJlY29tZXMgcmVqZWN0ZWQuXG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSA9IHtcbiAgICAgICAgICBtaWQ6IG1pZCxcbiAgICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICAgIHByb3RvY29sOiBwcm90b2NvbCxcbiAgICAgICAgICByZWplY3RlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVqZWN0ZWQgJiYgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdICYmXG4gICAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJlamVjdGVkKSB7XG4gICAgICAgIC8vIHJlY3ljbGUgYSByZWplY3RlZCB0cmFuc2NlaXZlci5cbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdID0gcGMuX2NyZWF0ZVRyYW5zY2VpdmVyKGtpbmQsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNjZWl2ZXI7XG4gICAgICB2YXIgaWNlR2F0aGVyZXI7XG4gICAgICB2YXIgaWNlVHJhbnNwb3J0O1xuICAgICAgdmFyIGR0bHNUcmFuc3BvcnQ7XG4gICAgICB2YXIgcnRwUmVjZWl2ZXI7XG4gICAgICB2YXIgc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgIHZhciByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgdmFyIGxvY2FsQ2FwYWJpbGl0aWVzO1xuXG4gICAgICB2YXIgdHJhY2s7XG4gICAgICAvLyBGSVhNRTogZW5zdXJlIHRoZSBtZWRpYVNlY3Rpb24gaGFzIHJ0Y3AtbXV4IHNldC5cbiAgICAgIHZhciByZW1vdGVDYXBhYmlsaXRpZXMgPSBTRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcbiAgICAgIHZhciByZW1vdGVJY2VQYXJhbWV0ZXJzO1xuICAgICAgdmFyIHJlbW90ZUR0bHNQYXJhbWV0ZXJzO1xuICAgICAgaWYgKCFyZWplY3RlZCkge1xuICAgICAgICByZW1vdGVJY2VQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24sXG4gICAgICAgICAgICBzZXNzaW9ucGFydCk7XG4gICAgICAgIHJlbW90ZUR0bHNQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0RHRsc1BhcmFtZXRlcnMobWVkaWFTZWN0aW9uLFxuICAgICAgICAgICAgc2Vzc2lvbnBhcnQpO1xuICAgICAgICByZW1vdGVEdGxzUGFyYW1ldGVycy5yb2xlID0gJ2NsaWVudCc7XG4gICAgICB9XG4gICAgICByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzID1cbiAgICAgICAgICBTRFBVdGlscy5wYXJzZVJ0cEVuY29kaW5nUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pO1xuXG4gICAgICB2YXIgcnRjcFBhcmFtZXRlcnMgPSBTRFBVdGlscy5wYXJzZVJ0Y3BQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7XG5cbiAgICAgIHZhciBpc0NvbXBsZXRlID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLFxuICAgICAgICAgICdhPWVuZC1vZi1jYW5kaWRhdGVzJywgc2Vzc2lvbnBhcnQpLmxlbmd0aCA+IDA7XG4gICAgICB2YXIgY2FuZHMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPWNhbmRpZGF0ZTonKVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24oY2FuZCkge1xuICAgICAgICAgICAgcmV0dXJuIFNEUFV0aWxzLnBhcnNlQ2FuZGlkYXRlKGNhbmQpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihjYW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FuZC5jb21wb25lbnQgPT09IDE7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiB1c2UgQlVORExFIGFuZCBkaXNwb3NlIHRyYW5zcG9ydHMuXG4gICAgICBpZiAoKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdvZmZlcicgfHwgZGVzY3JpcHRpb24udHlwZSA9PT0gJ2Fuc3dlcicpICYmXG4gICAgICAgICAgIXJlamVjdGVkICYmIHVzaW5nQnVuZGxlICYmIHNkcE1MaW5lSW5kZXggPiAwICYmXG4gICAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdKSB7XG4gICAgICAgIHBjLl9kaXNwb3NlSWNlQW5kRHRsc1RyYW5zcG9ydHMoc2RwTUxpbmVJbmRleCk7XG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5pY2VHYXRoZXJlciA9XG4gICAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbMF0uaWNlR2F0aGVyZXI7XG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5pY2VUcmFuc3BvcnQgPVxuICAgICAgICAgICAgcGMudHJhbnNjZWl2ZXJzWzBdLmljZVRyYW5zcG9ydDtcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmR0bHNUcmFuc3BvcnQgPVxuICAgICAgICAgICAgcGMudHJhbnNjZWl2ZXJzWzBdLmR0bHNUcmFuc3BvcnQ7XG4gICAgICAgIGlmIChwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucnRwU2VuZGVyKSB7XG4gICAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJ0cFNlbmRlci5zZXRUcmFuc3BvcnQoXG4gICAgICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1swXS5kdGxzVHJhbnNwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJ0cFJlY2VpdmVyKSB7XG4gICAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJ0cFJlY2VpdmVyLnNldFRyYW5zcG9ydChcbiAgICAgICAgICAgICAgcGMudHJhbnNjZWl2ZXJzWzBdLmR0bHNUcmFuc3BvcnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJyAmJiAhcmVqZWN0ZWQpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIgPSBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0gfHxcbiAgICAgICAgICAgIHBjLl9jcmVhdGVUcmFuc2NlaXZlcihraW5kKTtcbiAgICAgICAgdHJhbnNjZWl2ZXIubWlkID0gbWlkO1xuXG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIpIHtcbiAgICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlciA9IHBjLl9jcmVhdGVJY2VHYXRoZXJlcihzZHBNTGluZUluZGV4LFxuICAgICAgICAgICAgICB1c2luZ0J1bmRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FuZHMubGVuZ3RoICYmIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAoIXVzaW5nQnVuZGxlIHx8IHNkcE1MaW5lSW5kZXggPT09IDApKSB7XG4gICAgICAgICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuc2V0UmVtb3RlQ2FuZGlkYXRlcyhjYW5kcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbmRzLmZvckVhY2goZnVuY3Rpb24oY2FuZGlkYXRlKSB7XG4gICAgICAgICAgICAgIG1heWJlQWRkQ2FuZGlkYXRlKHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCwgY2FuZGlkYXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzID0gd2luZG93LlJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcyhraW5kKTtcblxuICAgICAgICAvLyBmaWx0ZXIgUlRYIHVudGlsIGFkZGl0aW9uYWwgc3R1ZmYgbmVlZGVkIGZvciBSVFggaXMgaW1wbGVtZW50ZWRcbiAgICAgICAgLy8gaW4gYWRhcHRlci5qc1xuICAgICAgICBpZiAoZWRnZVZlcnNpb24gPCAxNTAxOSkge1xuICAgICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzLmNvZGVjcyA9IGxvY2FsQ2FwYWJpbGl0aWVzLmNvZGVjcy5maWx0ZXIoXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvZGVjLm5hbWUgIT09ICdydHgnO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzIHx8IFt7XG4gICAgICAgICAgc3NyYzogKDIgKiBzZHBNTGluZUluZGV4ICsgMikgKiAxMDAxXG4gICAgICAgIH1dO1xuXG4gICAgICAgIC8vIFRPRE86IHJld3JpdGUgdG8gdXNlIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3dlYnJ0Yy1wYy8jc2V0LWFzc29jaWF0ZWQtcmVtb3RlLXN0cmVhbXNcbiAgICAgICAgdmFyIGlzTmV3VHJhY2sgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdzZW5kb25seScpIHtcbiAgICAgICAgICBpc05ld1RyYWNrID0gIXRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyO1xuICAgICAgICAgIHJ0cFJlY2VpdmVyID0gdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIgfHxcbiAgICAgICAgICAgICAgbmV3IHdpbmRvdy5SVENSdHBSZWNlaXZlcih0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LCBraW5kKTtcblxuICAgICAgICAgIGlmIChpc05ld1RyYWNrKSB7XG4gICAgICAgICAgICB2YXIgc3RyZWFtO1xuICAgICAgICAgICAgdHJhY2sgPSBydHBSZWNlaXZlci50cmFjaztcbiAgICAgICAgICAgIC8vIEZJWE1FOiBkb2VzIG5vdCB3b3JrIHdpdGggUGxhbiBCLlxuICAgICAgICAgICAgaWYgKHJlbW90ZU1zaWQgJiYgcmVtb3RlTXNpZC5zdHJlYW0gPT09ICctJykge1xuICAgICAgICAgICAgICAvLyBuby1vcC4gYSBzdHJlYW0gaWQgb2YgJy0nIG1lYW5zOiBubyBhc3NvY2lhdGVkIHN0cmVhbS5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVtb3RlTXNpZCkge1xuICAgICAgICAgICAgICBpZiAoIXN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0gPSBuZXcgd2luZG93Lk1lZGlhU3RyZWFtKCk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dLCAnaWQnLCB7XG4gICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3RlTXNpZC5zdHJlYW07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRyYWNrLCAnaWQnLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZW1vdGVNc2lkLnRyYWNrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHN0cmVhbSA9IHN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFzdHJlYW1zLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBzdHJlYW1zLmRlZmF1bHQgPSBuZXcgd2luZG93Lk1lZGlhU3RyZWFtKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RyZWFtID0gc3RyZWFtcy5kZWZhdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICAgICAgICBhZGRUcmFja1RvU3RyZWFtQW5kRmlyZUV2ZW50KHRyYWNrLCBzdHJlYW0pO1xuICAgICAgICAgICAgICB0cmFuc2NlaXZlci5hc3NvY2lhdGVkUmVtb3RlTWVkaWFTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlY2VpdmVyTGlzdC5wdXNoKFt0cmFjaywgcnRwUmVjZWl2ZXIsIHN0cmVhbV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlciAmJiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlci50cmFjaykge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLmFzc29jaWF0ZWRSZW1vdGVNZWRpYVN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICB2YXIgbmF0aXZlVHJhY2sgPSBzLmdldFRyYWNrcygpLmZpbmQoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICByZXR1cm4gdC5pZCA9PT0gdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIudHJhY2suaWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChuYXRpdmVUcmFjaykge1xuICAgICAgICAgICAgICByZW1vdmVUcmFja0Zyb21TdHJlYW1BbmRGaXJlRXZlbnQobmF0aXZlVHJhY2ssIHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRyYW5zY2VpdmVyLmFzc29jaWF0ZWRSZW1vdGVNZWRpYVN0cmVhbXMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzID0gbG9jYWxDYXBhYmlsaXRpZXM7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyA9IHJlbW90ZUNhcGFiaWxpdGllcztcbiAgICAgICAgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIgPSBydHBSZWNlaXZlcjtcbiAgICAgICAgdHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMgPSBydGNwUGFyYW1ldGVycztcbiAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMgPSByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzO1xuXG4gICAgICAgIC8vIFN0YXJ0IHRoZSBSVENSdHBSZWNlaXZlciBub3cuIFRoZSBSVFBTZW5kZXIgaXMgc3RhcnRlZCBpblxuICAgICAgICAvLyBzZXRMb2NhbERlc2NyaXB0aW9uLlxuICAgICAgICBwYy5fdHJhbnNjZWl2ZShwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0sXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGlzTmV3VHJhY2spO1xuICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnYW5zd2VyJyAmJiAhcmVqZWN0ZWQpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIgPSBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF07XG4gICAgICAgIGljZUdhdGhlcmVyID0gdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXI7XG4gICAgICAgIGljZVRyYW5zcG9ydCA9IHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydDtcbiAgICAgICAgZHRsc1RyYW5zcG9ydCA9IHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQ7XG4gICAgICAgIHJ0cFJlY2VpdmVyID0gdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgICBsb2NhbENhcGFiaWxpdGllcyA9IHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzO1xuXG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzID1cbiAgICAgICAgICAgIHJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5yZW1vdGVDYXBhYmlsaXRpZXMgPVxuICAgICAgICAgICAgcmVtb3RlQ2FwYWJpbGl0aWVzO1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucnRjcFBhcmFtZXRlcnMgPSBydGNwUGFyYW1ldGVycztcblxuICAgICAgICBpZiAoY2FuZHMubGVuZ3RoICYmIGljZVRyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICBpZiAoKGlzSWNlTGl0ZSB8fCBpc0NvbXBsZXRlKSAmJlxuICAgICAgICAgICAgICAoIXVzaW5nQnVuZGxlIHx8IHNkcE1MaW5lSW5kZXggPT09IDApKSB7XG4gICAgICAgICAgICBpY2VUcmFuc3BvcnQuc2V0UmVtb3RlQ2FuZGlkYXRlcyhjYW5kcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbmRzLmZvckVhY2goZnVuY3Rpb24oY2FuZGlkYXRlKSB7XG4gICAgICAgICAgICAgIG1heWJlQWRkQ2FuZGlkYXRlKHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCwgY2FuZGlkYXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdXNpbmdCdW5kbGUgfHwgc2RwTUxpbmVJbmRleCA9PT0gMCkge1xuICAgICAgICAgIGlmIChpY2VUcmFuc3BvcnQuc3RhdGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgICBpY2VUcmFuc3BvcnQuc3RhcnQoaWNlR2F0aGVyZXIsIHJlbW90ZUljZVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgJ2NvbnRyb2xsaW5nJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkdGxzVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgICAgZHRsc1RyYW5zcG9ydC5zdGFydChyZW1vdGVEdGxzUGFyYW1ldGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIG9mZmVyIGNvbnRhaW5lZCBSVFggYnV0IHRoZSBhbnN3ZXIgZGlkIG5vdCxcbiAgICAgICAgLy8gcmVtb3ZlIFJUWCBmcm9tIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMuXG4gICAgICAgIHZhciBjb21tb25DYXBhYmlsaXRpZXMgPSBnZXRDb21tb25DYXBhYmlsaXRpZXMoXG4gICAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzKTtcblxuICAgICAgICB2YXIgaGFzUnR4ID0gY29tbW9uQ2FwYWJpbGl0aWVzLmNvZGVjcy5maWx0ZXIoZnVuY3Rpb24oYykge1xuICAgICAgICAgIHJldHVybiBjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3J0eCc7XG4gICAgICAgIH0pLmxlbmd0aDtcbiAgICAgICAgaWYgKCFoYXNSdHggJiYgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICAgICAgICBkZWxldGUgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHg7XG4gICAgICAgIH1cblxuICAgICAgICBwYy5fdHJhbnNjZWl2ZSh0cmFuc2NlaXZlcixcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdyZWN2b25seScsXG4gICAgICAgICAgICBkaXJlY3Rpb24gPT09ICdzZW5kcmVjdicgfHwgZGlyZWN0aW9uID09PSAnc2VuZG9ubHknKTtcblxuICAgICAgICAvLyBUT0RPOiByZXdyaXRlIHRvIHVzZSBodHRwOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtcGMvI3NldC1hc3NvY2lhdGVkLXJlbW90ZS1zdHJlYW1zXG4gICAgICAgIGlmIChydHBSZWNlaXZlciAmJlxuICAgICAgICAgICAgKGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdzZW5kb25seScpKSB7XG4gICAgICAgICAgdHJhY2sgPSBydHBSZWNlaXZlci50cmFjaztcbiAgICAgICAgICBpZiAocmVtb3RlTXNpZCkge1xuICAgICAgICAgICAgaWYgKCFzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXSkge1xuICAgICAgICAgICAgICBzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXSA9IG5ldyB3aW5kb3cuTWVkaWFTdHJlYW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRyYWNrVG9TdHJlYW1BbmRGaXJlRXZlbnQodHJhY2ssIHN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dKTtcbiAgICAgICAgICAgIHJlY2VpdmVyTGlzdC5wdXNoKFt0cmFjaywgcnRwUmVjZWl2ZXIsIHN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghc3RyZWFtcy5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgIHN0cmVhbXMuZGVmYXVsdCA9IG5ldyB3aW5kb3cuTWVkaWFTdHJlYW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRyYWNrVG9TdHJlYW1BbmRGaXJlRXZlbnQodHJhY2ssIHN0cmVhbXMuZGVmYXVsdCk7XG4gICAgICAgICAgICByZWNlaXZlckxpc3QucHVzaChbdHJhY2ssIHJ0cFJlY2VpdmVyLCBzdHJlYW1zLmRlZmF1bHRdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRklYTUU6IGFjdHVhbGx5IHRoZSByZWNlaXZlciBzaG91bGQgYmUgY3JlYXRlZCBsYXRlci5cbiAgICAgICAgICBkZWxldGUgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwYy5fZHRsc1JvbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcGMuX2R0bHNSb2xlID0gZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJyA/ICdhY3RpdmUnIDogJ3Bhc3NpdmUnO1xuICAgIH1cblxuICAgIHBjLl9yZW1vdGVEZXNjcmlwdGlvbiA9IHtcbiAgICAgIHR5cGU6IGRlc2NyaXB0aW9uLnR5cGUsXG4gICAgICBzZHA6IGRlc2NyaXB0aW9uLnNkcFxuICAgIH07XG4gICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdvZmZlcicpIHtcbiAgICAgIHBjLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnaGF2ZS1yZW1vdGUtb2ZmZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdzdGFibGUnKTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoc3RyZWFtcykuZm9yRWFjaChmdW5jdGlvbihzaWQpIHtcbiAgICAgIHZhciBzdHJlYW0gPSBzdHJlYW1zW3NpZF07XG4gICAgICBpZiAoc3RyZWFtLmdldFRyYWNrcygpLmxlbmd0aCkge1xuICAgICAgICBpZiAocGMucmVtb3RlU3RyZWFtcy5pbmRleE9mKHN0cmVhbSkgPT09IC0xKSB7XG4gICAgICAgICAgcGMucmVtb3RlU3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdhZGRzdHJlYW0nKTtcbiAgICAgICAgICBldmVudC5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwYy5fZGlzcGF0Y2hFdmVudCgnYWRkc3RyZWFtJywgZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVjZWl2ZXJMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHZhciB0cmFjayA9IGl0ZW1bMF07XG4gICAgICAgICAgdmFyIHJlY2VpdmVyID0gaXRlbVsxXTtcbiAgICAgICAgICBpZiAoc3RyZWFtLmlkICE9PSBpdGVtWzJdLmlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpcmVBZGRUcmFjayhwYywgdHJhY2ssIHJlY2VpdmVyLCBbc3RyZWFtXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJlY2VpdmVyTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZpcmVBZGRUcmFjayhwYywgaXRlbVswXSwgaXRlbVsxXSwgW10pO1xuICAgIH0pO1xuXG4gICAgLy8gY2hlY2sgd2hldGhlciBhZGRJY2VDYW5kaWRhdGUoe30pIHdhcyBjYWxsZWQgd2l0aGluIGZvdXIgc2Vjb25kcyBhZnRlclxuICAgIC8vIHNldFJlbW90ZURlc2NyaXB0aW9uLlxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCEocGMgJiYgcGMudHJhbnNjZWl2ZXJzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwYy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuc3RhdGUgPT09ICduZXcnICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuZ2V0UmVtb3RlQ2FuZGlkYXRlcygpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1RpbWVvdXQgZm9yIGFkZFJlbW90ZUNhbmRpZGF0ZS4gQ29uc2lkZXIgc2VuZGluZyAnICtcbiAgICAgICAgICAgICAgJ2FuIGVuZC1vZi1jYW5kaWRhdGVzIG5vdGlmaWNhdGlvbicpO1xuICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5hZGRSZW1vdGVDYW5kaWRhdGUoe30pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCA0MDAwKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAvKiBub3QgeWV0XG4gICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuY2xvc2UoKTtcbiAgICAgIH1cbiAgICAgICovXG4gICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0KSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCkge1xuICAgICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgICAgICB0cmFuc2NlaXZlci5ydHBSZWNlaXZlci5zdG9wKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gRklYTUU6IGNsZWFuIHVwIHRyYWNrcywgbG9jYWwgc3RyZWFtcywgcmVtb3RlIHN0cmVhbXMsIGV0Y1xuICAgIHRoaXMuX2lzQ2xvc2VkID0gdHJ1ZTtcbiAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnY2xvc2VkJyk7XG4gIH07XG5cbiAgLy8gVXBkYXRlIHRoZSBzaWduYWxpbmcgc3RhdGUuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlU2lnbmFsaW5nU3RhdGUgPSBmdW5jdGlvbihuZXdTdGF0ZSkge1xuICAgIHRoaXMuc2lnbmFsaW5nU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ3NpZ25hbGluZ3N0YXRlY2hhbmdlJyk7XG4gICAgdGhpcy5fZGlzcGF0Y2hFdmVudCgnc2lnbmFsaW5nc3RhdGVjaGFuZ2UnLCBldmVudCk7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdG8gZmlyZSB0aGUgbmVnb3RpYXRpb25uZWVkZWQgZXZlbnQuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIGlmICh0aGlzLnNpZ25hbGluZ1N0YXRlICE9PSAnc3RhYmxlJyB8fCB0aGlzLm5lZWROZWdvdGlhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm5lZWROZWdvdGlhdGlvbiA9IHRydWU7XG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocGMubmVlZE5lZ290aWF0aW9uKSB7XG4gICAgICAgIHBjLm5lZWROZWdvdGlhdGlvbiA9IGZhbHNlO1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ25lZ290aWF0aW9ubmVlZGVkJyk7XG4gICAgICAgIHBjLl9kaXNwYXRjaEV2ZW50KCduZWdvdGlhdGlvbm5lZWRlZCcsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCAwKTtcbiAgfTtcblxuICAvLyBVcGRhdGUgdGhlIGljZSBjb25uZWN0aW9uIHN0YXRlLlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX3VwZGF0ZUljZUNvbm5lY3Rpb25TdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdTdGF0ZTtcbiAgICB2YXIgc3RhdGVzID0ge1xuICAgICAgJ25ldyc6IDAsXG4gICAgICBjbG9zZWQ6IDAsXG4gICAgICBjaGVja2luZzogMCxcbiAgICAgIGNvbm5lY3RlZDogMCxcbiAgICAgIGNvbXBsZXRlZDogMCxcbiAgICAgIGRpc2Nvbm5lY3RlZDogMCxcbiAgICAgIGZhaWxlZDogMFxuICAgIH07XG4gICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCAmJiAhdHJhbnNjZWl2ZXIucmVqZWN0ZWQpIHtcbiAgICAgICAgc3RhdGVzW3RyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdGF0ZV0rKztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG5ld1N0YXRlID0gJ25ldyc7XG4gICAgaWYgKHN0YXRlcy5mYWlsZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdmYWlsZWQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNoZWNraW5nID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnY2hlY2tpbmcnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmRpc2Nvbm5lY3RlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2Rpc2Nvbm5lY3RlZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMubmV3ID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnbmV3JztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5jb25uZWN0ZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdjb25uZWN0ZWQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNvbXBsZXRlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2NvbXBsZXRlZCc7XG4gICAgfVxuXG4gICAgaWYgKG5ld1N0YXRlICE9PSB0aGlzLmljZUNvbm5lY3Rpb25TdGF0ZSkge1xuICAgICAgdGhpcy5pY2VDb25uZWN0aW9uU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJyk7XG4gICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50KCdpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFVwZGF0ZSB0aGUgY29ubmVjdGlvbiBzdGF0ZS5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl91cGRhdGVDb25uZWN0aW9uU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3U3RhdGU7XG4gICAgdmFyIHN0YXRlcyA9IHtcbiAgICAgICduZXcnOiAwLFxuICAgICAgY2xvc2VkOiAwLFxuICAgICAgY29ubmVjdGluZzogMCxcbiAgICAgIGNvbm5lY3RlZDogMCxcbiAgICAgIGNvbXBsZXRlZDogMCxcbiAgICAgIGRpc2Nvbm5lY3RlZDogMCxcbiAgICAgIGZhaWxlZDogMFxuICAgIH07XG4gICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCAmJiB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0ICYmXG4gICAgICAgICAgIXRyYW5zY2VpdmVyLnJlamVjdGVkKSB7XG4gICAgICAgIHN0YXRlc1t0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuc3RhdGVdKys7XG4gICAgICAgIHN0YXRlc1t0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LnN0YXRlXSsrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIElDRVRyYW5zcG9ydC5jb21wbGV0ZWQgYW5kIGNvbm5lY3RlZCBhcmUgdGhlIHNhbWUgZm9yIHRoaXMgcHVycG9zZS5cbiAgICBzdGF0ZXMuY29ubmVjdGVkICs9IHN0YXRlcy5jb21wbGV0ZWQ7XG5cbiAgICBuZXdTdGF0ZSA9ICduZXcnO1xuICAgIGlmIChzdGF0ZXMuZmFpbGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnZmFpbGVkJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5jb25uZWN0aW5nID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnY29ubmVjdGluZyc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuZGlzY29ubmVjdGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnZGlzY29ubmVjdGVkJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5uZXcgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICduZXcnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNvbm5lY3RlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2Nvbm5lY3RlZCc7XG4gICAgfVxuXG4gICAgaWYgKG5ld1N0YXRlICE9PSB0aGlzLmNvbm5lY3Rpb25TdGF0ZSkge1xuICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnY29ubmVjdGlvbnN0YXRlY2hhbmdlJyk7XG4gICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50KCdjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVPZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYyA9IHRoaXM7XG5cbiAgICBpZiAocGMuX2lzQ2xvc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0NhbiBub3QgY2FsbCBjcmVhdGVPZmZlciBhZnRlciBjbG9zZScpKTtcbiAgICB9XG5cbiAgICB2YXIgbnVtQXVkaW9UcmFja3MgPSBwYy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiB0LmtpbmQgPT09ICdhdWRpbyc7XG4gICAgfSkubGVuZ3RoO1xuICAgIHZhciBudW1WaWRlb1RyYWNrcyA9IHBjLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQua2luZCA9PT0gJ3ZpZGVvJztcbiAgICB9KS5sZW5ndGg7XG5cbiAgICAvLyBEZXRlcm1pbmUgbnVtYmVyIG9mIGF1ZGlvIGFuZCB2aWRlbyB0cmFja3Mgd2UgbmVlZCB0byBzZW5kL3JlY3YuXG4gICAgdmFyIG9mZmVyT3B0aW9ucyA9IGFyZ3VtZW50c1swXTtcbiAgICBpZiAob2ZmZXJPcHRpb25zKSB7XG4gICAgICAvLyBSZWplY3QgQ2hyb21lIGxlZ2FjeSBjb25zdHJhaW50cy5cbiAgICAgIGlmIChvZmZlck9wdGlvbnMubWFuZGF0b3J5IHx8IG9mZmVyT3B0aW9ucy5vcHRpb25hbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0xlZ2FjeSBtYW5kYXRvcnkvb3B0aW9uYWwgY29uc3RyYWludHMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIG51bUF1ZGlvVHJhY2tzID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBudW1BdWRpb1RyYWNrcyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbnVtQXVkaW9UcmFja3MgPSBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvID09PSB0cnVlKSB7XG4gICAgICAgICAgbnVtVmlkZW9UcmFja3MgPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvID09PSBmYWxzZSkge1xuICAgICAgICAgIG51bVZpZGVvVHJhY2tzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBudW1WaWRlb1RyYWNrcyA9IG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgIG51bUF1ZGlvVHJhY2tzLS07XG4gICAgICAgIGlmIChudW1BdWRpb1RyYWNrcyA8IDApIHtcbiAgICAgICAgICB0cmFuc2NlaXZlci53YW50UmVjZWl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICd2aWRlbycpIHtcbiAgICAgICAgbnVtVmlkZW9UcmFja3MtLTtcbiAgICAgICAgaWYgKG51bVZpZGVvVHJhY2tzIDwgMCkge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLndhbnRSZWNlaXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBNLWxpbmVzIGZvciByZWN2b25seSBzdHJlYW1zLlxuICAgIHdoaWxlIChudW1BdWRpb1RyYWNrcyA+IDAgfHwgbnVtVmlkZW9UcmFja3MgPiAwKSB7XG4gICAgICBpZiAobnVtQXVkaW9UcmFja3MgPiAwKSB7XG4gICAgICAgIHBjLl9jcmVhdGVUcmFuc2NlaXZlcignYXVkaW8nKTtcbiAgICAgICAgbnVtQXVkaW9UcmFja3MtLTtcbiAgICAgIH1cbiAgICAgIGlmIChudW1WaWRlb1RyYWNrcyA+IDApIHtcbiAgICAgICAgcGMuX2NyZWF0ZVRyYW5zY2VpdmVyKCd2aWRlbycpO1xuICAgICAgICBudW1WaWRlb1RyYWNrcy0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZShwYy5fc2RwU2Vzc2lvbklkLFxuICAgICAgICBwYy5fc2RwU2Vzc2lvblZlcnNpb24rKyk7XG4gICAgcGMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIsIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgIC8vIEZvciBlYWNoIHRyYWNrLCBjcmVhdGUgYW4gaWNlIGdhdGhlcmVyLCBpY2UgdHJhbnNwb3J0LFxuICAgICAgLy8gZHRscyB0cmFuc3BvcnQsIHBvdGVudGlhbGx5IHJ0cHNlbmRlciBhbmQgcnRwcmVjZWl2ZXIuXG4gICAgICB2YXIgdHJhY2sgPSB0cmFuc2NlaXZlci50cmFjaztcbiAgICAgIHZhciBraW5kID0gdHJhbnNjZWl2ZXIua2luZDtcbiAgICAgIHZhciBtaWQgPSB0cmFuc2NlaXZlci5taWQgfHwgU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyKCk7XG4gICAgICB0cmFuc2NlaXZlci5taWQgPSBtaWQ7XG5cbiAgICAgIGlmICghdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIgPSBwYy5fY3JlYXRlSWNlR2F0aGVyZXIoc2RwTUxpbmVJbmRleCxcbiAgICAgICAgICAgIHBjLnVzaW5nQnVuZGxlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxvY2FsQ2FwYWJpbGl0aWVzID0gd2luZG93LlJUQ1J0cFNlbmRlci5nZXRDYXBhYmlsaXRpZXMoa2luZCk7XG4gICAgICAvLyBmaWx0ZXIgUlRYIHVudGlsIGFkZGl0aW9uYWwgc3R1ZmYgbmVlZGVkIGZvciBSVFggaXMgaW1wbGVtZW50ZWRcbiAgICAgIC8vIGluIGFkYXB0ZXIuanNcbiAgICAgIGlmIChlZGdlVmVyc2lvbiA8IDE1MDE5KSB7XG4gICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzLmNvZGVjcyA9IGxvY2FsQ2FwYWJpbGl0aWVzLmNvZGVjcy5maWx0ZXIoXG4gICAgICAgICAgICBmdW5jdGlvbihjb2RlYykge1xuICAgICAgICAgICAgICByZXR1cm4gY29kZWMubmFtZSAhPT0gJ3J0eCc7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgICAgIC8vIHdvcmsgYXJvdW5kIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD02NTUyXG4gICAgICAgIC8vIGJ5IGFkZGluZyBsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0xXG4gICAgICAgIGlmIChjb2RlYy5uYW1lID09PSAnSDI2NCcgJiZcbiAgICAgICAgICAgIGNvZGVjLnBhcmFtZXRlcnNbJ2xldmVsLWFzeW1tZXRyeS1hbGxvd2VkJ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvZGVjLnBhcmFtZXRlcnNbJ2xldmVsLWFzeW1tZXRyeS1hbGxvd2VkJ10gPSAnMSc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3Igc3Vic2VxdWVudCBvZmZlcnMsIHdlIG1pZ2h0IGhhdmUgdG8gcmUtdXNlIHRoZSBwYXlsb2FkXG4gICAgICAgIC8vIHR5cGUgb2YgdGhlIGxhc3Qgb2ZmZXIuXG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcy5jb2RlY3MpIHtcbiAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24ocmVtb3RlQ29kZWMpIHtcbiAgICAgICAgICAgIGlmIChjb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IHJlbW90ZUNvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSAmJlxuICAgICAgICAgICAgICAgIGNvZGVjLmNsb2NrUmF0ZSA9PT0gcmVtb3RlQ29kZWMuY2xvY2tSYXRlKSB7XG4gICAgICAgICAgICAgIGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlID0gcmVtb3RlQ29kZWMucGF5bG9hZFR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGhkckV4dCkge1xuICAgICAgICB2YXIgcmVtb3RlRXh0ZW5zaW9ucyA9IHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyAmJlxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMgfHwgW107XG4gICAgICAgIHJlbW90ZUV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihySGRyRXh0KSB7XG4gICAgICAgICAgaWYgKGhkckV4dC51cmkgPT09IHJIZHJFeHQudXJpKSB7XG4gICAgICAgICAgICBoZHJFeHQuaWQgPSBySGRyRXh0LmlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gZ2VuZXJhdGUgYW4gc3NyYyBub3csIHRvIGJlIHVzZWQgbGF0ZXIgaW4gcnRwU2VuZGVyLnNlbmRcbiAgICAgIHZhciBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycyB8fCBbe1xuICAgICAgICBzc3JjOiAoMiAqIHNkcE1MaW5lSW5kZXggKyAxKSAqIDEwMDFcbiAgICAgIH1dO1xuICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgIC8vIGFkZCBSVFhcbiAgICAgICAgaWYgKGVkZ2VWZXJzaW9uID49IDE1MDE5ICYmIGtpbmQgPT09ICd2aWRlbycgJiZcbiAgICAgICAgICAgICFzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4ID0ge1xuICAgICAgICAgICAgc3NyYzogc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICsgMVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zY2VpdmVyLndhbnRSZWNlaXZlKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyID0gbmV3IHdpbmRvdy5SVENSdHBSZWNlaXZlcihcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQsIGtpbmQpO1xuICAgICAgfVxuXG4gICAgICB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcyA9IGxvY2FsQ2FwYWJpbGl0aWVzO1xuICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgfSk7XG5cbiAgICAvLyBhbHdheXMgb2ZmZXIgQlVORExFIGFuZCBkaXNwb3NlIG9uIHJldHVybiBpZiBub3Qgc3VwcG9ydGVkLlxuICAgIGlmIChwYy5fY29uZmlnLmJ1bmRsZVBvbGljeSAhPT0gJ21heC1jb21wYXQnKSB7XG4gICAgICBzZHAgKz0gJ2E9Z3JvdXA6QlVORExFICcgKyBwYy50cmFuc2NlaXZlcnMubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQubWlkO1xuICAgICAgfSkuam9pbignICcpICsgJ1xcclxcbic7XG4gICAgfVxuICAgIHNkcCArPSAnYT1pY2Utb3B0aW9uczp0cmlja2xlXFxyXFxuJztcblxuICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICBzZHAgKz0gd3JpdGVNZWRpYVNlY3Rpb24odHJhbnNjZWl2ZXIsIHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgICdvZmZlcicsIHRyYW5zY2VpdmVyLnN0cmVhbSwgcGMuX2R0bHNSb2xlKTtcbiAgICAgIHNkcCArPSAnYT1ydGNwLXJzaXplXFxyXFxuJztcblxuICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyICYmIHBjLmljZUdhdGhlcmluZ1N0YXRlICE9PSAnbmV3JyAmJlxuICAgICAgICAgIChzZHBNTGluZUluZGV4ID09PSAwIHx8ICFwYy51c2luZ0J1bmRsZSkpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuZ2V0TG9jYWxDYW5kaWRhdGVzKCkuZm9yRWFjaChmdW5jdGlvbihjYW5kKSB7XG4gICAgICAgICAgY2FuZC5jb21wb25lbnQgPSAxO1xuICAgICAgICAgIHNkcCArPSAnYT0nICsgU0RQVXRpbHMud3JpdGVDYW5kaWRhdGUoY2FuZCkgKyAnXFxyXFxuJztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLnN0YXRlID09PSAnY29tcGxldGVkJykge1xuICAgICAgICAgIHNkcCArPSAnYT1lbmQtb2YtY2FuZGlkYXRlc1xcclxcbic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBkZXNjID0gbmV3IHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24oe1xuICAgICAgdHlwZTogJ29mZmVyJyxcbiAgICAgIHNkcDogc2RwXG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXNjKTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQW5zd2VyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBjID0gdGhpcztcblxuICAgIGlmIChwYy5faXNDbG9zZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAnQ2FuIG5vdCBjYWxsIGNyZWF0ZUFuc3dlciBhZnRlciBjbG9zZScpKTtcbiAgICB9XG5cbiAgICBpZiAoIShwYy5zaWduYWxpbmdTdGF0ZSA9PT0gJ2hhdmUtcmVtb3RlLW9mZmVyJyB8fFxuICAgICAgICBwYy5zaWduYWxpbmdTdGF0ZSA9PT0gJ2hhdmUtbG9jYWwtcHJhbnN3ZXInKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdDYW4gbm90IGNhbGwgY3JlYXRlQW5zd2VyIGluIHNpZ25hbGluZ1N0YXRlICcgKyBwYy5zaWduYWxpbmdTdGF0ZSkpO1xuICAgIH1cblxuICAgIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZShwYy5fc2RwU2Vzc2lvbklkLFxuICAgICAgICBwYy5fc2RwU2Vzc2lvblZlcnNpb24rKyk7XG4gICAgaWYgKHBjLnVzaW5nQnVuZGxlKSB7XG4gICAgICBzZHAgKz0gJ2E9Z3JvdXA6QlVORExFICcgKyBwYy50cmFuc2NlaXZlcnMubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQubWlkO1xuICAgICAgfSkuam9pbignICcpICsgJ1xcclxcbic7XG4gICAgfVxuICAgIHNkcCArPSAnYT1pY2Utb3B0aW9uczp0cmlja2xlXFxyXFxuJztcblxuICAgIHZhciBtZWRpYVNlY3Rpb25zSW5PZmZlciA9IFNEUFV0aWxzLmdldE1lZGlhU2VjdGlvbnMoXG4gICAgICAgIHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHApLmxlbmd0aDtcbiAgICBwYy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlciwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgaWYgKHNkcE1MaW5lSW5kZXggKyAxID4gbWVkaWFTZWN0aW9uc0luT2ZmZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJlamVjdGVkKSB7XG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAnYXBwbGljYXRpb24nKSB7XG4gICAgICAgICAgaWYgKHRyYW5zY2VpdmVyLnByb3RvY29sID09PSAnRFRMUy9TQ1RQJykgeyAvLyBsZWdhY3kgZm10XG4gICAgICAgICAgICBzZHAgKz0gJ209YXBwbGljYXRpb24gMCBEVExTL1NDVFAgNTAwMFxcclxcbic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNkcCArPSAnbT1hcHBsaWNhdGlvbiAwICcgKyB0cmFuc2NlaXZlci5wcm90b2NvbCArXG4gICAgICAgICAgICAgICAgJyB3ZWJydGMtZGF0YWNoYW5uZWxcXHJcXG4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgc2RwICs9ICdtPWF1ZGlvIDAgVURQL1RMUy9SVFAvU0FWUEYgMFxcclxcbicgK1xuICAgICAgICAgICAgICAnYT1ydHBtYXA6MCBQQ01VLzgwMDBcXHJcXG4nO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICBzZHAgKz0gJ209dmlkZW8gMCBVRFAvVExTL1JUUC9TQVZQRiAxMjBcXHJcXG4nICtcbiAgICAgICAgICAgICAgJ2E9cnRwbWFwOjEyMCBWUDgvOTAwMDBcXHJcXG4nO1xuICAgICAgICB9XG4gICAgICAgIHNkcCArPSAnYz1JTiBJUDQgMC4wLjAuMFxcclxcbicgK1xuICAgICAgICAgICAgJ2E9aW5hY3RpdmVcXHJcXG4nICtcbiAgICAgICAgICAgICdhPW1pZDonICsgdHJhbnNjZWl2ZXIubWlkICsgJ1xcclxcbic7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gRklYTUU6IGxvb2sgYXQgZGlyZWN0aW9uLlxuICAgICAgaWYgKHRyYW5zY2VpdmVyLnN0cmVhbSkge1xuICAgICAgICB2YXIgbG9jYWxUcmFjaztcbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICBsb2NhbFRyYWNrID0gdHJhbnNjZWl2ZXIuc3RyZWFtLmdldEF1ZGlvVHJhY2tzKClbMF07XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIGxvY2FsVHJhY2sgPSB0cmFuc2NlaXZlci5zdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxUcmFjaykge1xuICAgICAgICAgIC8vIGFkZCBSVFhcbiAgICAgICAgICBpZiAoZWRnZVZlcnNpb24gPj0gMTUwMTkgJiYgdHJhbnNjZWl2ZXIua2luZCA9PT0gJ3ZpZGVvJyAmJlxuICAgICAgICAgICAgICAhdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4ID0ge1xuICAgICAgICAgICAgICBzc3JjOiB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgKyAxXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDYWxjdWxhdGUgaW50ZXJzZWN0aW9uIG9mIGNhcGFiaWxpdGllcy5cbiAgICAgIHZhciBjb21tb25DYXBhYmlsaXRpZXMgPSBnZXRDb21tb25DYXBhYmlsaXRpZXMoXG4gICAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzKTtcblxuICAgICAgdmFyIGhhc1J0eCA9IGNvbW1vbkNhcGFiaWxpdGllcy5jb2RlY3MuZmlsdGVyKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgcmV0dXJuIGMubmFtZS50b0xvd2VyQ2FzZSgpID09PSAncnR4JztcbiAgICAgIH0pLmxlbmd0aDtcbiAgICAgIGlmICghaGFzUnR4ICYmIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgICAgIGRlbGV0ZSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eDtcbiAgICAgIH1cblxuICAgICAgc2RwICs9IHdyaXRlTWVkaWFTZWN0aW9uKHRyYW5zY2VpdmVyLCBjb21tb25DYXBhYmlsaXRpZXMsXG4gICAgICAgICAgJ2Fuc3dlcicsIHRyYW5zY2VpdmVyLnN0cmVhbSwgcGMuX2R0bHNSb2xlKTtcbiAgICAgIGlmICh0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycyAmJlxuICAgICAgICAgIHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzLnJlZHVjZWRTaXplKSB7XG4gICAgICAgIHNkcCArPSAnYT1ydGNwLXJzaXplXFxyXFxuJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBkZXNjID0gbmV3IHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24oe1xuICAgICAgdHlwZTogJ2Fuc3dlcicsXG4gICAgICBzZHA6IHNkcFxuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVzYyk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGNhbmRpZGF0ZSkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgdmFyIHNlY3Rpb25zO1xuICAgIGlmIChjYW5kaWRhdGUgJiYgIShjYW5kaWRhdGUuc2RwTUxpbmVJbmRleCAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIGNhbmRpZGF0ZS5zZHBNaWQpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignc2RwTUxpbmVJbmRleCBvciBzZHBNaWQgcmVxdWlyZWQnKSk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogbmVlZHMgdG8gZ28gaW50byBvcHMgcXVldWUuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKCFwYy5fcmVtb3RlRGVzY3JpcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAgICdDYW4gbm90IGFkZCBJQ0UgY2FuZGlkYXRlIHdpdGhvdXQgYSByZW1vdGUgZGVzY3JpcHRpb24nKSk7XG4gICAgICB9IGVsc2UgaWYgKCFjYW5kaWRhdGUgfHwgY2FuZGlkYXRlLmNhbmRpZGF0ZSA9PT0gJycpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYy50cmFuc2NlaXZlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBpZiAocGMudHJhbnNjZWl2ZXJzW2pdLnJlamVjdGVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGMudHJhbnNjZWl2ZXJzW2pdLmljZVRyYW5zcG9ydC5hZGRSZW1vdGVDYW5kaWRhdGUoe30pO1xuICAgICAgICAgIHNlY3Rpb25zID0gU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyhwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgICBzZWN0aW9uc1tqXSArPSAnYT1lbmQtb2YtY2FuZGlkYXRlc1xcclxcbic7XG4gICAgICAgICAgcGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCA9XG4gICAgICAgICAgICAgIFNEUFV0aWxzLmdldERlc2NyaXB0aW9uKHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHApICtcbiAgICAgICAgICAgICAgc2VjdGlvbnMuam9pbignJyk7XG4gICAgICAgICAgaWYgKHBjLnVzaW5nQnVuZGxlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzZHBNTGluZUluZGV4ID0gY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXg7XG4gICAgICAgIGlmIChjYW5kaWRhdGUuc2RwTWlkKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYy50cmFuc2NlaXZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwYy50cmFuc2NlaXZlcnNbaV0ubWlkID09PSBjYW5kaWRhdGUuc2RwTWlkKSB7XG4gICAgICAgICAgICAgIHNkcE1MaW5lSW5kZXggPSBpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRyYW5zY2VpdmVyID0gcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdO1xuICAgICAgICBpZiAodHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgICBpZiAodHJhbnNjZWl2ZXIucmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjYW5kID0gT2JqZWN0LmtleXMoY2FuZGlkYXRlLmNhbmRpZGF0ZSkubGVuZ3RoID4gMCA/XG4gICAgICAgICAgICAgIFNEUFV0aWxzLnBhcnNlQ2FuZGlkYXRlKGNhbmRpZGF0ZS5jYW5kaWRhdGUpIDoge307XG4gICAgICAgICAgLy8gSWdub3JlIENocm9tZSdzIGludmFsaWQgY2FuZGlkYXRlcyBzaW5jZSBFZGdlIGRvZXMgbm90IGxpa2UgdGhlbS5cbiAgICAgICAgICBpZiAoY2FuZC5wcm90b2NvbCA9PT0gJ3RjcCcgJiYgKGNhbmQucG9ydCA9PT0gMCB8fCBjYW5kLnBvcnQgPT09IDkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZ25vcmUgUlRDUCBjYW5kaWRhdGVzLCB3ZSBhc3N1bWUgUlRDUC1NVVguXG4gICAgICAgICAgaWYgKGNhbmQuY29tcG9uZW50ICYmIGNhbmQuY29tcG9uZW50ICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3aGVuIHVzaW5nIGJ1bmRsZSwgYXZvaWQgYWRkaW5nIGNhbmRpZGF0ZXMgdG8gdGhlIHdyb25nXG4gICAgICAgICAgLy8gaWNlIHRyYW5zcG9ydC4gQW5kIGF2b2lkIGFkZGluZyBjYW5kaWRhdGVzIGFkZGVkIGluIHRoZSBTRFAuXG4gICAgICAgICAgaWYgKHNkcE1MaW5lSW5kZXggPT09IDAgfHwgKHNkcE1MaW5lSW5kZXggPiAwICYmXG4gICAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCAhPT0gcGMudHJhbnNjZWl2ZXJzWzBdLmljZVRyYW5zcG9ydCkpIHtcbiAgICAgICAgICAgIGlmICghbWF5YmVBZGRDYW5kaWRhdGUodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LCBjYW5kKSkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG1ha2VFcnJvcignT3BlcmF0aW9uRXJyb3InLFxuICAgICAgICAgICAgICAgICAgJ0NhbiBub3QgYWRkIElDRSBjYW5kaWRhdGUnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdXBkYXRlIHRoZSByZW1vdGVEZXNjcmlwdGlvbi5cbiAgICAgICAgICB2YXIgY2FuZGlkYXRlU3RyaW5nID0gY2FuZGlkYXRlLmNhbmRpZGF0ZS50cmltKCk7XG4gICAgICAgICAgaWYgKGNhbmRpZGF0ZVN0cmluZy5pbmRleE9mKCdhPScpID09PSAwKSB7XG4gICAgICAgICAgICBjYW5kaWRhdGVTdHJpbmcgPSBjYW5kaWRhdGVTdHJpbmcuc3Vic3RyKDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWN0aW9ucyA9IFNEUFV0aWxzLmdldE1lZGlhU2VjdGlvbnMocGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCk7XG4gICAgICAgICAgc2VjdGlvbnNbc2RwTUxpbmVJbmRleF0gKz0gJ2E9JyArXG4gICAgICAgICAgICAgIChjYW5kLnR5cGUgPyBjYW5kaWRhdGVTdHJpbmcgOiAnZW5kLW9mLWNhbmRpZGF0ZXMnKVxuICAgICAgICAgICAgICArICdcXHJcXG4nO1xuICAgICAgICAgIHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHAgPVxuICAgICAgICAgICAgICBTRFBVdGlscy5nZXREZXNjcmlwdGlvbihwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwKSArXG4gICAgICAgICAgICAgIHNlY3Rpb25zLmpvaW4oJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZWplY3QobWFrZUVycm9yKCdPcGVyYXRpb25FcnJvcicsXG4gICAgICAgICAgICAgICdDYW4gbm90IGFkZCBJQ0UgY2FuZGlkYXRlJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICBpZiAoc2VsZWN0b3IgJiYgc2VsZWN0b3IgaW5zdGFuY2VvZiB3aW5kb3cuTWVkaWFTdHJlYW1UcmFjaykge1xuICAgICAgdmFyIHNlbmRlck9yUmVjZWl2ZXIgPSBudWxsO1xuICAgICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIudHJhY2sgPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgc2VuZGVyT3JSZWNlaXZlciA9IHRyYW5zY2VpdmVyLnJ0cFNlbmRlcjtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlciAmJlxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIudHJhY2sgPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgc2VuZGVyT3JSZWNlaXZlciA9IHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghc2VuZGVyT3JSZWNlaXZlcikge1xuICAgICAgICB0aHJvdyBtYWtlRXJyb3IoJ0ludmFsaWRBY2Nlc3NFcnJvcicsICdJbnZhbGlkIHNlbGVjdG9yLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbmRlck9yUmVjZWl2ZXIuZ2V0U3RhdHMoKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZXMgPSBbXTtcbiAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICBbJ3J0cFNlbmRlcicsICdydHBSZWNlaXZlcicsICdpY2VHYXRoZXJlcicsICdpY2VUcmFuc3BvcnQnLFxuICAgICAgICAgICdkdGxzVHJhbnNwb3J0J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2NlaXZlclttZXRob2RdKSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2godHJhbnNjZWl2ZXJbbWV0aG9kXS5nZXRTdGF0cygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYWxsU3RhdHMpIHtcbiAgICAgIHZhciByZXN1bHRzID0gbmV3IE1hcCgpO1xuICAgICAgYWxsU3RhdHMuZm9yRWFjaChmdW5jdGlvbihzdGF0cykge1xuICAgICAgICBzdGF0cy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXQpIHtcbiAgICAgICAgICByZXN1bHRzLnNldChzdGF0LmlkLCBzdGF0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIGZpeCBsb3ctbGV2ZWwgc3RhdCBuYW1lcyBhbmQgcmV0dXJuIE1hcCBpbnN0ZWFkIG9mIG9iamVjdC5cbiAgdmFyIG9ydGNPYmplY3RzID0gWydSVENSdHBTZW5kZXInLCAnUlRDUnRwUmVjZWl2ZXInLCAnUlRDSWNlR2F0aGVyZXInLFxuICAgICdSVENJY2VUcmFuc3BvcnQnLCAnUlRDRHRsc1RyYW5zcG9ydCddO1xuICBvcnRjT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKG9ydGNPYmplY3ROYW1lKSB7XG4gICAgdmFyIG9iaiA9IHdpbmRvd1tvcnRjT2JqZWN0TmFtZV07XG4gICAgaWYgKG9iaiAmJiBvYmoucHJvdG90eXBlICYmIG9iai5wcm90b3R5cGUuZ2V0U3RhdHMpIHtcbiAgICAgIHZhciBuYXRpdmVHZXRzdGF0cyA9IG9iai5wcm90b3R5cGUuZ2V0U3RhdHM7XG4gICAgICBvYmoucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVHZXRzdGF0cy5hcHBseSh0aGlzKVxuICAgICAgICAudGhlbihmdW5jdGlvbihuYXRpdmVTdGF0cykge1xuICAgICAgICAgIHZhciBtYXBTdGF0cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhuYXRpdmVTdGF0cykuZm9yRWFjaChmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgbmF0aXZlU3RhdHNbaWRdLnR5cGUgPSBmaXhTdGF0c1R5cGUobmF0aXZlU3RhdHNbaWRdKTtcbiAgICAgICAgICAgIG1hcFN0YXRzLnNldChpZCwgbmF0aXZlU3RhdHNbaWRdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbWFwU3RhdHM7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGxlZ2FjeSBjYWxsYmFjayBzaGltcy4gU2hvdWxkIGJlIG1vdmVkIHRvIGFkYXB0ZXIuanMgc29tZSBkYXlzLlxuICB2YXIgbWV0aG9kcyA9IFsnY3JlYXRlT2ZmZXInLCAnY3JlYXRlQW5zd2VyJ107XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB2YXIgbmF0aXZlTWV0aG9kID0gUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHsgLy8gbGVnYWN5XG4gICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgW2FyZ3VtZW50c1syXV0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhcmdzWzBdLmFwcGx5KG51bGwsIFtkZXNjcmlwdGlvbl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3NbMV0uYXBwbHkobnVsbCwgW2Vycm9yXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KTtcblxuICBtZXRob2RzID0gWydzZXRMb2NhbERlc2NyaXB0aW9uJywgJ3NldFJlbW90ZURlc2NyaXB0aW9uJywgJ2FkZEljZUNhbmRpZGF0ZSddO1xuICBtZXRob2RzLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdmFyIG5hdGl2ZU1ldGhvZCA9IFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdO1xuICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgIHR5cGVvZiBhcmdzWzJdID09PSAnZnVuY3Rpb24nKSB7IC8vIGxlZ2FjeVxuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhcmdzWzFdLmFwcGx5KG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3NbMl0uYXBwbHkobnVsbCwgW2Vycm9yXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBnZXRTdGF0cyBpcyBzcGVjaWFsLiBJdCBkb2Vzbid0IGhhdmUgYSBzcGVjIGxlZ2FjeSBtZXRob2QgeWV0IHdlIHN1cHBvcnRcbiAgLy8gZ2V0U3RhdHMoc29tZXRoaW5nLCBjYikgd2l0aG91dCBlcnJvciBjYWxsYmFja3MuXG4gIFsnZ2V0U3RhdHMnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHZhciBuYXRpdmVNZXRob2QgPSBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXJnc1sxXS5hcHBseShudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiBSVENQZWVyQ29ubmVjdGlvbjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ydGNwZWVyY29ubmVjdGlvbi1zaGltL3J0Y3BlZXJjb25uZWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzU3XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuIC8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpIHtcbiAgY29uc3QgbmF2aWdhdG9yID0gd2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3I7XG5cbiAgY29uc3Qgc2hpbUVycm9yXyA9IGZ1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZToge1Blcm1pc3Npb25EZW5pZWRFcnJvcjogJ05vdEFsbG93ZWRFcnJvcid9W2UubmFtZV0gfHwgZS5uYW1lLFxuICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgY29uc3RyYWludDogZS5jb25zdHJhaW50LFxuICAgICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBnZXRVc2VyTWVkaWEgZXJyb3Igc2hpbS5cbiAgY29uc3Qgb3JpZ0dldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLlxuICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuIG9yaWdHZXRVc2VyTWVkaWEoYykuY2F0Y2goZSA9PiBQcm9taXNlLnJlamVjdChzaGltRXJyb3JfKGUpKSk7XG4gIH07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9nZXR1c2VybWVkaWEuanNcbi8vIG1vZHVsZSBpZCA9IDEzNThcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIGFkYXB0ZXIuanMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuIC8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldERpc3BsYXlNZWRpYSh3aW5kb3cpIHtcbiAgaWYgKCEoJ2dldERpc3BsYXlNZWRpYScgaW4gd2luZG93Lm5hdmlnYXRvcikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCEod2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJlxuICAgICdnZXREaXNwbGF5TWVkaWEnIGluIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldERpc3BsYXlNZWRpYSA9XG4gICAgd2luZG93Lm5hdmlnYXRvci5nZXREaXNwbGF5TWVkaWEuYmluZCh3aW5kb3cubmF2aWdhdG9yKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2dldGRpc3BsYXltZWRpYS5qc1xuLy8gbW9kdWxlIGlkID0gMTM1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5leHBvcnQge3NoaW1HZXRVc2VyTWVkaWF9IGZyb20gJy4vZ2V0dXNlcm1lZGlhJztcbmV4cG9ydCB7c2hpbUdldERpc3BsYXlNZWRpYX0gZnJvbSAnLi9nZXRkaXNwbGF5bWVkaWEnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbU9uVHJhY2sod2luZG93KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDVHJhY2tFdmVudCAmJlxuICAgICAgKCdyZWNlaXZlcicgaW4gd2luZG93LlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlKSAmJlxuICAgICAgISgndHJhbnNjZWl2ZXInIGluIHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlLCAndHJhbnNjZWl2ZXInLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB7cmVjZWl2ZXI6IHRoaXMucmVjZWl2ZXJ9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUGVlckNvbm5lY3Rpb24od2luZG93KSB7XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fFxuICAgICAgISh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gfHwgd2luZG93Lm1velJUQ1BlZXJDb25uZWN0aW9uKSkge1xuICAgIHJldHVybjsgLy8gcHJvYmFibHkgbWVkaWEucGVlcmNvbm5lY3Rpb24uZW5hYmxlZD1mYWxzZSBpbiBhYm91dDpjb25maWdcbiAgfVxuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiB3aW5kb3cubW96UlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICAvLyB2ZXJ5IGJhc2ljIHN1cHBvcnQgZm9yIG9sZCB2ZXJzaW9ucy5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPSB3aW5kb3cubW96UlRDUGVlckNvbm5lY3Rpb247XG4gIH1cblxuICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDUzKSB7XG4gICAgLy8gc2hpbSBhd2F5IG5lZWQgZm9yIG9ic29sZXRlIFJUQ0ljZUNhbmRpZGF0ZS9SVENTZXNzaW9uRGVzY3JpcHRpb24uXG4gICAgWydzZXRMb2NhbERlc2NyaXB0aW9uJywgJ3NldFJlbW90ZURlc2NyaXB0aW9uJywgJ2FkZEljZUNhbmRpZGF0ZSddXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgIGNvbnN0IG5hdGl2ZU1ldGhvZCA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICAgICAgICBjb25zdCBtZXRob2RPYmogPSB7W21ldGhvZF0oKSB7XG4gICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBuZXcgKChtZXRob2QgPT09ICdhZGRJY2VDYW5kaWRhdGUnKSA/XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA6XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbikoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9fTtcbiAgICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBtZXRob2RPYmpbbWV0aG9kXTtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvLyBzdXBwb3J0IGZvciBhZGRJY2VDYW5kaWRhdGUobnVsbCBvciB1bmRlZmluZWQpXG4gIC8vIGFzIHdlbGwgYXMgaWdub3Jpbmcge3NkcE1pZCwgY2FuZGlkYXRlOiBcIlwifVxuICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDY4KSB7XG4gICAgY29uc3QgbmF0aXZlQWRkSWNlQ2FuZGlkYXRlID1cbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPVxuICAgIGZ1bmN0aW9uIGFkZEljZUNhbmRpZGF0ZSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHNbMV0pIHtcbiAgICAgICAgICBhcmd1bWVudHNbMV0uYXBwbHkobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgLy8gRmlyZWZveCA2OCsgZW1pdHMgYW5kIHByb2Nlc3NlcyB7Y2FuZGlkYXRlOiBcIlwiLCAuLi59LCBpZ25vcmVcbiAgICAgIC8vIGluIG9sZGVyIHZlcnNpb25zLlxuICAgICAgaWYgKGFyZ3VtZW50c1swXSAmJiBhcmd1bWVudHNbMF0uY2FuZGlkYXRlID09PSAnJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlQWRkSWNlQ2FuZGlkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IG1vZGVyblN0YXRzVHlwZXMgPSB7XG4gICAgaW5ib3VuZHJ0cDogJ2luYm91bmQtcnRwJyxcbiAgICBvdXRib3VuZHJ0cDogJ291dGJvdW5kLXJ0cCcsXG4gICAgY2FuZGlkYXRlcGFpcjogJ2NhbmRpZGF0ZS1wYWlyJyxcbiAgICBsb2NhbGNhbmRpZGF0ZTogJ2xvY2FsLWNhbmRpZGF0ZScsXG4gICAgcmVtb3RlY2FuZGlkYXRlOiAncmVtb3RlLWNhbmRpZGF0ZSdcbiAgfTtcblxuICBjb25zdCBuYXRpdmVHZXRTdGF0cyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICBjb25zdCBbc2VsZWN0b3IsIG9uU3VjYywgb25FcnJdID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuYXRpdmVHZXRTdGF0cy5hcHBseSh0aGlzLCBbc2VsZWN0b3IgfHwgbnVsbF0pXG4gICAgICAudGhlbihzdGF0cyA9PiB7XG4gICAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNTMgJiYgIW9uU3VjYykge1xuICAgICAgICAgIC8vIFNoaW0gb25seSBwcm9taXNlIGdldFN0YXRzIHdpdGggc3BlYy1oeXBoZW5zIGluIHR5cGUgbmFtZXNcbiAgICAgICAgICAvLyBMZWF2ZSBjYWxsYmFjayB2ZXJzaW9uIGFsb25lOyBtaXNjIG9sZCB1c2VzIG9mIGZvckVhY2ggYmVmb3JlIE1hcFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGF0cy5mb3JFYWNoKHN0YXQgPT4ge1xuICAgICAgICAgICAgICBzdGF0LnR5cGUgPSBtb2Rlcm5TdGF0c1R5cGVzW3N0YXQudHlwZV0gfHwgc3RhdC50eXBlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUubmFtZSAhPT0gJ1R5cGVFcnJvcicpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF2b2lkIFR5cGVFcnJvcjogXCJ0eXBlXCIgaXMgcmVhZC1vbmx5LCBpbiBvbGQgdmVyc2lvbnMuIDM0LTQzaXNoXG4gICAgICAgICAgICBzdGF0cy5mb3JFYWNoKChzdGF0LCBpKSA9PiB7XG4gICAgICAgICAgICAgIHN0YXRzLnNldChpLCBPYmplY3QuYXNzaWduKHt9LCBzdGF0LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogbW9kZXJuU3RhdHNUeXBlc1tzdGF0LnR5cGVdIHx8IHN0YXQudHlwZVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRzO1xuICAgICAgfSlcbiAgICAgIC50aGVuKG9uU3VjYywgb25FcnIpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVNlbmRlckdldFN0YXRzKHdpbmRvdykge1xuICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgIHdpbmRvdy5SVENSdHBTZW5kZXIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh3aW5kb3cuUlRDUnRwU2VuZGVyICYmICdnZXRTdGF0cycgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb3JpZ0dldFNlbmRlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM7XG4gIGlmIChvcmlnR2V0U2VuZGVycykge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycyA9IGZ1bmN0aW9uIGdldFNlbmRlcnMoKSB7XG4gICAgICBjb25zdCBzZW5kZXJzID0gb3JpZ0dldFNlbmRlcnMuYXBwbHkodGhpcywgW10pO1xuICAgICAgc2VuZGVycy5mb3JFYWNoKHNlbmRlciA9PiBzZW5kZXIuX3BjID0gdGhpcyk7XG4gICAgICByZXR1cm4gc2VuZGVycztcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgaWYgKG9yaWdBZGRUcmFjaykge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2sgPSBmdW5jdGlvbiBhZGRUcmFjaygpIHtcbiAgICAgIGNvbnN0IHNlbmRlciA9IG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgc2VuZGVyLl9wYyA9IHRoaXM7XG4gICAgICByZXR1cm4gc2VuZGVyO1xuICAgIH07XG4gIH1cbiAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICByZXR1cm4gdGhpcy50cmFjayA/IHRoaXMuX3BjLmdldFN0YXRzKHRoaXMudHJhY2spIDpcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKG5ldyBNYXAoKSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUmVjZWl2ZXJHZXRTdGF0cyh3aW5kb3cpIHtcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAod2luZG93LlJUQ1J0cFNlbmRlciAmJiAnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBSZWNlaXZlci5wcm90b3R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb3JpZ0dldFJlY2VpdmVycyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzO1xuICBpZiAob3JpZ0dldFJlY2VpdmVycykge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzID0gZnVuY3Rpb24gZ2V0UmVjZWl2ZXJzKCkge1xuICAgICAgY29uc3QgcmVjZWl2ZXJzID0gb3JpZ0dldFJlY2VpdmVycy5hcHBseSh0aGlzLCBbXSk7XG4gICAgICByZWNlaXZlcnMuZm9yRWFjaChyZWNlaXZlciA9PiByZWNlaXZlci5fcGMgPSB0aGlzKTtcbiAgICAgIHJldHVybiByZWNlaXZlcnM7XG4gICAgfTtcbiAgfVxuICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICd0cmFjaycsIGUgPT4ge1xuICAgIGUucmVjZWl2ZXIuX3BjID0gZS5zcmNFbGVtZW50O1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgd2luZG93LlJUQ1J0cFJlY2VpdmVyLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uIGdldFN0YXRzKCkge1xuICAgIHJldHVybiB0aGlzLl9wYy5nZXRTdGF0cyh0aGlzLnRyYWNrKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1SZW1vdmVTdHJlYW0od2luZG93KSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uIHx8XG4gICAgICAncmVtb3ZlU3RyZWFtJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID1cbiAgICBmdW5jdGlvbiByZW1vdmVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICB1dGlscy5kZXByZWNhdGVkKCdyZW1vdmVTdHJlYW0nLCAncmVtb3ZlVHJhY2snKTtcbiAgICAgIHRoaXMuZ2V0U2VuZGVycygpLmZvckVhY2goc2VuZGVyID0+IHtcbiAgICAgICAgaWYgKHNlbmRlci50cmFjayAmJiBzdHJlYW0uZ2V0VHJhY2tzKCkuaW5jbHVkZXMoc2VuZGVyLnRyYWNrKSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlVHJhY2soc2VuZGVyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1SVENEYXRhQ2hhbm5lbCh3aW5kb3cpIHtcbiAgLy8gcmVuYW1lIERhdGFDaGFubmVsIHRvIFJUQ0RhdGFDaGFubmVsIChuYXRpdmUgZml4IGluIEZGNjApOlxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTczODUxXG4gIGlmICh3aW5kb3cuRGF0YUNoYW5uZWwgJiYgIXdpbmRvdy5SVENEYXRhQ2hhbm5lbCkge1xuICAgIHdpbmRvdy5SVENEYXRhQ2hhbm5lbCA9IHdpbmRvdy5EYXRhQ2hhbm5lbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUFkZFRyYW5zY2VpdmVyKHdpbmRvdykge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2VicnRjSGFja3MvYWRhcHRlci9pc3N1ZXMvOTk4I2lzc3VlY29tbWVudC01MTY5MjE2NDdcbiAgLy8gRmlyZWZveCBpZ25vcmVzIHRoZSBpbml0IHNlbmRFbmNvZGluZ3Mgb3B0aW9ucyBwYXNzZWQgdG8gYWRkVHJhbnNjZWl2ZXJcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM5NjkxOFxuICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9yaWdBZGRUcmFuc2NlaXZlciA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhbnNjZWl2ZXI7XG4gIGlmIChvcmlnQWRkVHJhbnNjZWl2ZXIpIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYW5zY2VpdmVyID1cbiAgICAgIGZ1bmN0aW9uIGFkZFRyYW5zY2VpdmVyKCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcyA9IFtdO1xuICAgICAgICBjb25zdCBpbml0UGFyYW1ldGVycyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgY29uc3Qgc2hvdWxkUGVyZm9ybUNoZWNrID0gaW5pdFBhcmFtZXRlcnMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VuZEVuY29kaW5ncycgaW4gaW5pdFBhcmFtZXRlcnM7XG4gICAgICAgIGlmIChzaG91bGRQZXJmb3JtQ2hlY2spIHtcbiAgICAgICAgICAvLyBJZiBzZW5kRW5jb2RpbmdzIHBhcmFtcyBhcmUgcHJvdmlkZWQsIHZhbGlkYXRlIGdyYW1tYXJcbiAgICAgICAgICBpbml0UGFyYW1ldGVycy5zZW5kRW5jb2RpbmdzLmZvckVhY2goKGVuY29kaW5nUGFyYW0pID0+IHtcbiAgICAgICAgICAgIGlmICgncmlkJyBpbiBlbmNvZGluZ1BhcmFtKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJpZFJlZ2V4ID0gL15bYS16MC05XXswLDE2fSQvaTtcbiAgICAgICAgICAgICAgaWYgKCFyaWRSZWdleC50ZXN0KGVuY29kaW5nUGFyYW0ucmlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgUklEIHZhbHVlIHByb3ZpZGVkLicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ3NjYWxlUmVzb2x1dGlvbkRvd25CeScgaW4gZW5jb2RpbmdQYXJhbSkge1xuICAgICAgICAgICAgICBpZiAoIShwYXJzZUZsb2F0KGVuY29kaW5nUGFyYW0uc2NhbGVSZXNvbHV0aW9uRG93bkJ5KSA+PSAxLjApKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NjYWxlX3Jlc29sdXRpb25fZG93bl9ieSBtdXN0IGJlID49IDEuMCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ21heEZyYW1lcmF0ZScgaW4gZW5jb2RpbmdQYXJhbSkge1xuICAgICAgICAgICAgICBpZiAoIShwYXJzZUZsb2F0KGVuY29kaW5nUGFyYW0ubWF4RnJhbWVyYXRlKSA+PSAwKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdtYXhfZnJhbWVyYXRlIG11c3QgYmUgPj0gMC4wJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IG9yaWdBZGRUcmFuc2NlaXZlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoc2hvdWxkUGVyZm9ybUNoZWNrKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGluaXQgb3B0aW9ucyB3ZXJlIGFwcGxpZWQuIElmIG5vdCB3ZSBkbyB0aGlzIGluIGFuXG4gICAgICAgICAgLy8gYXN5bmNocm9ub3VzIHdheSBhbmQgc2F2ZSB0aGUgcHJvbWlzZSByZWZlcmVuY2UgaW4gYSBnbG9iYWwgb2JqZWN0LlxuICAgICAgICAgIC8vIFRoaXMgaXMgYW4gdWdseSBoYWNrLCBidXQgYXQgdGhlIHNhbWUgdGltZSBpcyB3YXkgbW9yZSByb2J1c3QgdGhhblxuICAgICAgICAgIC8vIGNoZWNraW5nIHRoZSBzZW5kZXIgcGFyYW1ldGVycyBiZWZvcmUgYW5kIGFmdGVyIHRoZSBjcmVhdGVPZmZlclxuICAgICAgICAgIC8vIEFsc28gbm90ZSB0aGF0IGFmdGVyIHRoZSBjcmVhdGVvZmZlciB3ZSBhcmUgbm90IDEwMCUgc3VyZSB0aGF0XG4gICAgICAgICAgLy8gdGhlIHBhcmFtcyB3ZXJlIGFzeW5jaHJvbm91c2x5IGFwcGxpZWQgc28gd2UgbWlnaHQgbWlzcyB0aGVcbiAgICAgICAgICAvLyBvcHBvcnR1bml0eSB0byByZWNyZWF0ZSBvZmZlci5cbiAgICAgICAgICBjb25zdCB7c2VuZGVyfSA9IHRyYW5zY2VpdmVyO1xuICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHNlbmRlci5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgICAgaWYgKCEoJ2VuY29kaW5ncycgaW4gcGFyYW1zKSB8fFxuICAgICAgICAgICAgICAvLyBBdm9pZCBiZWluZyBmb29sZWQgYnkgcGF0Y2hlZCBnZXRQYXJhbWV0ZXJzKCkgYmVsb3cuXG4gICAgICAgICAgICAgIChwYXJhbXMuZW5jb2RpbmdzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zLmVuY29kaW5nc1swXSkubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgcGFyYW1zLmVuY29kaW5ncyA9IGluaXRQYXJhbWV0ZXJzLnNlbmRFbmNvZGluZ3M7XG4gICAgICAgICAgICBzZW5kZXIuc2VuZEVuY29kaW5ncyA9IGluaXRQYXJhbWV0ZXJzLnNlbmRFbmNvZGluZ3M7XG4gICAgICAgICAgICB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcy5wdXNoKHNlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtcylcbiAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzZW5kZXIuc2VuZEVuY29kaW5ncztcbiAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzZW5kZXIuc2VuZEVuY29kaW5ncztcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc2NlaXZlcjtcbiAgICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXRQYXJhbWV0ZXJzKHdpbmRvdykge1xuICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUnRwU2VuZGVyKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvcmlnR2V0UGFyYW1ldGVycyA9IHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlLmdldFBhcmFtZXRlcnM7XG4gIGlmIChvcmlnR2V0UGFyYW1ldGVycykge1xuICAgIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlLmdldFBhcmFtZXRlcnMgPVxuICAgICAgZnVuY3Rpb24gZ2V0UGFyYW1ldGVycygpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gb3JpZ0dldFBhcmFtZXRlcnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKCEoJ2VuY29kaW5ncycgaW4gcGFyYW1zKSkge1xuICAgICAgICAgIHBhcmFtcy5lbmNvZGluZ3MgPSBbXS5jb25jYXQodGhpcy5zZW5kRW5jb2RpbmdzIHx8IFt7fV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQ3JlYXRlT2ZmZXIod2luZG93KSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJydGNIYWNrcy9hZGFwdGVyL2lzc3Vlcy85OTgjaXNzdWVjb21tZW50LTUxNjkyMTY0N1xuICAvLyBGaXJlZm94IGlnbm9yZXMgdGhlIGluaXQgc2VuZEVuY29kaW5ncyBvcHRpb25zIHBhc3NlZCB0byBhZGRUcmFuc2NlaXZlclxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzk2OTE4XG4gIGlmICghKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb3JpZ0NyZWF0ZU9mZmVyID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVPZmZlcjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVPZmZlciA9IGZ1bmN0aW9uIGNyZWF0ZU9mZmVyKCkge1xuICAgIGlmICh0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcyAmJiB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcylcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIG9yaWdDcmVhdGVPZmZlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSlcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMgPSBbXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb3JpZ0NyZWF0ZU9mZmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQ3JlYXRlQW5zd2VyKHdpbmRvdykge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2VicnRjSGFja3MvYWRhcHRlci9pc3N1ZXMvOTk4I2lzc3VlY29tbWVudC01MTY5MjE2NDdcbiAgLy8gRmlyZWZveCBpZ25vcmVzIHRoZSBpbml0IHNlbmRFbmNvZGluZ3Mgb3B0aW9ucyBwYXNzZWQgdG8gYWRkVHJhbnNjZWl2ZXJcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM5NjkxOFxuICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9yaWdDcmVhdGVBbnN3ZXIgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUFuc3dlcjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXIgPSBmdW5jdGlvbiBjcmVhdGVBbnN3ZXIoKSB7XG4gICAgaWYgKHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzICYmIHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gb3JpZ0NyZWF0ZUFuc3dlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSlcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMgPSBbXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb3JpZ0NyZWF0ZUFuc3dlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZmlyZWZveF9zaGltLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzYwXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXRVc2VyTWVkaWEod2luZG93KSB7XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcbiAgY29uc3QgTWVkaWFTdHJlYW1UcmFjayA9IHdpbmRvdyAmJiB3aW5kb3cuTWVkaWFTdHJlYW1UcmFjaztcblxuICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcikge1xuICAgIC8vIFJlcGxhY2UgRmlyZWZveCA0NCsncyBkZXByZWNhdGlvbiB3YXJuaW5nIHdpdGggdW5wcmVmaXhlZCB2ZXJzaW9uLlxuICAgIHV0aWxzLmRlcHJlY2F0ZWQoJ25hdmlnYXRvci5nZXRVc2VyTWVkaWEnLFxuICAgICAgICAnbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEnKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cykudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICB9O1xuXG4gIGlmICghKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPiA1NSAmJlxuICAgICAgJ2F1dG9HYWluQ29udHJvbCcgaW4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cygpKSkge1xuICAgIGNvbnN0IHJlbWFwID0gZnVuY3Rpb24ob2JqLCBhLCBiKSB7XG4gICAgICBpZiAoYSBpbiBvYmogJiYgIShiIGluIG9iaikpIHtcbiAgICAgICAgb2JqW2JdID0gb2JqW2FdO1xuICAgICAgICBkZWxldGUgb2JqW2FdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBuYXRpdmVHZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5cbiAgICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGMuYXVkaW8gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKTtcbiAgICAgICAgcmVtYXAoYy5hdWRpbywgJ2F1dG9HYWluQ29udHJvbCcsICdtb3pBdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgICAgcmVtYXAoYy5hdWRpbywgJ25vaXNlU3VwcHJlc3Npb24nLCAnbW96Tm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZUdldFVzZXJNZWRpYShjKTtcbiAgICB9O1xuXG4gICAgaWYgKE1lZGlhU3RyZWFtVHJhY2sgJiYgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuZ2V0U2V0dGluZ3MpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZUdldFNldHRpbmdzID0gTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuZ2V0U2V0dGluZ3M7XG4gICAgICBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5nZXRTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBvYmogPSBuYXRpdmVHZXRTZXR0aW5ncy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICByZW1hcChvYmosICdtb3pBdXRvR2FpbkNvbnRyb2wnLCAnYXV0b0dhaW5Db250cm9sJyk7XG4gICAgICAgIHJlbWFwKG9iaiwgJ21vek5vaXNlU3VwcHJlc3Npb24nLCAnbm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoTWVkaWFTdHJlYW1UcmFjayAmJiBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5hcHBseUNvbnN0cmFpbnRzKSB7XG4gICAgICBjb25zdCBuYXRpdmVBcHBseUNvbnN0cmFpbnRzID1cbiAgICAgICAgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuYXBwbHlDb25zdHJhaW50cztcbiAgICAgIE1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLmFwcGx5Q29uc3RyYWludHMgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmICh0aGlzLmtpbmQgPT09ICdhdWRpbycgJiYgdHlwZW9mIGMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgYyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYykpO1xuICAgICAgICAgIHJlbWFwKGMsICdhdXRvR2FpbkNvbnRyb2wnLCAnbW96QXV0b0dhaW5Db250cm9sJyk7XG4gICAgICAgICAgcmVtYXAoYywgJ25vaXNlU3VwcHJlc3Npb24nLCAnbW96Tm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYXRpdmVBcHBseUNvbnN0cmFpbnRzLmFwcGx5KHRoaXMsIFtjXSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZ2V0dXNlcm1lZGlhLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzYxXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBhZGFwdGVyLmpzIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldERpc3BsYXlNZWRpYSh3aW5kb3csIHByZWZlcnJlZE1lZGlhU291cmNlKSB7XG4gIGlmICh3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJlxuICAgICdnZXREaXNwbGF5TWVkaWEnIGluIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSkge1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEgPVxuICAgIGZ1bmN0aW9uIGdldERpc3BsYXlNZWRpYShjb25zdHJhaW50cykge1xuICAgICAgaWYgKCEoY29uc3RyYWludHMgJiYgY29uc3RyYWludHMudmlkZW8pKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBET01FeGNlcHRpb24oJ2dldERpc3BsYXlNZWRpYSB3aXRob3V0IHZpZGVvICcgK1xuICAgICAgICAgICAgJ2NvbnN0cmFpbnRzIGlzIHVuZGVmaW5lZCcpO1xuICAgICAgICBlcnIubmFtZSA9ICdOb3RGb3VuZEVycm9yJztcbiAgICAgICAgLy8gZnJvbSBodHRwczovL2hleWNhbS5naXRodWIuaW8vd2ViaWRsLyNpZGwtRE9NRXhjZXB0aW9uLWVycm9yLW5hbWVzXG4gICAgICAgIGVyci5jb2RlID0gODtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICBpZiAoY29uc3RyYWludHMudmlkZW8gPT09IHRydWUpIHtcbiAgICAgICAgY29uc3RyYWludHMudmlkZW8gPSB7bWVkaWFTb3VyY2U6IHByZWZlcnJlZE1lZGlhU291cmNlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLm1lZGlhU291cmNlID0gcHJlZmVycmVkTWVkaWFTb3VyY2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKTtcbiAgICB9O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZ2V0ZGlzcGxheW1lZGlhLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzYyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUxvY2FsU3RyZWFtc0FQSSh3aW5kb3cpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICdvYmplY3QnIHx8ICF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCEoJ2dldExvY2FsU3RyZWFtcycgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldExvY2FsU3RyZWFtcyA9XG4gICAgICBmdW5jdGlvbiBnZXRMb2NhbFN0cmVhbXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zKSB7XG4gICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsU3RyZWFtcztcbiAgICAgIH07XG4gIH1cbiAgaWYgKCEoJ2FkZFN0cmVhbScgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICBjb25zdCBfYWRkVHJhY2sgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24gYWRkU3RyZWFtKHN0cmVhbSkge1xuICAgICAgaWYgKCF0aGlzLl9sb2NhbFN0cmVhbXMpIHtcbiAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zID0gW107XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuX2xvY2FsU3RyZWFtcy5pbmNsdWRlcyhzdHJlYW0pKSB7XG4gICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gICAgICB9XG4gICAgICAvLyBUcnkgdG8gZW11bGF0ZSBDaHJvbWUncyBiZWhhdmlvdXIgb2YgYWRkaW5nIGluIGF1ZGlvLXZpZGVvIG9yZGVyLlxuICAgICAgLy8gU2FmYXJpIG9yZGVycyBieSB0cmFjayBpZC5cbiAgICAgIHN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmZvckVhY2godHJhY2sgPT4gX2FkZFRyYWNrLmNhbGwodGhpcywgdHJhY2ssXG4gICAgICAgIHN0cmVhbSkpO1xuICAgICAgc3RyZWFtLmdldFZpZGVvVHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiBfYWRkVHJhY2suY2FsbCh0aGlzLCB0cmFjayxcbiAgICAgICAgc3RyZWFtKSk7XG4gICAgfTtcblxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2sgPVxuICAgICAgZnVuY3Rpb24gYWRkVHJhY2sodHJhY2ssIC4uLnN0cmVhbXMpIHtcbiAgICAgICAgaWYgKHN0cmVhbXMpIHtcbiAgICAgICAgICBzdHJlYW1zLmZvckVhY2goKHN0cmVhbSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9sb2NhbFN0cmVhbXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zID0gW3N0cmVhbV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9sb2NhbFN0cmVhbXMuaW5jbHVkZXMoc3RyZWFtKSkge1xuICAgICAgICAgICAgICB0aGlzLl9sb2NhbFN0cmVhbXMucHVzaChzdHJlYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfYWRkVHJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gIH1cbiAgaWYgKCEoJ3JlbW92ZVN0cmVhbScgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgICBmdW5jdGlvbiByZW1vdmVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zKSB7XG4gICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9sb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBjb25zdCB0cmFja3MgPSBzdHJlYW0uZ2V0VHJhY2tzKCk7XG4gICAgICAgIHRoaXMuZ2V0U2VuZGVycygpLmZvckVhY2goc2VuZGVyID0+IHtcbiAgICAgICAgICBpZiAodHJhY2tzLmluY2x1ZGVzKHNlbmRlci50cmFjaykpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVHJhY2soc2VuZGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVJlbW90ZVN0cmVhbXNBUEkod2luZG93KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKCdnZXRSZW1vdGVTdHJlYW1zJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVtb3RlU3RyZWFtcyA9XG4gICAgICBmdW5jdGlvbiBnZXRSZW1vdGVTdHJlYW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3RlU3RyZWFtcyA/IHRoaXMuX3JlbW90ZVN0cmVhbXMgOiBbXTtcbiAgICAgIH07XG4gIH1cbiAgaWYgKCEoJ29uYWRkc3RyZWFtJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAnb25hZGRzdHJlYW0nLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbmFkZHN0cmVhbTtcbiAgICAgIH0sXG4gICAgICBzZXQoZikge1xuICAgICAgICBpZiAodGhpcy5fb25hZGRzdHJlYW0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FkZHN0cmVhbScsIHRoaXMuX29uYWRkc3RyZWFtKTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb25hZGRzdHJlYW1wb2x5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHN0cmVhbScsIHRoaXMuX29uYWRkc3RyZWFtID0gZik7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbmFkZHN0cmVhbXBvbHkgPSAoZSkgPT4ge1xuICAgICAgICAgIGUuc3RyZWFtcy5mb3JFYWNoKHN0cmVhbSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3JlbW90ZVN0cmVhbXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcmVtb3RlU3RyZWFtcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbW90ZVN0cmVhbXMuaW5jbHVkZXMoc3RyZWFtKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KCdhZGRzdHJlYW0nKTtcbiAgICAgICAgICAgIGV2ZW50LnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb24gPVxuICAgICAgZnVuY3Rpb24gc2V0UmVtb3RlRGVzY3JpcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IHBjID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9vbmFkZHN0cmVhbXBvbHkpIHtcbiAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb25hZGRzdHJlYW1wb2x5ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5zdHJlYW1zLmZvckVhY2goc3RyZWFtID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFwYy5fcmVtb3RlU3RyZWFtcykge1xuICAgICAgICAgICAgICAgIHBjLl9yZW1vdGVTdHJlYW1zID0gW107XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHBjLl9yZW1vdGVTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBjLl9yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ2FkZHN0cmVhbScpO1xuICAgICAgICAgICAgICBldmVudC5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgICAgICAgIHBjLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbi5hcHBseShwYywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1DYWxsYmFja3NBUEkod2luZG93KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHByb3RvdHlwZSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU7XG4gIGNvbnN0IG9yaWdDcmVhdGVPZmZlciA9IHByb3RvdHlwZS5jcmVhdGVPZmZlcjtcbiAgY29uc3Qgb3JpZ0NyZWF0ZUFuc3dlciA9IHByb3RvdHlwZS5jcmVhdGVBbnN3ZXI7XG4gIGNvbnN0IHNldExvY2FsRGVzY3JpcHRpb24gPSBwcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbjtcbiAgY29uc3Qgc2V0UmVtb3RlRGVzY3JpcHRpb24gPSBwcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb247XG4gIGNvbnN0IGFkZEljZUNhbmRpZGF0ZSA9IHByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7XG5cbiAgcHJvdG90eXBlLmNyZWF0ZU9mZmVyID1cbiAgICBmdW5jdGlvbiBjcmVhdGVPZmZlcihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IChhcmd1bWVudHMubGVuZ3RoID49IDIpID8gYXJndW1lbnRzWzJdIDogYXJndW1lbnRzWzBdO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG9yaWdDcmVhdGVPZmZlci5hcHBseSh0aGlzLCBbb3B0aW9uc10pO1xuICAgICAgaWYgKCFmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgICBwcm9taXNlLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG5cbiAgcHJvdG90eXBlLmNyZWF0ZUFuc3dlciA9XG4gICAgZnVuY3Rpb24gY3JlYXRlQW5zd2VyKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gKGFyZ3VtZW50cy5sZW5ndGggPj0gMikgPyBhcmd1bWVudHNbMl0gOiBhcmd1bWVudHNbMF07XG4gICAgICBjb25zdCBwcm9taXNlID0gb3JpZ0NyZWF0ZUFuc3dlci5hcHBseSh0aGlzLCBbb3B0aW9uc10pO1xuICAgICAgaWYgKCFmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgICBwcm9taXNlLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG5cbiAgbGV0IHdpdGhDYWxsYmFjayA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgIGNvbnN0IHByb21pc2UgPSBzZXRMb2NhbERlc2NyaXB0aW9uLmFwcGx5KHRoaXMsIFtkZXNjcmlwdGlvbl0pO1xuICAgIGlmICghZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgcHJvbWlzZS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG4gIHByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uID0gd2l0aENhbGxiYWNrO1xuXG4gIHdpdGhDYWxsYmFjayA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgIGNvbnN0IHByb21pc2UgPSBzZXRSZW1vdGVEZXNjcmlwdGlvbi5hcHBseSh0aGlzLCBbZGVzY3JpcHRpb25dKTtcbiAgICBpZiAoIWZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHByb21pc2UudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjayk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuICBwcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb24gPSB3aXRoQ2FsbGJhY2s7XG5cbiAgd2l0aENhbGxiYWNrID0gZnVuY3Rpb24oY2FuZGlkYXRlLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgIGNvbnN0IHByb21pc2UgPSBhZGRJY2VDYW5kaWRhdGUuYXBwbHkodGhpcywgW2NhbmRpZGF0ZV0pO1xuICAgIGlmICghZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgcHJvbWlzZS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG4gIHByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPSB3aXRoQ2FsbGJhY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0VXNlck1lZGlhKHdpbmRvdykge1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcblxuICBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIC8vIHNoaW0gbm90IG5lZWRlZCBpbiBTYWZhcmkgMTIuMVxuICAgIGNvbnN0IG1lZGlhRGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXM7XG4gICAgY29uc3QgX2dldFVzZXJNZWRpYSA9IG1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuYmluZChtZWRpYURldmljZXMpO1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gKGNvbnN0cmFpbnRzKSA9PiB7XG4gICAgICByZXR1cm4gX2dldFVzZXJNZWRpYShzaGltQ29uc3RyYWludHMoY29uc3RyYWludHMpKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbiBnZXRVc2VyTWVkaWEoY29uc3RyYWludHMsIGNiLCBlcnJjYikge1xuICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpXG4gICAgICAudGhlbihjYiwgZXJyY2IpO1xuICAgIH0uYmluZChuYXZpZ2F0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQ29uc3RyYWludHMoY29uc3RyYWludHMpIHtcbiAgaWYgKGNvbnN0cmFpbnRzICYmIGNvbnN0cmFpbnRzLnZpZGVvICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxcbiAgICAgIGNvbnN0cmFpbnRzLFxuICAgICAge3ZpZGVvOiB1dGlscy5jb21wYWN0T2JqZWN0KGNvbnN0cmFpbnRzLnZpZGVvKX1cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNvbnN0cmFpbnRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVJUQ0ljZVNlcnZlclVybHMod2luZG93KSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIG1pZ3JhdGUgZnJvbSBub24tc3BlYyBSVENJY2VTZXJ2ZXIudXJsIHRvIFJUQ0ljZVNlcnZlci51cmxzXG4gIGNvbnN0IE9yaWdQZWVyQ29ubmVjdGlvbiA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID1cbiAgICBmdW5jdGlvbiBSVENQZWVyQ29ubmVjdGlvbihwY0NvbmZpZywgcGNDb25zdHJhaW50cykge1xuICAgICAgaWYgKHBjQ29uZmlnICYmIHBjQ29uZmlnLmljZVNlcnZlcnMpIHtcbiAgICAgICAgY29uc3QgbmV3SWNlU2VydmVycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBjQ29uZmlnLmljZVNlcnZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgc2VydmVyID0gcGNDb25maWcuaWNlU2VydmVyc1tpXTtcbiAgICAgICAgICBpZiAoIXNlcnZlci5oYXNPd25Qcm9wZXJ0eSgndXJscycpICYmXG4gICAgICAgICAgICAgIHNlcnZlci5oYXNPd25Qcm9wZXJ0eSgndXJsJykpIHtcbiAgICAgICAgICAgIHV0aWxzLmRlcHJlY2F0ZWQoJ1JUQ0ljZVNlcnZlci51cmwnLCAnUlRDSWNlU2VydmVyLnVybHMnKTtcbiAgICAgICAgICAgIHNlcnZlciA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2VydmVyKSk7XG4gICAgICAgICAgICBzZXJ2ZXIudXJscyA9IHNlcnZlci51cmw7XG4gICAgICAgICAgICBkZWxldGUgc2VydmVyLnVybDtcbiAgICAgICAgICAgIG5ld0ljZVNlcnZlcnMucHVzaChzZXJ2ZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdJY2VTZXJ2ZXJzLnB1c2gocGNDb25maWcuaWNlU2VydmVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBjQ29uZmlnLmljZVNlcnZlcnMgPSBuZXdJY2VTZXJ2ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBPcmlnUGVlckNvbm5lY3Rpb24ocGNDb25maWcsIHBjQ29uc3RyYWludHMpO1xuICAgIH07XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUgPSBPcmlnUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlO1xuICAvLyB3cmFwIHN0YXRpYyBtZXRob2RzLiBDdXJyZW50bHkganVzdCBnZW5lcmF0ZUNlcnRpZmljYXRlLlxuICBpZiAoJ2dlbmVyYXRlQ2VydGlmaWNhdGUnIGluIE9yaWdQZWVyQ29ubmVjdGlvbikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24sICdnZW5lcmF0ZUNlcnRpZmljYXRlJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gT3JpZ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1UcmFja0V2ZW50VHJhbnNjZWl2ZXIod2luZG93KSB7XG4gIC8vIEFkZCBldmVudC50cmFuc2NlaXZlciBtZW1iZXIgb3ZlciBkZXByZWNhdGVkIGV2ZW50LnJlY2VpdmVyXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDVHJhY2tFdmVudCAmJlxuICAgICAgJ3JlY2VpdmVyJyBpbiB3aW5kb3cuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUgJiZcbiAgICAgICEoJ3RyYW5zY2VpdmVyJyBpbiB3aW5kb3cuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSwgJ3RyYW5zY2VpdmVyJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4ge3JlY2VpdmVyOiB0aGlzLnJlY2VpdmVyfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUNyZWF0ZU9mZmVyTGVnYWN5KHdpbmRvdykge1xuICBjb25zdCBvcmlnQ3JlYXRlT2ZmZXIgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZU9mZmVyO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZU9mZmVyID1cbiAgICBmdW5jdGlvbiBjcmVhdGVPZmZlcihvZmZlck9wdGlvbnMpIHtcbiAgICAgIGlmIChvZmZlck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBzdXBwb3J0IGJpdCB2YWx1ZXNcbiAgICAgICAgICBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9XG4gICAgICAgICAgICAhIW9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF1ZGlvVHJhbnNjZWl2ZXIgPSB0aGlzLmdldFRyYW5zY2VpdmVycygpLmZpbmQodHJhbnNjZWl2ZXIgPT5cbiAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjay5raW5kID09PSAnYXVkaW8nKTtcbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvID09PSBmYWxzZSAmJiBhdWRpb1RyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgaWYgKGF1ZGlvVHJhbnNjZWl2ZXIuZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnKSB7XG4gICAgICAgICAgICBpZiAoYXVkaW9UcmFuc2NlaXZlci5zZXREaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgYXVkaW9UcmFuc2NlaXZlci5zZXREaXJlY3Rpb24oJ3NlbmRvbmx5Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhdWRpb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9ICdzZW5kb25seSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhdWRpb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3JlY3Zvbmx5Jykge1xuICAgICAgICAgICAgaWYgKGF1ZGlvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGF1ZGlvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdpbmFjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXVkaW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPSAnaW5hY3RpdmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgIWF1ZGlvVHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgICB0aGlzLmFkZFRyYW5zY2VpdmVyKCdhdWRpbycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBzdXBwb3J0IGJpdCB2YWx1ZXNcbiAgICAgICAgICBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyA9XG4gICAgICAgICAgICAhIW9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpZGVvVHJhbnNjZWl2ZXIgPSB0aGlzLmdldFRyYW5zY2VpdmVycygpLmZpbmQodHJhbnNjZWl2ZXIgPT5cbiAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjay5raW5kID09PSAndmlkZW8nKTtcbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvID09PSBmYWxzZSAmJiB2aWRlb1RyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgaWYgKHZpZGVvVHJhbnNjZWl2ZXIuZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnKSB7XG4gICAgICAgICAgICBpZiAodmlkZW9UcmFuc2NlaXZlci5zZXREaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgdmlkZW9UcmFuc2NlaXZlci5zZXREaXJlY3Rpb24oJ3NlbmRvbmx5Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2aWRlb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9ICdzZW5kb25seSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh2aWRlb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3JlY3Zvbmx5Jykge1xuICAgICAgICAgICAgaWYgKHZpZGVvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHZpZGVvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdpbmFjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmlkZW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPSAnaW5hY3RpdmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgIXZpZGVvVHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgICB0aGlzLmFkZFRyYW5zY2VpdmVyKCd2aWRlbycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ0NyZWF0ZU9mZmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1BdWRpb0NvbnRleHQod2luZG93KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCB3aW5kb3cuQXVkaW9Db250ZXh0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdpbmRvdy5BdWRpb0NvbnRleHQgPSB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL3NhZmFyaS9zYWZhcmlfc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gMTM2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNyBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgU0RQVXRpbHMgZnJvbSAnc2RwJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVJUQ0ljZUNhbmRpZGF0ZSh3aW5kb3cpIHtcbiAgLy8gZm91bmRhdGlvbiBpcyBhcmJpdHJhcmlseSBjaG9zZW4gYXMgYW4gaW5kaWNhdG9yIGZvciBmdWxsIHN1cHBvcnQgZm9yXG4gIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtcGMvI3J0Y2ljZWNhbmRpZGF0ZS1pbnRlcmZhY2VcbiAgaWYgKCF3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlIHx8ICh3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlICYmICdmb3VuZGF0aW9uJyBpblxuICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZS5wcm90b3R5cGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgTmF0aXZlUlRDSWNlQ2FuZGlkYXRlID0gd2luZG93LlJUQ0ljZUNhbmRpZGF0ZTtcbiAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uIFJUQ0ljZUNhbmRpZGF0ZShhcmdzKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBhPSB3aGljaCBzaG91bGRuJ3QgYmUgcGFydCBvZiB0aGUgY2FuZGlkYXRlIHN0cmluZy5cbiAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdvYmplY3QnICYmIGFyZ3MuY2FuZGlkYXRlICYmXG4gICAgICAgIGFyZ3MuY2FuZGlkYXRlLmluZGV4T2YoJ2E9JykgPT09IDApIHtcbiAgICAgIGFyZ3MgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFyZ3MpKTtcbiAgICAgIGFyZ3MuY2FuZGlkYXRlID0gYXJncy5jYW5kaWRhdGUuc3Vic3RyKDIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmNhbmRpZGF0ZSAmJiBhcmdzLmNhbmRpZGF0ZS5sZW5ndGgpIHtcbiAgICAgIC8vIEF1Z21lbnQgdGhlIG5hdGl2ZSBjYW5kaWRhdGUgd2l0aCB0aGUgcGFyc2VkIGZpZWxkcy5cbiAgICAgIGNvbnN0IG5hdGl2ZUNhbmRpZGF0ZSA9IG5ldyBOYXRpdmVSVENJY2VDYW5kaWRhdGUoYXJncyk7XG4gICAgICBjb25zdCBwYXJzZWRDYW5kaWRhdGUgPSBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShhcmdzLmNhbmRpZGF0ZSk7XG4gICAgICBjb25zdCBhdWdtZW50ZWRDYW5kaWRhdGUgPSBPYmplY3QuYXNzaWduKG5hdGl2ZUNhbmRpZGF0ZSxcbiAgICAgICAgICBwYXJzZWRDYW5kaWRhdGUpO1xuXG4gICAgICAvLyBBZGQgYSBzZXJpYWxpemVyIHRoYXQgZG9lcyBub3Qgc2VyaWFsaXplIHRoZSBleHRyYSBhdHRyaWJ1dGVzLlxuICAgICAgYXVnbWVudGVkQ2FuZGlkYXRlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjYW5kaWRhdGU6IGF1Z21lbnRlZENhbmRpZGF0ZS5jYW5kaWRhdGUsXG4gICAgICAgICAgc2RwTWlkOiBhdWdtZW50ZWRDYW5kaWRhdGUuc2RwTWlkLFxuICAgICAgICAgIHNkcE1MaW5lSW5kZXg6IGF1Z21lbnRlZENhbmRpZGF0ZS5zZHBNTGluZUluZGV4LFxuICAgICAgICAgIHVzZXJuYW1lRnJhZ21lbnQ6IGF1Z21lbnRlZENhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50LFxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIHJldHVybiBhdWdtZW50ZWRDYW5kaWRhdGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTmF0aXZlUlRDSWNlQ2FuZGlkYXRlKGFyZ3MpO1xuICB9O1xuICB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlLnByb3RvdHlwZSA9IE5hdGl2ZVJUQ0ljZUNhbmRpZGF0ZS5wcm90b3R5cGU7XG5cbiAgLy8gSG9vayB1cCB0aGUgYXVnbWVudGVkIGNhbmRpZGF0ZSBpbiBvbmljZWNhbmRpZGF0ZSBhbmRcbiAgLy8gYWRkRXZlbnRMaXN0ZW5lcignaWNlY2FuZGlkYXRlJywgLi4uKVxuICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICdpY2VjYW5kaWRhdGUnLCBlID0+IHtcbiAgICBpZiAoZS5jYW5kaWRhdGUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCAnY2FuZGlkYXRlJywge1xuICAgICAgICB2YWx1ZTogbmV3IHdpbmRvdy5SVENJY2VDYW5kaWRhdGUoZS5jYW5kaWRhdGUpLFxuICAgICAgICB3cml0YWJsZTogJ2ZhbHNlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1NYXhNZXNzYWdlU2l6ZSh3aW5kb3cpIHtcbiAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG5cbiAgaWYgKCEoJ3NjdHAnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdzY3RwJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX3NjdHAgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHRoaXMuX3NjdHA7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBzY3RwSW5EZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgaWYgKCFkZXNjcmlwdGlvbiB8fCAhZGVzY3JpcHRpb24uc2RwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhkZXNjcmlwdGlvbi5zZHApO1xuICAgIHNlY3Rpb25zLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHNlY3Rpb25zLnNvbWUobWVkaWFTZWN0aW9uID0+IHtcbiAgICAgIGNvbnN0IG1MaW5lID0gU0RQVXRpbHMucGFyc2VNTGluZShtZWRpYVNlY3Rpb24pO1xuICAgICAgcmV0dXJuIG1MaW5lICYmIG1MaW5lLmtpbmQgPT09ICdhcHBsaWNhdGlvbidcbiAgICAgICAgICAmJiBtTGluZS5wcm90b2NvbC5pbmRleE9mKCdTQ1RQJykgIT09IC0xO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGdldFJlbW90ZUZpcmVmb3hWZXJzaW9uID0gZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAvLyBUT0RPOiBJcyB0aGVyZSBhIGJldHRlciBzb2x1dGlvbiBmb3IgZGV0ZWN0aW5nIEZpcmVmb3g/XG4gICAgY29uc3QgbWF0Y2ggPSBkZXNjcmlwdGlvbi5zZHAubWF0Y2goL21vemlsbGEuLi5USElTX0lTX1NEUEFSVEEtKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsIHx8IG1hdGNoLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgY29uc3QgdmVyc2lvbiA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgLy8gVGVzdCBmb3IgTmFOICh5ZXMsIHRoaXMgaXMgdWdseSlcbiAgICByZXR1cm4gdmVyc2lvbiAhPT0gdmVyc2lvbiA/IC0xIDogdmVyc2lvbjtcbiAgfTtcblxuICBjb25zdCBnZXRDYW5TZW5kTWF4TWVzc2FnZVNpemUgPSBmdW5jdGlvbihyZW1vdGVJc0ZpcmVmb3gpIHtcbiAgICAvLyBFdmVyeSBpbXBsZW1lbnRhdGlvbiB3ZSBrbm93IGNhbiBzZW5kIGF0IGxlYXN0IDY0IEtpQi5cbiAgICAvLyBOb3RlOiBBbHRob3VnaCBDaHJvbWUgaXMgdGVjaG5pY2FsbHkgYWJsZSB0byBzZW5kIHVwIHRvIDI1NiBLaUIsIHRoZVxuICAgIC8vICAgICAgIGRhdGEgZG9lcyBub3QgcmVhY2ggdGhlIG90aGVyIHBlZXIgcmVsaWFibHkuXG4gICAgLy8gICAgICAgU2VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3Avd2VicnRjL2lzc3Vlcy9kZXRhaWw/aWQ9ODQxOVxuICAgIGxldCBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPSA2NTUzNjtcbiAgICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDU3KSB7XG4gICAgICAgIGlmIChyZW1vdGVJc0ZpcmVmb3ggPT09IC0xKSB7XG4gICAgICAgICAgLy8gRkYgPCA1NyB3aWxsIHNlbmQgaW4gMTYgS2lCIGNodW5rcyB1c2luZyB0aGUgZGVwcmVjYXRlZCBQUElEXG4gICAgICAgICAgLy8gZnJhZ21lbnRhdGlvbi5cbiAgICAgICAgICBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPSAxNjM4NDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBIb3dldmVyLCBvdGhlciBGRiAoYW5kIFJBV1JUQykgY2FuIHJlYXNzZW1ibGUgUFBJRC1mcmFnbWVudGVkXG4gICAgICAgICAgLy8gbWVzc2FnZXMuIFRodXMsIHN1cHBvcnRpbmcgfjIgR2lCIHdoZW4gc2VuZGluZy5cbiAgICAgICAgICBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPSAyMTQ3NDgzNjM3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA2MCkge1xuICAgICAgICAvLyBDdXJyZW50bHksIGFsbCBGRiA+PSA1NyB3aWxsIHJlc2V0IHRoZSByZW1vdGUgbWF4aW11bSBtZXNzYWdlIHNpemVcbiAgICAgICAgLy8gdG8gdGhlIGRlZmF1bHQgdmFsdWUgd2hlbiBhIGRhdGEgY2hhbm5lbCBpcyBjcmVhdGVkIGF0IGEgbGF0ZXJcbiAgICAgICAgLy8gc3RhZ2UuIDooXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQyNjgzMVxuICAgICAgICBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPVxuICAgICAgICAgIGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPT09IDU3ID8gNjU1MzUgOiA2NTUzNjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZGID49IDYwIHN1cHBvcnRzIHNlbmRpbmcgfjIgR2lCXG4gICAgICAgIGNhblNlbmRNYXhNZXNzYWdlU2l6ZSA9IDIxNDc0ODM2Mzc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW5TZW5kTWF4TWVzc2FnZVNpemU7XG4gIH07XG5cbiAgY29uc3QgZ2V0TWF4TWVzc2FnZVNpemUgPSBmdW5jdGlvbihkZXNjcmlwdGlvbiwgcmVtb3RlSXNGaXJlZm94KSB7XG4gICAgLy8gTm90ZTogNjU1MzYgYnl0ZXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUgZnJvbSB0aGUgU0RQIHNwZWMuIEFsc28sXG4gICAgLy8gICAgICAgZXZlcnkgaW1wbGVtZW50YXRpb24gd2Uga25vdyBzdXBwb3J0cyByZWNlaXZpbmcgNjU1MzYgYnl0ZXMuXG4gICAgbGV0IG1heE1lc3NhZ2VTaXplID0gNjU1MzY7XG5cbiAgICAvLyBGRiA1NyBoYXMgYSBzbGlnaHRseSBpbmNvcnJlY3QgZGVmYXVsdCByZW1vdGUgbWF4IG1lc3NhZ2Ugc2l6ZSwgc29cbiAgICAvLyB3ZSBuZWVkIHRvIGFkanVzdCBpdCBoZXJlIHRvIGF2b2lkIGEgZmFpbHVyZSB3aGVuIHNlbmRpbmcuXG4gICAgLy8gU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDI1Njk3XG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLmJyb3dzZXIgPT09ICdmaXJlZm94J1xuICAgICAgICAgJiYgYnJvd3NlckRldGFpbHMudmVyc2lvbiA9PT0gNTcpIHtcbiAgICAgIG1heE1lc3NhZ2VTaXplID0gNjU1MzU7XG4gICAgfVxuXG4gICAgY29uc3QgbWF0Y2ggPSBTRFBVdGlscy5tYXRjaFByZWZpeChkZXNjcmlwdGlvbi5zZHAsXG4gICAgICAnYT1tYXgtbWVzc2FnZS1zaXplOicpO1xuICAgIGlmIChtYXRjaC5sZW5ndGggPiAwKSB7XG4gICAgICBtYXhNZXNzYWdlU2l6ZSA9IHBhcnNlSW50KG1hdGNoWzBdLnN1YnN0cigxOSksIDEwKTtcbiAgICB9IGVsc2UgaWYgKGJyb3dzZXJEZXRhaWxzLmJyb3dzZXIgPT09ICdmaXJlZm94JyAmJlxuICAgICAgICAgICAgICAgIHJlbW90ZUlzRmlyZWZveCAhPT0gLTEpIHtcbiAgICAgIC8vIElmIHRoZSBtYXhpbXVtIG1lc3NhZ2Ugc2l6ZSBpcyBub3QgcHJlc2VudCBpbiB0aGUgcmVtb3RlIFNEUCBhbmRcbiAgICAgIC8vIGJvdGggbG9jYWwgYW5kIHJlbW90ZSBhcmUgRmlyZWZveCwgdGhlIHJlbW90ZSBwZWVyIGNhbiByZWNlaXZlXG4gICAgICAvLyB+MiBHaUIuXG4gICAgICBtYXhNZXNzYWdlU2l6ZSA9IDIxNDc0ODM2Mzc7XG4gICAgfVxuICAgIHJldHVybiBtYXhNZXNzYWdlU2l6ZTtcbiAgfTtcblxuICBjb25zdCBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24gPVxuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgZnVuY3Rpb24gc2V0UmVtb3RlRGVzY3JpcHRpb24oKSB7XG4gICAgICB0aGlzLl9zY3RwID0gbnVsbDtcbiAgICAgIC8vIENocm9tZSBkZWNpZGVkIHRvIG5vdCBleHBvc2UgLnNjdHAgaW4gcGxhbi1iIG1vZGUuXG4gICAgICAvLyBBcyB1c3VhbCwgYWRhcHRlci5qcyBoYXMgdG8gZG8gYW4gJ3VnbHkgd29yYWthcm91bmQnXG4gICAgICAvLyB0byBjb3ZlciB1cCB0aGUgbWVzcy5cbiAgICAgIGlmIChicm93c2VyRGV0YWlscy5icm93c2VyID09PSAnY2hyb21lJyAmJiBicm93c2VyRGV0YWlscy52ZXJzaW9uID49IDc2KSB7XG4gICAgICAgIGNvbnN0IHtzZHBTZW1hbnRpY3N9ID0gdGhpcy5nZXRDb25maWd1cmF0aW9uKCk7XG4gICAgICAgIGlmIChzZHBTZW1hbnRpY3MgPT09ICdwbGFuLWInKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY3RwJywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX3NjdHAgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHRoaXMuX3NjdHA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2N0cEluRGVzY3JpcHRpb24oYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgcmVtb3RlIGlzIEZGLlxuICAgICAgICBjb25zdCBpc0ZpcmVmb3ggPSBnZXRSZW1vdGVGaXJlZm94VmVyc2lvbihhcmd1bWVudHNbMF0pO1xuXG4gICAgICAgIC8vIEdldCB0aGUgbWF4aW11bSBtZXNzYWdlIHNpemUgdGhlIGxvY2FsIHBlZXIgaXMgY2FwYWJsZSBvZiBzZW5kaW5nXG4gICAgICAgIGNvbnN0IGNhblNlbmRNTVMgPSBnZXRDYW5TZW5kTWF4TWVzc2FnZVNpemUoaXNGaXJlZm94KTtcblxuICAgICAgICAvLyBHZXQgdGhlIG1heGltdW0gbWVzc2FnZSBzaXplIG9mIHRoZSByZW1vdGUgcGVlci5cbiAgICAgICAgY29uc3QgcmVtb3RlTU1TID0gZ2V0TWF4TWVzc2FnZVNpemUoYXJndW1lbnRzWzBdLCBpc0ZpcmVmb3gpO1xuXG4gICAgICAgIC8vIERldGVybWluZSBmaW5hbCBtYXhpbXVtIG1lc3NhZ2Ugc2l6ZVxuICAgICAgICBsZXQgbWF4TWVzc2FnZVNpemU7XG4gICAgICAgIGlmIChjYW5TZW5kTU1TID09PSAwICYmIHJlbW90ZU1NUyA9PT0gMCkge1xuICAgICAgICAgIG1heE1lc3NhZ2VTaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9IGVsc2UgaWYgKGNhblNlbmRNTVMgPT09IDAgfHwgcmVtb3RlTU1TID09PSAwKSB7XG4gICAgICAgICAgbWF4TWVzc2FnZVNpemUgPSBNYXRoLm1heChjYW5TZW5kTU1TLCByZW1vdGVNTVMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heE1lc3NhZ2VTaXplID0gTWF0aC5taW4oY2FuU2VuZE1NUywgcmVtb3RlTU1TKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIGR1bW15IFJUQ1NjdHBUcmFuc3BvcnQgb2JqZWN0IGFuZCB0aGUgJ21heE1lc3NhZ2VTaXplJ1xuICAgICAgICAvLyBhdHRyaWJ1dGUuXG4gICAgICAgIGNvbnN0IHNjdHAgPSB7fTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNjdHAsICdtYXhNZXNzYWdlU2l6ZScsIHtcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF4TWVzc2FnZVNpemU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc2N0cCA9IHNjdHA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpIHtcbiAgaWYgKCEod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICAnY3JlYXRlRGF0YUNoYW5uZWwnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gTm90ZTogQWx0aG91Z2ggRmlyZWZveCA+PSA1NyBoYXMgYSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIHRoZSBtYXhpbXVtXG4gIC8vICAgICAgIG1lc3NhZ2Ugc2l6ZSBjYW4gYmUgcmVzZXQgZm9yIGFsbCBkYXRhIGNoYW5uZWxzIGF0IGEgbGF0ZXIgc3RhZ2UuXG4gIC8vICAgICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQyNjgzMVxuXG4gIGZ1bmN0aW9uIHdyYXBEY1NlbmQoZGMsIHBjKSB7XG4gICAgY29uc3Qgb3JpZ0RhdGFDaGFubmVsU2VuZCA9IGRjLnNlbmQ7XG4gICAgZGMuc2VuZCA9IGZ1bmN0aW9uIHNlbmQoKSB7XG4gICAgICBjb25zdCBkYXRhID0gYXJndW1lbnRzWzBdO1xuICAgICAgY29uc3QgbGVuZ3RoID0gZGF0YS5sZW5ndGggfHwgZGF0YS5zaXplIHx8IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIGlmIChkYy5yZWFkeVN0YXRlID09PSAnb3BlbicgJiZcbiAgICAgICAgICBwYy5zY3RwICYmIGxlbmd0aCA+IHBjLnNjdHAubWF4TWVzc2FnZVNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWVzc2FnZSB0b28gbGFyZ2UgKGNhbiBzZW5kIGEgbWF4aW11bSBvZiAnICtcbiAgICAgICAgICBwYy5zY3RwLm1heE1lc3NhZ2VTaXplICsgJyBieXRlcyknKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcmlnRGF0YUNoYW5uZWxTZW5kLmFwcGx5KGRjLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgY29uc3Qgb3JpZ0NyZWF0ZURhdGFDaGFubmVsID1cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZURhdGFDaGFubmVsO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZURhdGFDaGFubmVsID1cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXRhQ2hhbm5lbCgpIHtcbiAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gb3JpZ0NyZWF0ZURhdGFDaGFubmVsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3cmFwRGNTZW5kKGRhdGFDaGFubmVsLCB0aGlzKTtcbiAgICAgIHJldHVybiBkYXRhQ2hhbm5lbDtcbiAgICB9O1xuICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICdkYXRhY2hhbm5lbCcsIGUgPT4ge1xuICAgIHdyYXBEY1NlbmQoZS5jaGFubmVsLCBlLnRhcmdldCk7XG4gICAgcmV0dXJuIGU7XG4gIH0pO1xufVxuXG5cbi8qIHNoaW1zIFJUQ0Nvbm5lY3Rpb25TdGF0ZSBieSBwcmV0ZW5kaW5nIGl0IGlzIHRoZSBzYW1lIGFzIGljZUNvbm5lY3Rpb25TdGF0ZS5cbiAqIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3Avd2VicnRjL2lzc3Vlcy9kZXRhaWw/aWQ9NjE0NSNjMTJcbiAqIGZvciB3aHkgdGhpcyBpcyBhIHZhbGlkIGhhY2sgaW4gQ2hyb21lLiBJbiBGaXJlZm94IGl0IGlzIHNsaWdodGx5IGluY29ycmVjdFxuICogc2luY2UgRFRMUyBmYWlsdXJlcyB3b3VsZCBiZSBoaWRkZW4uIFNlZVxuICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTI2NTgyN1xuICogZm9yIHRoZSBGaXJlZm94IHRyYWNraW5nIGJ1Zy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoaW1Db25uZWN0aW9uU3RhdGUod2luZG93KSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uIHx8XG4gICAgICAnY29ubmVjdGlvblN0YXRlJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHByb3RvID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnY29ubmVjdGlvblN0YXRlJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBsZXRlZDogJ2Nvbm5lY3RlZCcsXG4gICAgICAgIGNoZWNraW5nOiAnY29ubmVjdGluZydcbiAgICAgIH1bdGhpcy5pY2VDb25uZWN0aW9uU3RhdGVdIHx8IHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ29uY29ubmVjdGlvbnN0YXRlY2hhbmdlJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSB8fCBudWxsO1xuICAgIH0sXG4gICAgc2V0KGNiKSB7XG4gICAgICBpZiAodGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLFxuICAgICAgICAgICAgdGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2UpO1xuICAgICAgICBkZWxldGUgdGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2U7XG4gICAgICB9XG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLFxuICAgICAgICAgICAgdGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSBjYik7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcblxuICBbJ3NldExvY2FsRGVzY3JpcHRpb24nLCAnc2V0UmVtb3RlRGVzY3JpcHRpb24nXS5mb3JFYWNoKChtZXRob2QpID0+IHtcbiAgICBjb25zdCBvcmlnTWV0aG9kID0gcHJvdG9bbWV0aG9kXTtcbiAgICBwcm90b1ttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZXBvbHkpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbnN0YXRlY2hhbmdlcG9seSA9IGUgPT4ge1xuICAgICAgICAgIGNvbnN0IHBjID0gZS50YXJnZXQ7XG4gICAgICAgICAgaWYgKHBjLl9sYXN0Q29ubmVjdGlvblN0YXRlICE9PSBwYy5jb25uZWN0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHBjLl9sYXN0Q29ubmVjdGlvblN0YXRlID0gcGMuY29ubmVjdGlvblN0YXRlO1xuICAgICAgICAgICAgY29uc3QgbmV3RXZlbnQgPSBuZXcgRXZlbnQoJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGUpO1xuICAgICAgICAgICAgcGMuZGlzcGF0Y2hFdmVudChuZXdFdmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsXG4gICAgICAgICAgdGhpcy5fY29ubmVjdGlvbnN0YXRlY2hhbmdlcG9seSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ01ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxsb3dFeHRtYXBNaXhlZCh3aW5kb3cpIHtcbiAgLyogcmVtb3ZlIGE9ZXh0bWFwLWFsbG93LW1peGVkIGZvciB3ZWJydGMub3JnIDwgTTcxICovXG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ2Nocm9tZScgJiYgYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA3MSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ3NhZmFyaScgJiYgYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA2MDUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbmF0aXZlU1JEID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gIGZ1bmN0aW9uIHNldFJlbW90ZURlc2NyaXB0aW9uKGRlc2MpIHtcbiAgICBpZiAoZGVzYyAmJiBkZXNjLnNkcCAmJiBkZXNjLnNkcC5pbmRleE9mKCdcXG5hPWV4dG1hcC1hbGxvdy1taXhlZCcpICE9PSAtMSkge1xuICAgICAgZGVzYy5zZHAgPSBkZXNjLnNkcC5zcGxpdCgnXFxuJykuZmlsdGVyKChsaW5lKSA9PiB7XG4gICAgICAgIHJldHVybiBsaW5lLnRyaW0oKSAhPT0gJ2E9ZXh0bWFwLWFsbG93LW1peGVkJztcbiAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgICByZXR1cm4gbmF0aXZlU1JELmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY29tbW9uX3NoaW0uanNcbi8vIG1vZHVsZSBpZCA9IDEzNjRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJztcblxuaWYgKGlzQnJvd3Nlcikge1xuICAgIHZhciBRclJlYWRlciA9IHJlcXVpcmUoJ3JlYWN0LXFyLXJlYWRlcicpO1xufVxuIFxuXG5jbGFzcyBRUlJlYWRlciBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGU9e1xuICAgICAgICAgIHJlc3VsdDogJydcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgc3RhdGUgPSB7XG4gICAgcmVzdWx0OiAnTm8gcmVzdWx0J1xuICB9XG4gXG4gIGhhbmRsZVNjYW4gPSBkYXRhID0+IHtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVzdWx0OiBkYXRhfSk7XG4gICAgfVxufVxuXG5oYW5kbGVFcnJvciA9IGVyciA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpXG59XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgJiYgKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFFyUmVhZGVyXG4gICAgICAgICAgZGVsYXk9ezMwMH1cbiAgICAgICAgICBvbkVycm9yPXt0aGlzLmhhbmRsZUVycm9yfVxuICAgICAgICAgIG9uU2Nhbj17dGhpcy5oYW5kbGVTY2FufVxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMjUlJyB9fVxuICAgICAgICAvPlxuICAgICAgICA8cD57dGhpcy5zdGF0ZS5yZXN1bHR9PC9wPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFFSUmVhZGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbXBvbmVudHMvUVJSZWFkZXIuanMiLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxubGV0IGxvZ0Rpc2FibGVkXyA9IHRydWU7XG5sZXQgZGVwcmVjYXRpb25XYXJuaW5nc18gPSB0cnVlO1xuXG4vKipcbiAqIEV4dHJhY3QgYnJvd3NlciB2ZXJzaW9uIG91dCBvZiB0aGUgcHJvdmlkZWQgdXNlciBhZ2VudCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHshc3RyaW5nfSB1YXN0cmluZyB1c2VyQWdlbnQgc3RyaW5nLlxuICogQHBhcmFtIHshc3RyaW5nfSBleHByIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIGFzIG1hdGNoIGNyaXRlcmlhLlxuICogQHBhcmFtIHshbnVtYmVyfSBwb3MgcG9zaXRpb24gaW4gdGhlIHZlcnNpb24gc3RyaW5nIHRvIGJlIHJldHVybmVkLlxuICogQHJldHVybiB7IW51bWJlcn0gYnJvd3NlciB2ZXJzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFZlcnNpb24odWFzdHJpbmcsIGV4cHIsIHBvcykge1xuICBjb25zdCBtYXRjaCA9IHVhc3RyaW5nLm1hdGNoKGV4cHIpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID49IHBvcyAmJiBwYXJzZUludChtYXRjaFtwb3NdLCAxMCk7XG59XG5cbi8vIFdyYXBzIHRoZSBwZWVyY29ubmVjdGlvbiBldmVudCBldmVudE5hbWVUb1dyYXAgaW4gYSBmdW5jdGlvblxuLy8gd2hpY2ggcmV0dXJucyB0aGUgbW9kaWZpZWQgZXZlbnQgb2JqZWN0IChvciBmYWxzZSB0byBwcmV2ZW50XG4vLyB0aGUgZXZlbnQpLlxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KHdpbmRvdywgZXZlbnROYW1lVG9XcmFwLCB3cmFwcGVyKSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHByb3RvID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTtcbiAgY29uc3QgbmF0aXZlQWRkRXZlbnRMaXN0ZW5lciA9IHByb3RvLmFkZEV2ZW50TGlzdGVuZXI7XG4gIHByb3RvLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihuYXRpdmVFdmVudE5hbWUsIGNiKSB7XG4gICAgaWYgKG5hdGl2ZUV2ZW50TmFtZSAhPT0gZXZlbnROYW1lVG9XcmFwKSB7XG4gICAgICByZXR1cm4gbmF0aXZlQWRkRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBjb25zdCB3cmFwcGVkQ2FsbGJhY2sgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgbW9kaWZpZWRFdmVudCA9IHdyYXBwZXIoZSk7XG4gICAgICBpZiAobW9kaWZpZWRFdmVudCkge1xuICAgICAgICBpZiAoY2IuaGFuZGxlRXZlbnQpIHtcbiAgICAgICAgICBjYi5oYW5kbGVFdmVudChtb2RpZmllZEV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYihtb2RpZmllZEV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fZXZlbnRNYXAgPSB0aGlzLl9ldmVudE1hcCB8fCB7fTtcbiAgICBpZiAoIXRoaXMuX2V2ZW50TWFwW2V2ZW50TmFtZVRvV3JhcF0pIHtcbiAgICAgIHRoaXMuX2V2ZW50TWFwW2V2ZW50TmFtZVRvV3JhcF0gPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50TWFwW2V2ZW50TmFtZVRvV3JhcF0uc2V0KGNiLCB3cmFwcGVkQ2FsbGJhY2spO1xuICAgIHJldHVybiBuYXRpdmVBZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIFtuYXRpdmVFdmVudE5hbWUsXG4gICAgICB3cmFwcGVkQ2FsbGJhY2tdKTtcbiAgfTtcblxuICBjb25zdCBuYXRpdmVSZW1vdmVFdmVudExpc3RlbmVyID0gcHJvdG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbiAgcHJvdG8ucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKG5hdGl2ZUV2ZW50TmFtZSwgY2IpIHtcbiAgICBpZiAobmF0aXZlRXZlbnROYW1lICE9PSBldmVudE5hbWVUb1dyYXAgfHwgIXRoaXMuX2V2ZW50TWFwXG4gICAgICAgIHx8ICF0aGlzLl9ldmVudE1hcFtldmVudE5hbWVUb1dyYXBdKSB7XG4gICAgICByZXR1cm4gbmF0aXZlUmVtb3ZlRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2V2ZW50TWFwW2V2ZW50TmFtZVRvV3JhcF0uaGFzKGNiKSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZVJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgY29uc3QgdW53cmFwcGVkQ2IgPSB0aGlzLl9ldmVudE1hcFtldmVudE5hbWVUb1dyYXBdLmdldChjYik7XG4gICAgdGhpcy5fZXZlbnRNYXBbZXZlbnROYW1lVG9XcmFwXS5kZWxldGUoY2IpO1xuICAgIGlmICh0aGlzLl9ldmVudE1hcFtldmVudE5hbWVUb1dyYXBdLnNpemUgPT09IDApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudE1hcFtldmVudE5hbWVUb1dyYXBdO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fZXZlbnRNYXApLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50TWFwO1xuICAgIH1cbiAgICByZXR1cm4gbmF0aXZlUmVtb3ZlRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBbbmF0aXZlRXZlbnROYW1lLFxuICAgICAgdW53cmFwcGVkQ2JdKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdvbicgKyBldmVudE5hbWVUb1dyYXAsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpc1snX29uJyArIGV2ZW50TmFtZVRvV3JhcF07XG4gICAgfSxcbiAgICBzZXQoY2IpIHtcbiAgICAgIGlmICh0aGlzWydfb24nICsgZXZlbnROYW1lVG9XcmFwXSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lVG9XcmFwLFxuICAgICAgICAgICAgdGhpc1snX29uJyArIGV2ZW50TmFtZVRvV3JhcF0pO1xuICAgICAgICBkZWxldGUgdGhpc1snX29uJyArIGV2ZW50TmFtZVRvV3JhcF07XG4gICAgICB9XG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZVRvV3JhcCxcbiAgICAgICAgICAgIHRoaXNbJ19vbicgKyBldmVudE5hbWVUb1dyYXBdID0gY2IpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlTG9nKGJvb2wpIHtcbiAgaWYgKHR5cGVvZiBib29sICE9PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdBcmd1bWVudCB0eXBlOiAnICsgdHlwZW9mIGJvb2wgK1xuICAgICAgICAnLiBQbGVhc2UgdXNlIGEgYm9vbGVhbi4nKTtcbiAgfVxuICBsb2dEaXNhYmxlZF8gPSBib29sO1xuICByZXR1cm4gKGJvb2wpID8gJ2FkYXB0ZXIuanMgbG9nZ2luZyBkaXNhYmxlZCcgOlxuICAgICAgJ2FkYXB0ZXIuanMgbG9nZ2luZyBlbmFibGVkJztcbn1cblxuLyoqXG4gKiBEaXNhYmxlIG9yIGVuYWJsZSBkZXByZWNhdGlvbiB3YXJuaW5nc1xuICogQHBhcmFtIHshYm9vbGVhbn0gYm9vbCBzZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIHdhcm5pbmdzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZVdhcm5pbmdzKGJvb2wpIHtcbiAgaWYgKHR5cGVvZiBib29sICE9PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdBcmd1bWVudCB0eXBlOiAnICsgdHlwZW9mIGJvb2wgK1xuICAgICAgICAnLiBQbGVhc2UgdXNlIGEgYm9vbGVhbi4nKTtcbiAgfVxuICBkZXByZWNhdGlvbldhcm5pbmdzXyA9ICFib29sO1xuICByZXR1cm4gJ2FkYXB0ZXIuanMgZGVwcmVjYXRpb24gd2FybmluZ3MgJyArIChib29sID8gJ2Rpc2FibGVkJyA6ICdlbmFibGVkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2coKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChsb2dEaXNhYmxlZF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5sb2cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogU2hvd3MgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHN1Z2dlc3RpbmcgdGhlIG1vZGVybiBhbmQgc3BlYy1jb21wYXRpYmxlIEFQSS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlcHJlY2F0ZWQob2xkTWV0aG9kLCBuZXdNZXRob2QpIHtcbiAgaWYgKCFkZXByZWNhdGlvbldhcm5pbmdzXykge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zb2xlLndhcm4ob2xkTWV0aG9kICsgJyBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlICcgKyBuZXdNZXRob2QgK1xuICAgICAgJyBpbnN0ZWFkLicpO1xufVxuXG4vKipcbiAqIEJyb3dzZXIgZGV0ZWN0b3IuXG4gKlxuICogQHJldHVybiB7b2JqZWN0fSByZXN1bHQgY29udGFpbmluZyBicm93c2VyIGFuZCB2ZXJzaW9uXG4gKiAgICAgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEJyb3dzZXIod2luZG93KSB7XG4gIC8vIFJldHVybmVkIHJlc3VsdCBvYmplY3QuXG4gIGNvbnN0IHJlc3VsdCA9IHticm93c2VyOiBudWxsLCB2ZXJzaW9uOiBudWxsfTtcblxuICAvLyBGYWlsIGVhcmx5IGlmIGl0J3Mgbm90IGEgYnJvd3NlclxuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXdpbmRvdy5uYXZpZ2F0b3IpIHtcbiAgICByZXN1bHQuYnJvd3NlciA9ICdOb3QgYSBicm93c2VyLic7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGNvbnN0IHtuYXZpZ2F0b3J9ID0gd2luZG93O1xuXG4gIGlmIChuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhKSB7IC8vIEZpcmVmb3guXG4gICAgcmVzdWx0LmJyb3dzZXIgPSAnZmlyZWZveCc7XG4gICAgcmVzdWx0LnZlcnNpb24gPSBleHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAvRmlyZWZveFxcLyhcXGQrKVxcLi8sIDEpO1xuICB9IGVsc2UgaWYgKG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEgfHxcbiAgICAgICh3aW5kb3cuaXNTZWN1cmVDb250ZXh0ID09PSBmYWxzZSAmJiB3aW5kb3cud2Via2l0UlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgICAhd2luZG93LlJUQ0ljZUdhdGhlcmVyKSkge1xuICAgIC8vIENocm9tZSwgQ2hyb21pdW0sIFdlYnZpZXcsIE9wZXJhLlxuICAgIC8vIFZlcnNpb24gbWF0Y2hlcyBDaHJvbWUvV2ViUlRDIHZlcnNpb24uXG4gICAgLy8gQ2hyb21lIDc0IHJlbW92ZWQgd2Via2l0R2V0VXNlck1lZGlhIG9uIGh0dHAgYXMgd2VsbCBzbyB3ZSBuZWVkIHRoZVxuICAgIC8vIG1vcmUgY29tcGxpY2F0ZWQgZmFsbGJhY2sgdG8gd2Via2l0UlRDUGVlckNvbm5lY3Rpb24uXG4gICAgcmVzdWx0LmJyb3dzZXIgPSAnY2hyb21lJztcbiAgICByZXN1bHQudmVyc2lvbiA9IGV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIC9DaHJvbShlfGl1bSlcXC8oXFxkKylcXC4vLCAyKTtcbiAgfSBlbHNlIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmXG4gICAgICBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLihcXGQrKSQvKSkgeyAvLyBFZGdlLlxuICAgIHJlc3VsdC5icm93c2VyID0gJ2VkZ2UnO1xuICAgIHJlc3VsdC52ZXJzaW9uID0gZXh0cmFjdFZlcnNpb24obmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgL0VkZ2VcXC8oXFxkKykuKFxcZCspJC8sIDIpO1xuICB9IGVsc2UgaWYgKHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC8oXFxkKylcXC4vKSkgeyAvLyBTYWZhcmkuXG4gICAgcmVzdWx0LmJyb3dzZXIgPSAnc2FmYXJpJztcbiAgICByZXN1bHQudmVyc2lvbiA9IGV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIC9BcHBsZVdlYktpdFxcLyhcXGQrKVxcLi8sIDEpO1xuICAgIHJlc3VsdC5zdXBwb3J0c1VuaWZpZWRQbGFuID0gd2luZG93LlJUQ1J0cFRyYW5zY2VpdmVyICYmXG4gICAgICAgICdjdXJyZW50RGlyZWN0aW9uJyBpbiB3aW5kb3cuUlRDUnRwVHJhbnNjZWl2ZXIucHJvdG90eXBlO1xuICB9IGVsc2UgeyAvLyBEZWZhdWx0IGZhbGx0aHJvdWdoOiBub3Qgc3VwcG9ydGVkLlxuICAgIHJlc3VsdC5icm93c2VyID0gJ05vdCBhIHN1cHBvcnRlZCBicm93c2VyLic7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHNvbWV0aGluZyBpcyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHNvbWV0aGluZyB5b3Ugd2FudCB0byBjaGVjay5cbiAqIEByZXR1cm4gdHJ1ZSBpZiB2YWwgaXMgYW4gb2JqZWN0LCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG4vKipcbiAqIFJlbW92ZSBhbGwgZW1wdHkgb2JqZWN0cyBhbmQgdW5kZWZpbmVkIHZhbHVlc1xuICogZnJvbSBhIG5lc3RlZCBvYmplY3QgLS0gYW4gZW5oYW5jZWQgYW5kIHZhbmlsbGEgdmVyc2lvblxuICogb2YgTG9kYXNoJ3MgYGNvbXBhY3RgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGFjdE9iamVjdChkYXRhKSB7XG4gIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhkYXRhKS5yZWR1Y2UoZnVuY3Rpb24oYWNjdW11bGF0b3IsIGtleSkge1xuICAgIGNvbnN0IGlzT2JqID0gaXNPYmplY3QoZGF0YVtrZXldKTtcbiAgICBjb25zdCB2YWx1ZSA9IGlzT2JqID8gY29tcGFjdE9iamVjdChkYXRhW2tleV0pIDogZGF0YVtrZXldO1xuICAgIGNvbnN0IGlzRW1wdHlPYmplY3QgPSBpc09iaiAmJiAhT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aDtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCBpc0VtcHR5T2JqZWN0KSB7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjY3VtdWxhdG9yLCB7W2tleV06IHZhbHVlfSk7XG4gIH0sIHt9KTtcbn1cblxuLyogaXRlcmF0ZXMgdGhlIHN0YXRzIGdyYXBoIHJlY3Vyc2l2ZWx5LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhbGtTdGF0cyhzdGF0cywgYmFzZSwgcmVzdWx0U2V0KSB7XG4gIGlmICghYmFzZSB8fCByZXN1bHRTZXQuaGFzKGJhc2UuaWQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJlc3VsdFNldC5zZXQoYmFzZS5pZCwgYmFzZSk7XG4gIE9iamVjdC5rZXlzKGJhc2UpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgaWYgKG5hbWUuZW5kc1dpdGgoJ0lkJykpIHtcbiAgICAgIHdhbGtTdGF0cyhzdGF0cywgc3RhdHMuZ2V0KGJhc2VbbmFtZV0pLCByZXN1bHRTZXQpO1xuICAgIH0gZWxzZSBpZiAobmFtZS5lbmRzV2l0aCgnSWRzJykpIHtcbiAgICAgIGJhc2VbbmFtZV0uZm9yRWFjaChpZCA9PiB7XG4gICAgICAgIHdhbGtTdGF0cyhzdGF0cywgc3RhdHMuZ2V0KGlkKSwgcmVzdWx0U2V0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qIGZpbHRlciBnZXRTdGF0cyBmb3IgYSBzZW5kZXIvcmVjZWl2ZXIgdHJhY2suICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyU3RhdHMocmVzdWx0LCB0cmFjaywgb3V0Ym91bmQpIHtcbiAgY29uc3Qgc3RyZWFtU3RhdHNUeXBlID0gb3V0Ym91bmQgPyAnb3V0Ym91bmQtcnRwJyA6ICdpbmJvdW5kLXJ0cCc7XG4gIGNvbnN0IGZpbHRlcmVkUmVzdWx0ID0gbmV3IE1hcCgpO1xuICBpZiAodHJhY2sgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmlsdGVyZWRSZXN1bHQ7XG4gIH1cbiAgY29uc3QgdHJhY2tTdGF0cyA9IFtdO1xuICByZXN1bHQuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgaWYgKHZhbHVlLnR5cGUgPT09ICd0cmFjaycgJiZcbiAgICAgICAgdmFsdWUudHJhY2tJZGVudGlmaWVyID09PSB0cmFjay5pZCkge1xuICAgICAgdHJhY2tTdGF0cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICB0cmFja1N0YXRzLmZvckVhY2godHJhY2tTdGF0ID0+IHtcbiAgICByZXN1bHQuZm9yRWFjaChzdGF0cyA9PiB7XG4gICAgICBpZiAoc3RhdHMudHlwZSA9PT0gc3RyZWFtU3RhdHNUeXBlICYmIHN0YXRzLnRyYWNrSWQgPT09IHRyYWNrU3RhdC5pZCkge1xuICAgICAgICB3YWxrU3RhdHMocmVzdWx0LCBzdGF0cywgZmlsdGVyZWRSZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGZpbHRlcmVkUmVzdWx0O1xufVxuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvdXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDQyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gU0RQIGhlbHBlcnMuXG52YXIgU0RQVXRpbHMgPSB7fTtcblxuLy8gR2VuZXJhdGUgYW4gYWxwaGFudW1lcmljIGlkZW50aWZpZXIgZm9yIGNuYW1lIG9yIG1pZHMuXG4vLyBUT0RPOiB1c2UgVVVJRHMgaW5zdGVhZD8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamVkLzk4Mjg4M1xuU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTApO1xufTtcblxuLy8gVGhlIFJUQ1AgQ05BTUUgdXNlZCBieSBhbGwgcGVlcmNvbm5lY3Rpb25zIGZyb20gdGhlIHNhbWUgSlMuXG5TRFBVdGlscy5sb2NhbENOYW1lID0gU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyKCk7XG5cbi8vIFNwbGl0cyBTRFAgaW50byBsaW5lcywgZGVhbGluZyB3aXRoIGJvdGggQ1JMRiBhbmQgTEYuXG5TRFBVdGlscy5zcGxpdExpbmVzID0gZnVuY3Rpb24oYmxvYikge1xuICByZXR1cm4gYmxvYi50cmltKCkuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgcmV0dXJuIGxpbmUudHJpbSgpO1xuICB9KTtcbn07XG4vLyBTcGxpdHMgU0RQIGludG8gc2Vzc2lvbnBhcnQgYW5kIG1lZGlhc2VjdGlvbnMuIEVuc3VyZXMgQ1JMRi5cblNEUFV0aWxzLnNwbGl0U2VjdGlvbnMgPSBmdW5jdGlvbihibG9iKSB7XG4gIHZhciBwYXJ0cyA9IGJsb2Iuc3BsaXQoJ1xcbm09Jyk7XG4gIHJldHVybiBwYXJ0cy5tYXAoZnVuY3Rpb24ocGFydCwgaW5kZXgpIHtcbiAgICByZXR1cm4gKGluZGV4ID4gMCA/ICdtPScgKyBwYXJ0IDogcGFydCkudHJpbSgpICsgJ1xcclxcbic7XG4gIH0pO1xufTtcblxuLy8gcmV0dXJucyB0aGUgc2Vzc2lvbiBkZXNjcmlwdGlvbi5cblNEUFV0aWxzLmdldERlc2NyaXB0aW9uID0gZnVuY3Rpb24oYmxvYikge1xuICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGJsb2IpO1xuICByZXR1cm4gc2VjdGlvbnMgJiYgc2VjdGlvbnNbMF07XG59O1xuXG4vLyByZXR1cm5zIHRoZSBpbmRpdmlkdWFsIG1lZGlhIHNlY3Rpb25zLlxuU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgdmFyIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhibG9iKTtcbiAgc2VjdGlvbnMuc2hpZnQoKTtcbiAgcmV0dXJuIHNlY3Rpb25zO1xufTtcblxuLy8gUmV0dXJucyBsaW5lcyB0aGF0IHN0YXJ0IHdpdGggYSBjZXJ0YWluIHByZWZpeC5cblNEUFV0aWxzLm1hdGNoUHJlZml4ID0gZnVuY3Rpb24oYmxvYiwgcHJlZml4KSB7XG4gIHJldHVybiBTRFBVdGlscy5zcGxpdExpbmVzKGJsb2IpLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7XG4gICAgcmV0dXJuIGxpbmUuaW5kZXhPZihwcmVmaXgpID09PSAwO1xuICB9KTtcbn07XG5cbi8vIFBhcnNlcyBhbiBJQ0UgY2FuZGlkYXRlIGxpbmUuIFNhbXBsZSBpbnB1dDpcbi8vIGNhbmRpZGF0ZTo3MDI3ODYzNTAgMiB1ZHAgNDE4MTk5MDIgOC44LjguOCA2MDc2OSB0eXAgcmVsYXkgcmFkZHIgOC44LjguOFxuLy8gcnBvcnQgNTU5OTZcIlxuU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cztcbiAgLy8gUGFyc2UgYm90aCB2YXJpYW50cy5cbiAgaWYgKGxpbmUuaW5kZXhPZignYT1jYW5kaWRhdGU6JykgPT09IDApIHtcbiAgICBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDEyKS5zcGxpdCgnICcpO1xuICB9IGVsc2Uge1xuICAgIHBhcnRzID0gbGluZS5zdWJzdHJpbmcoMTApLnNwbGl0KCcgJyk7XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlID0ge1xuICAgIGZvdW5kYXRpb246IHBhcnRzWzBdLFxuICAgIGNvbXBvbmVudDogcGFyc2VJbnQocGFydHNbMV0sIDEwKSxcbiAgICBwcm90b2NvbDogcGFydHNbMl0udG9Mb3dlckNhc2UoKSxcbiAgICBwcmlvcml0eTogcGFyc2VJbnQocGFydHNbM10sIDEwKSxcbiAgICBpcDogcGFydHNbNF0sXG4gICAgYWRkcmVzczogcGFydHNbNF0sIC8vIGFkZHJlc3MgaXMgYW4gYWxpYXMgZm9yIGlwLlxuICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzVdLCAxMCksXG4gICAgLy8gc2tpcCBwYXJ0c1s2XSA9PSAndHlwJ1xuICAgIHR5cGU6IHBhcnRzWzddXG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDg7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHN3aXRjaCAocGFydHNbaV0pIHtcbiAgICAgIGNhc2UgJ3JhZGRyJzpcbiAgICAgICAgY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzID0gcGFydHNbaSArIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Jwb3J0JzpcbiAgICAgICAgY2FuZGlkYXRlLnJlbGF0ZWRQb3J0ID0gcGFyc2VJbnQocGFydHNbaSArIDFdLCAxMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGNwdHlwZSc6XG4gICAgICAgIGNhbmRpZGF0ZS50Y3BUeXBlID0gcGFydHNbaSArIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VmcmFnJzpcbiAgICAgICAgY2FuZGlkYXRlLnVmcmFnID0gcGFydHNbaSArIDFdOyAvLyBmb3IgYmFja3dhcmQgY29tcGFiaWxpdHkuXG4gICAgICAgIGNhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50ID0gcGFydHNbaSArIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIGV4dGVuc2lvbiBoYW5kbGluZywgaW4gcGFydGljdWxhciB1ZnJhZ1xuICAgICAgICBjYW5kaWRhdGVbcGFydHNbaV1dID0gcGFydHNbaSArIDFdO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZTtcbn07XG5cbi8vIFRyYW5zbGF0ZXMgYSBjYW5kaWRhdGUgb2JqZWN0IGludG8gU0RQIGNhbmRpZGF0ZSBhdHRyaWJ1dGUuXG5TRFBVdGlscy53cml0ZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGNhbmRpZGF0ZSkge1xuICB2YXIgc2RwID0gW107XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5mb3VuZGF0aW9uKTtcbiAgc2RwLnB1c2goY2FuZGlkYXRlLmNvbXBvbmVudCk7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5wcm90b2NvbC50b1VwcGVyQ2FzZSgpKTtcbiAgc2RwLnB1c2goY2FuZGlkYXRlLnByaW9yaXR5KTtcbiAgc2RwLnB1c2goY2FuZGlkYXRlLmFkZHJlc3MgfHwgY2FuZGlkYXRlLmlwKTtcbiAgc2RwLnB1c2goY2FuZGlkYXRlLnBvcnQpO1xuXG4gIHZhciB0eXBlID0gY2FuZGlkYXRlLnR5cGU7XG4gIHNkcC5wdXNoKCd0eXAnKTtcbiAgc2RwLnB1c2godHlwZSk7XG4gIGlmICh0eXBlICE9PSAnaG9zdCcgJiYgY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzICYmXG4gICAgICBjYW5kaWRhdGUucmVsYXRlZFBvcnQpIHtcbiAgICBzZHAucHVzaCgncmFkZHInKTtcbiAgICBzZHAucHVzaChjYW5kaWRhdGUucmVsYXRlZEFkZHJlc3MpO1xuICAgIHNkcC5wdXNoKCdycG9ydCcpO1xuICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCk7XG4gIH1cbiAgaWYgKGNhbmRpZGF0ZS50Y3BUeXBlICYmIGNhbmRpZGF0ZS5wcm90b2NvbC50b0xvd2VyQ2FzZSgpID09PSAndGNwJykge1xuICAgIHNkcC5wdXNoKCd0Y3B0eXBlJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnRjcFR5cGUpO1xuICB9XG4gIGlmIChjYW5kaWRhdGUudXNlcm5hbWVGcmFnbWVudCB8fCBjYW5kaWRhdGUudWZyYWcpIHtcbiAgICBzZHAucHVzaCgndWZyYWcnKTtcbiAgICBzZHAucHVzaChjYW5kaWRhdGUudXNlcm5hbWVGcmFnbWVudCB8fCBjYW5kaWRhdGUudWZyYWcpO1xuICB9XG4gIHJldHVybiAnY2FuZGlkYXRlOicgKyBzZHAuam9pbignICcpO1xufTtcblxuLy8gUGFyc2VzIGFuIGljZS1vcHRpb25zIGxpbmUsIHJldHVybnMgYW4gYXJyYXkgb2Ygb3B0aW9uIHRhZ3MuXG4vLyBhPWljZS1vcHRpb25zOmZvbyBiYXJcblNEUFV0aWxzLnBhcnNlSWNlT3B0aW9ucyA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgcmV0dXJuIGxpbmUuc3Vic3RyKDE0KS5zcGxpdCgnICcpO1xufTtcblxuLy8gUGFyc2VzIGFuIHJ0cG1hcCBsaW5lLCByZXR1cm5zIFJUQ1J0cENvZGRlY1BhcmFtZXRlcnMuIFNhbXBsZSBpbnB1dDpcbi8vIGE9cnRwbWFwOjExMSBvcHVzLzQ4MDAwLzJcblNEUFV0aWxzLnBhcnNlUnRwTWFwID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cig5KS5zcGxpdCgnICcpO1xuICB2YXIgcGFyc2VkID0ge1xuICAgIHBheWxvYWRUeXBlOiBwYXJzZUludChwYXJ0cy5zaGlmdCgpLCAxMCkgLy8gd2FzOiBpZFxuICB9O1xuXG4gIHBhcnRzID0gcGFydHNbMF0uc3BsaXQoJy8nKTtcblxuICBwYXJzZWQubmFtZSA9IHBhcnRzWzBdO1xuICBwYXJzZWQuY2xvY2tSYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTsgLy8gd2FzOiBjbG9ja3JhdGVcbiAgcGFyc2VkLmNoYW5uZWxzID0gcGFydHMubGVuZ3RoID09PSAzID8gcGFyc2VJbnQocGFydHNbMl0sIDEwKSA6IDE7XG4gIC8vIGxlZ2FjeSBhbGlhcywgZ290IHJlbmFtZWQgYmFjayB0byBjaGFubmVscyBpbiBPUlRDLlxuICBwYXJzZWQubnVtQ2hhbm5lbHMgPSBwYXJzZWQuY2hhbm5lbHM7XG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG4vLyBHZW5lcmF0ZSBhbiBhPXJ0cG1hcCBsaW5lIGZyb20gUlRDUnRwQ29kZWNDYXBhYmlsaXR5IG9yXG4vLyBSVENSdHBDb2RlY1BhcmFtZXRlcnMuXG5TRFBVdGlscy53cml0ZVJ0cE1hcCA9IGZ1bmN0aW9uKGNvZGVjKSB7XG4gIHZhciBwdCA9IGNvZGVjLnBheWxvYWRUeXBlO1xuICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHB0ID0gY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGU7XG4gIH1cbiAgdmFyIGNoYW5uZWxzID0gY29kZWMuY2hhbm5lbHMgfHwgY29kZWMubnVtQ2hhbm5lbHMgfHwgMTtcbiAgcmV0dXJuICdhPXJ0cG1hcDonICsgcHQgKyAnICcgKyBjb2RlYy5uYW1lICsgJy8nICsgY29kZWMuY2xvY2tSYXRlICtcbiAgICAgIChjaGFubmVscyAhPT0gMSA/ICcvJyArIGNoYW5uZWxzIDogJycpICsgJ1xcclxcbic7XG59O1xuXG4vLyBQYXJzZXMgYW4gYT1leHRtYXAgbGluZSAoaGVhZGVyZXh0ZW5zaW9uIGZyb20gUkZDIDUyODUpLiBTYW1wbGUgaW5wdXQ6XG4vLyBhPWV4dG1hcDoyIHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnRvZmZzZXRcbi8vIGE9ZXh0bWFwOjIvc2VuZG9ubHkgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldFxuU0RQVXRpbHMucGFyc2VFeHRtYXAgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDkpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgaWQ6IHBhcnNlSW50KHBhcnRzWzBdLCAxMCksXG4gICAgZGlyZWN0aW9uOiBwYXJ0c1swXS5pbmRleE9mKCcvJykgPiAwID8gcGFydHNbMF0uc3BsaXQoJy8nKVsxXSA6ICdzZW5kcmVjdicsXG4gICAgdXJpOiBwYXJ0c1sxXVxuICB9O1xufTtcblxuLy8gR2VuZXJhdGVzIGE9ZXh0bWFwIGxpbmUgZnJvbSBSVENSdHBIZWFkZXJFeHRlbnNpb25QYXJhbWV0ZXJzIG9yXG4vLyBSVENSdHBIZWFkZXJFeHRlbnNpb24uXG5TRFBVdGlscy53cml0ZUV4dG1hcCA9IGZ1bmN0aW9uKGhlYWRlckV4dGVuc2lvbikge1xuICByZXR1cm4gJ2E9ZXh0bWFwOicgKyAoaGVhZGVyRXh0ZW5zaW9uLmlkIHx8IGhlYWRlckV4dGVuc2lvbi5wcmVmZXJyZWRJZCkgK1xuICAgICAgKGhlYWRlckV4dGVuc2lvbi5kaXJlY3Rpb24gJiYgaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvbiAhPT0gJ3NlbmRyZWN2J1xuICAgICAgICA/ICcvJyArIGhlYWRlckV4dGVuc2lvbi5kaXJlY3Rpb25cbiAgICAgICAgOiAnJykgK1xuICAgICAgJyAnICsgaGVhZGVyRXh0ZW5zaW9uLnVyaSArICdcXHJcXG4nO1xufTtcblxuLy8gUGFyc2VzIGFuIGZ0bXAgbGluZSwgcmV0dXJucyBkaWN0aW9uYXJ5LiBTYW1wbGUgaW5wdXQ6XG4vLyBhPWZtdHA6OTYgdmJyPW9uO2NuZz1vblxuLy8gQWxzbyBkZWFscyB3aXRoIHZicj1vbjsgY25nPW9uXG5TRFBVdGlscy5wYXJzZUZtdHAgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGt2O1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cihsaW5lLmluZGV4T2YoJyAnKSArIDEpLnNwbGl0KCc7Jyk7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICBrdiA9IHBhcnRzW2pdLnRyaW0oKS5zcGxpdCgnPScpO1xuICAgIHBhcnNlZFtrdlswXS50cmltKCldID0ga3ZbMV07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbi8vIEdlbmVyYXRlcyBhbiBhPWZ0bXAgbGluZSBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvciBSVENSdHBDb2RlY1BhcmFtZXRlcnMuXG5TRFBVdGlscy53cml0ZUZtdHAgPSBmdW5jdGlvbihjb2RlYykge1xuICB2YXIgbGluZSA9ICcnO1xuICB2YXIgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICB9XG4gIGlmIChjb2RlYy5wYXJhbWV0ZXJzICYmIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmxlbmd0aCkge1xuICAgIHZhciBwYXJhbXMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhjb2RlYy5wYXJhbWV0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICBpZiAoY29kZWMucGFyYW1ldGVyc1twYXJhbV0pIHtcbiAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0gKyAnPScgKyBjb2RlYy5wYXJhbWV0ZXJzW3BhcmFtXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbGluZSArPSAnYT1mbXRwOicgKyBwdCArICcgJyArIHBhcmFtcy5qb2luKCc7JykgKyAnXFxyXFxuJztcbiAgfVxuICByZXR1cm4gbGluZTtcbn07XG5cbi8vIFBhcnNlcyBhbiBydGNwLWZiIGxpbmUsIHJldHVybnMgUlRDUFJ0Y3BGZWVkYmFjayBvYmplY3QuIFNhbXBsZSBpbnB1dDpcbi8vIGE9cnRjcC1mYjo5OCBuYWNrIHJwc2lcblNEUFV0aWxzLnBhcnNlUnRjcEZiID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cihsaW5lLmluZGV4T2YoJyAnKSArIDEpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogcGFydHMuc2hpZnQoKSxcbiAgICBwYXJhbWV0ZXI6IHBhcnRzLmpvaW4oJyAnKVxuICB9O1xufTtcbi8vIEdlbmVyYXRlIGE9cnRjcC1mYiBsaW5lcyBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvciBSVENSdHBDb2RlY1BhcmFtZXRlcnMuXG5TRFBVdGlscy53cml0ZVJ0Y3BGYiA9IGZ1bmN0aW9uKGNvZGVjKSB7XG4gIHZhciBsaW5lcyA9ICcnO1xuICB2YXIgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICB9XG4gIGlmIChjb2RlYy5ydGNwRmVlZGJhY2sgJiYgY29kZWMucnRjcEZlZWRiYWNrLmxlbmd0aCkge1xuICAgIC8vIEZJWE1FOiBzcGVjaWFsIGhhbmRsaW5nIGZvciB0cnItaW50P1xuICAgIGNvZGVjLnJ0Y3BGZWVkYmFjay5mb3JFYWNoKGZ1bmN0aW9uKGZiKSB7XG4gICAgICBsaW5lcyArPSAnYT1ydGNwLWZiOicgKyBwdCArICcgJyArIGZiLnR5cGUgK1xuICAgICAgKGZiLnBhcmFtZXRlciAmJiBmYi5wYXJhbWV0ZXIubGVuZ3RoID8gJyAnICsgZmIucGFyYW1ldGVyIDogJycpICtcbiAgICAgICAgICAnXFxyXFxuJztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbGluZXM7XG59O1xuXG4vLyBQYXJzZXMgYW4gUkZDIDU1NzYgc3NyYyBtZWRpYSBhdHRyaWJ1dGUuIFNhbXBsZSBpbnB1dDpcbi8vIGE9c3NyYzozNzM1OTI4NTU5IGNuYW1lOnNvbWV0aGluZ1xuU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBzcCA9IGxpbmUuaW5kZXhPZignICcpO1xuICB2YXIgcGFydHMgPSB7XG4gICAgc3NyYzogcGFyc2VJbnQobGluZS5zdWJzdHIoNywgc3AgLSA3KSwgMTApXG4gIH07XG4gIHZhciBjb2xvbiA9IGxpbmUuaW5kZXhPZignOicsIHNwKTtcbiAgaWYgKGNvbG9uID4gLTEpIHtcbiAgICBwYXJ0cy5hdHRyaWJ1dGUgPSBsaW5lLnN1YnN0cihzcCArIDEsIGNvbG9uIC0gc3AgLSAxKTtcbiAgICBwYXJ0cy52YWx1ZSA9IGxpbmUuc3Vic3RyKGNvbG9uICsgMSk7XG4gIH0gZWxzZSB7XG4gICAgcGFydHMuYXR0cmlidXRlID0gbGluZS5zdWJzdHIoc3AgKyAxKTtcbiAgfVxuICByZXR1cm4gcGFydHM7XG59O1xuXG5TRFBVdGlscy5wYXJzZVNzcmNHcm91cCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoMTMpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgc2VtYW50aWNzOiBwYXJ0cy5zaGlmdCgpLFxuICAgIHNzcmNzOiBwYXJ0cy5tYXAoZnVuY3Rpb24oc3NyYykge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHNzcmMsIDEwKTtcbiAgICB9KVxuICB9O1xufTtcblxuLy8gRXh0cmFjdHMgdGhlIE1JRCAoUkZDIDU4ODgpIGZyb20gYSBtZWRpYSBzZWN0aW9uLlxuLy8gcmV0dXJucyB0aGUgTUlEIG9yIHVuZGVmaW5lZCBpZiBubyBtaWQgbGluZSB3YXMgZm91bmQuXG5TRFBVdGlscy5nZXRNaWQgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIG1pZCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9bWlkOicpWzBdO1xuICBpZiAobWlkKSB7XG4gICAgcmV0dXJuIG1pZC5zdWJzdHIoNik7XG4gIH1cbn07XG5cblNEUFV0aWxzLnBhcnNlRmluZ2VycHJpbnQgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDE0KS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIGFsZ29yaXRobTogcGFydHNbMF0udG9Mb3dlckNhc2UoKSwgLy8gYWxnb3JpdGhtIGlzIGNhc2Utc2Vuc2l0aXZlIGluIEVkZ2UuXG4gICAgdmFsdWU6IHBhcnRzWzFdXG4gIH07XG59O1xuXG4vLyBFeHRyYWN0cyBEVExTIHBhcmFtZXRlcnMgZnJvbSBTRFAgbWVkaWEgc2VjdGlvbiBvciBzZXNzaW9ucGFydC5cbi8vIEZJWE1FOiBmb3IgY29uc2lzdGVuY3kgd2l0aCBvdGhlciBmdW5jdGlvbnMgdGhpcyBzaG91bGQgb25seVxuLy8gICBnZXQgdGhlIGZpbmdlcnByaW50IGxpbmUgYXMgaW5wdXQuIFNlZSBhbHNvIGdldEljZVBhcmFtZXRlcnMuXG5TRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uICsgc2Vzc2lvbnBhcnQsXG4gICAgJ2E9ZmluZ2VycHJpbnQ6Jyk7XG4gIC8vIE5vdGU6IGE9c2V0dXAgbGluZSBpcyBpZ25vcmVkIHNpbmNlIHdlIHVzZSB0aGUgJ2F1dG8nIHJvbGUuXG4gIC8vIE5vdGUyOiAnYWxnb3JpdGhtJyBpcyBub3QgY2FzZSBzZW5zaXRpdmUgZXhjZXB0IGluIEVkZ2UuXG4gIHJldHVybiB7XG4gICAgcm9sZTogJ2F1dG8nLFxuICAgIGZpbmdlcnByaW50czogbGluZXMubWFwKFNEUFV0aWxzLnBhcnNlRmluZ2VycHJpbnQpXG4gIH07XG59O1xuXG4vLyBTZXJpYWxpemVzIERUTFMgcGFyYW1ldGVycyB0byBTRFAuXG5TRFBVdGlscy53cml0ZUR0bHNQYXJhbWV0ZXJzID0gZnVuY3Rpb24ocGFyYW1zLCBzZXR1cFR5cGUpIHtcbiAgdmFyIHNkcCA9ICdhPXNldHVwOicgKyBzZXR1cFR5cGUgKyAnXFxyXFxuJztcbiAgcGFyYW1zLmZpbmdlcnByaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGZwKSB7XG4gICAgc2RwICs9ICdhPWZpbmdlcnByaW50OicgKyBmcC5hbGdvcml0aG0gKyAnICcgKyBmcC52YWx1ZSArICdcXHJcXG4nO1xuICB9KTtcbiAgcmV0dXJuIHNkcDtcbn07XG5cbi8vIFBhcnNlcyBhPWNyeXB0byBsaW5lcyBpbnRvXG4vLyAgIGh0dHBzOi8vcmF3Z2l0LmNvbS9hYm9iYS9lZGdlcnRjL21hc3Rlci9tc29ydGMtcnM0Lmh0bWwjZGljdGlvbmFyeS1ydGNzcnRwc2Rlc3BhcmFtZXRlcnMtbWVtYmVyc1xuU0RQVXRpbHMucGFyc2VDcnlwdG9MaW5lID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cig5KS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIHRhZzogcGFyc2VJbnQocGFydHNbMF0sIDEwKSxcbiAgICBjcnlwdG9TdWl0ZTogcGFydHNbMV0sXG4gICAga2V5UGFyYW1zOiBwYXJ0c1syXSxcbiAgICBzZXNzaW9uUGFyYW1zOiBwYXJ0cy5zbGljZSgzKSxcbiAgfTtcbn07XG5cblNEUFV0aWxzLndyaXRlQ3J5cHRvTGluZSA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMpIHtcbiAgcmV0dXJuICdhPWNyeXB0bzonICsgcGFyYW1ldGVycy50YWcgKyAnICcgK1xuICAgIHBhcmFtZXRlcnMuY3J5cHRvU3VpdGUgKyAnICcgK1xuICAgICh0eXBlb2YgcGFyYW1ldGVycy5rZXlQYXJhbXMgPT09ICdvYmplY3QnXG4gICAgICA/IFNEUFV0aWxzLndyaXRlQ3J5cHRvS2V5UGFyYW1zKHBhcmFtZXRlcnMua2V5UGFyYW1zKVxuICAgICAgOiBwYXJhbWV0ZXJzLmtleVBhcmFtcykgK1xuICAgIChwYXJhbWV0ZXJzLnNlc3Npb25QYXJhbXMgPyAnICcgKyBwYXJhbWV0ZXJzLnNlc3Npb25QYXJhbXMuam9pbignICcpIDogJycpICtcbiAgICAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyB0aGUgY3J5cHRvIGtleSBwYXJhbWV0ZXJzIGludG9cbi8vICAgaHR0cHM6Ly9yYXdnaXQuY29tL2Fib2JhL2VkZ2VydGMvbWFzdGVyL21zb3J0Yy1yczQuaHRtbCNydGNzcnRwa2V5cGFyYW0qXG5TRFBVdGlscy5wYXJzZUNyeXB0b0tleVBhcmFtcyA9IGZ1bmN0aW9uKGtleVBhcmFtcykge1xuICBpZiAoa2V5UGFyYW1zLmluZGV4T2YoJ2lubGluZTonKSAhPT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBwYXJ0cyA9IGtleVBhcmFtcy5zdWJzdHIoNykuc3BsaXQoJ3wnKTtcbiAgcmV0dXJuIHtcbiAgICBrZXlNZXRob2Q6ICdpbmxpbmUnLFxuICAgIGtleVNhbHQ6IHBhcnRzWzBdLFxuICAgIGxpZmVUaW1lOiBwYXJ0c1sxXSxcbiAgICBta2lWYWx1ZTogcGFydHNbMl0gPyBwYXJ0c1syXS5zcGxpdCgnOicpWzBdIDogdW5kZWZpbmVkLFxuICAgIG1raUxlbmd0aDogcGFydHNbMl0gPyBwYXJ0c1syXS5zcGxpdCgnOicpWzFdIDogdW5kZWZpbmVkLFxuICB9O1xufTtcblxuU0RQVXRpbHMud3JpdGVDcnlwdG9LZXlQYXJhbXMgPSBmdW5jdGlvbihrZXlQYXJhbXMpIHtcbiAgcmV0dXJuIGtleVBhcmFtcy5rZXlNZXRob2QgKyAnOidcbiAgICArIGtleVBhcmFtcy5rZXlTYWx0ICtcbiAgICAoa2V5UGFyYW1zLmxpZmVUaW1lID8gJ3wnICsga2V5UGFyYW1zLmxpZmVUaW1lIDogJycpICtcbiAgICAoa2V5UGFyYW1zLm1raVZhbHVlICYmIGtleVBhcmFtcy5ta2lMZW5ndGhcbiAgICAgID8gJ3wnICsga2V5UGFyYW1zLm1raVZhbHVlICsgJzonICsga2V5UGFyYW1zLm1raUxlbmd0aFxuICAgICAgOiAnJyk7XG59O1xuXG4vLyBFeHRyYWN0cyBhbGwgU0RFUyBwYXJhbXRlcnMuXG5TRFBVdGlscy5nZXRDcnlwdG9QYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkge1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24gKyBzZXNzaW9ucGFydCxcbiAgICAnYT1jcnlwdG86Jyk7XG4gIHJldHVybiBsaW5lcy5tYXAoU0RQVXRpbHMucGFyc2VDcnlwdG9MaW5lKTtcbn07XG5cbi8vIFBhcnNlcyBJQ0UgaW5mb3JtYXRpb24gZnJvbSBTRFAgbWVkaWEgc2VjdGlvbiBvciBzZXNzaW9ucGFydC5cbi8vIEZJWE1FOiBmb3IgY29uc2lzdGVuY3kgd2l0aCBvdGhlciBmdW5jdGlvbnMgdGhpcyBzaG91bGQgb25seVxuLy8gICBnZXQgdGhlIGljZS11ZnJhZyBhbmQgaWNlLXB3ZCBsaW5lcyBhcyBpbnB1dC5cblNEUFV0aWxzLmdldEljZVBhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KSB7XG4gIHZhciB1ZnJhZyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWljZS11ZnJhZzonKVswXTtcbiAgdmFyIHB3ZCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWljZS1wd2Q6JylbMF07XG4gIGlmICghKHVmcmFnICYmIHB3ZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHVzZXJuYW1lRnJhZ21lbnQ6IHVmcmFnLnN1YnN0cigxMiksXG4gICAgcGFzc3dvcmQ6IHB3ZC5zdWJzdHIoMTApLFxuICB9O1xufTtcblxuLy8gU2VyaWFsaXplcyBJQ0UgcGFyYW1ldGVycyB0byBTRFAuXG5TRFBVdGlscy53cml0ZUljZVBhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgcmV0dXJuICdhPWljZS11ZnJhZzonICsgcGFyYW1zLnVzZXJuYW1lRnJhZ21lbnQgKyAnXFxyXFxuJyArXG4gICAgICAnYT1pY2UtcHdkOicgKyBwYXJhbXMucGFzc3dvcmQgKyAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyB0aGUgU0RQIG1lZGlhIHNlY3Rpb24gYW5kIHJldHVybnMgUlRDUnRwUGFyYW1ldGVycy5cblNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgZGVzY3JpcHRpb24gPSB7XG4gICAgY29kZWNzOiBbXSxcbiAgICBoZWFkZXJFeHRlbnNpb25zOiBbXSxcbiAgICBmZWNNZWNoYW5pc21zOiBbXSxcbiAgICBydGNwOiBbXVxuICB9O1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIHZhciBtbGluZSA9IGxpbmVzWzBdLnNwbGl0KCcgJyk7XG4gIGZvciAodmFyIGkgPSAzOyBpIDwgbWxpbmUubGVuZ3RoOyBpKyspIHsgLy8gZmluZCBhbGwgY29kZWNzIGZyb20gbWxpbmVbMy4uXVxuICAgIHZhciBwdCA9IG1saW5lW2ldO1xuICAgIHZhciBydHBtYXBsaW5lID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoXG4gICAgICBtZWRpYVNlY3Rpb24sICdhPXJ0cG1hcDonICsgcHQgKyAnICcpWzBdO1xuICAgIGlmIChydHBtYXBsaW5lKSB7XG4gICAgICB2YXIgY29kZWMgPSBTRFBVdGlscy5wYXJzZVJ0cE1hcChydHBtYXBsaW5lKTtcbiAgICAgIHZhciBmbXRwcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KFxuICAgICAgICBtZWRpYVNlY3Rpb24sICdhPWZtdHA6JyArIHB0ICsgJyAnKTtcbiAgICAgIC8vIE9ubHkgdGhlIGZpcnN0IGE9Zm10cDo8cHQ+IGlzIGNvbnNpZGVyZWQuXG4gICAgICBjb2RlYy5wYXJhbWV0ZXJzID0gZm10cHMubGVuZ3RoID8gU0RQVXRpbHMucGFyc2VGbXRwKGZtdHBzWzBdKSA6IHt9O1xuICAgICAgY29kZWMucnRjcEZlZWRiYWNrID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoXG4gICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9cnRjcC1mYjonICsgcHQgKyAnICcpXG4gICAgICAgIC5tYXAoU0RQVXRpbHMucGFyc2VSdGNwRmIpO1xuICAgICAgZGVzY3JpcHRpb24uY29kZWNzLnB1c2goY29kZWMpO1xuICAgICAgLy8gcGFyc2UgRkVDIG1lY2hhbmlzbXMgZnJvbSBydHBtYXAgbGluZXMuXG4gICAgICBzd2l0Y2ggKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICBjYXNlICdSRUQnOlxuICAgICAgICBjYXNlICdVTFBGRUMnOlxuICAgICAgICAgIGRlc2NyaXB0aW9uLmZlY01lY2hhbmlzbXMucHVzaChjb2RlYy5uYW1lLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBvbmx5IFJFRCBhbmQgVUxQRkVDIGFyZSByZWNvZ25pemVkIGFzIEZFQyBtZWNoYW5pc21zLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPWV4dG1hcDonKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICBkZXNjcmlwdGlvbi5oZWFkZXJFeHRlbnNpb25zLnB1c2goU0RQVXRpbHMucGFyc2VFeHRtYXAobGluZSkpO1xuICB9KTtcbiAgLy8gRklYTUU6IHBhcnNlIHJ0Y3AuXG4gIHJldHVybiBkZXNjcmlwdGlvbjtcbn07XG5cbi8vIEdlbmVyYXRlcyBwYXJ0cyBvZiB0aGUgU0RQIG1lZGlhIHNlY3Rpb24gZGVzY3JpYmluZyB0aGUgY2FwYWJpbGl0aWVzIC9cbi8vIHBhcmFtZXRlcnMuXG5TRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24oa2luZCwgY2Fwcykge1xuICB2YXIgc2RwID0gJyc7XG5cbiAgLy8gQnVpbGQgdGhlIG1saW5lLlxuICBzZHAgKz0gJ209JyArIGtpbmQgKyAnICc7XG4gIHNkcCArPSBjYXBzLmNvZGVjcy5sZW5ndGggPiAwID8gJzknIDogJzAnOyAvLyByZWplY3QgaWYgbm8gY29kZWNzLlxuICBzZHAgKz0gJyBVRFAvVExTL1JUUC9TQVZQRiAnO1xuICBzZHAgKz0gY2Fwcy5jb2RlY3MubWFwKGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVjLnBheWxvYWRUeXBlO1xuICB9KS5qb2luKCcgJykgKyAnXFxyXFxuJztcblxuICBzZHAgKz0gJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nO1xuICBzZHAgKz0gJ2E9cnRjcDo5IElOIElQNCAwLjAuMC4wXFxyXFxuJztcblxuICAvLyBBZGQgYT1ydHBtYXAgbGluZXMgZm9yIGVhY2ggY29kZWMuIEFsc28gZm10cCBhbmQgcnRjcC1mYi5cbiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykge1xuICAgIHNkcCArPSBTRFBVdGlscy53cml0ZVJ0cE1hcChjb2RlYyk7XG4gICAgc2RwICs9IFNEUFV0aWxzLndyaXRlRm10cChjb2RlYyk7XG4gICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRjcEZiKGNvZGVjKTtcbiAgfSk7XG4gIHZhciBtYXhwdGltZSA9IDA7XG4gIGNhcHMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24oY29kZWMpIHtcbiAgICBpZiAoY29kZWMubWF4cHRpbWUgPiBtYXhwdGltZSkge1xuICAgICAgbWF4cHRpbWUgPSBjb2RlYy5tYXhwdGltZTtcbiAgICB9XG4gIH0pO1xuICBpZiAobWF4cHRpbWUgPiAwKSB7XG4gICAgc2RwICs9ICdhPW1heHB0aW1lOicgKyBtYXhwdGltZSArICdcXHJcXG4nO1xuICB9XG4gIHNkcCArPSAnYT1ydGNwLW11eFxcclxcbic7XG5cbiAgaWYgKGNhcHMuaGVhZGVyRXh0ZW5zaW9ucykge1xuICAgIGNhcHMuaGVhZGVyRXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGV4dGVuc2lvbikge1xuICAgICAgc2RwICs9IFNEUFV0aWxzLndyaXRlRXh0bWFwKGV4dGVuc2lvbik7XG4gICAgfSk7XG4gIH1cbiAgLy8gRklYTUU6IHdyaXRlIGZlY01lY2hhbmlzbXMuXG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBQYXJzZXMgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mXG4vLyBSVENSdHBFbmNvZGluZ1BhcmFtZXRlcnMuXG5TRFBVdGlscy5wYXJzZVJ0cEVuY29kaW5nUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgZW5jb2RpbmdQYXJhbWV0ZXJzID0gW107XG4gIHZhciBkZXNjcmlwdGlvbiA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pO1xuICB2YXIgaGFzUmVkID0gZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5pbmRleE9mKCdSRUQnKSAhPT0gLTE7XG4gIHZhciBoYXNVbHBmZWMgPSBkZXNjcmlwdGlvbi5mZWNNZWNoYW5pc21zLmluZGV4T2YoJ1VMUEZFQycpICE9PSAtMTtcblxuICAvLyBmaWx0ZXIgYT1zc3JjOi4uLiBjbmFtZTosIGlnbm9yZSBQbGFuQi1tc2lkXG4gIHZhciBzc3JjcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYzonKVxuICAgIC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgcmV0dXJuIFNEUFV0aWxzLnBhcnNlU3NyY01lZGlhKGxpbmUpO1xuICAgIH0pXG4gICAgLmZpbHRlcihmdW5jdGlvbihwYXJ0cykge1xuICAgICAgcmV0dXJuIHBhcnRzLmF0dHJpYnV0ZSA9PT0gJ2NuYW1lJztcbiAgICB9KTtcbiAgdmFyIHByaW1hcnlTc3JjID0gc3NyY3MubGVuZ3RoID4gMCAmJiBzc3Jjc1swXS5zc3JjO1xuICB2YXIgc2Vjb25kYXJ5U3NyYztcblxuICB2YXIgZmxvd3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmMtZ3JvdXA6RklEJylcbiAgICAubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDE3KS5zcGxpdCgnICcpO1xuICAgICAgcmV0dXJuIHBhcnRzLm1hcChmdW5jdGlvbihwYXJ0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChwYXJ0LCAxMCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgaWYgKGZsb3dzLmxlbmd0aCA+IDAgJiYgZmxvd3NbMF0ubGVuZ3RoID4gMSAmJiBmbG93c1swXVswXSA9PT0gcHJpbWFyeVNzcmMpIHtcbiAgICBzZWNvbmRhcnlTc3JjID0gZmxvd3NbMF1bMV07XG4gIH1cblxuICBkZXNjcmlwdGlvbi5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykge1xuICAgIGlmIChjb2RlYy5uYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdSVFgnICYmIGNvZGVjLnBhcmFtZXRlcnMuYXB0KSB7XG4gICAgICB2YXIgZW5jUGFyYW0gPSB7XG4gICAgICAgIHNzcmM6IHByaW1hcnlTc3JjLFxuICAgICAgICBjb2RlY1BheWxvYWRUeXBlOiBwYXJzZUludChjb2RlYy5wYXJhbWV0ZXJzLmFwdCwgMTApXG4gICAgICB9O1xuICAgICAgaWYgKHByaW1hcnlTc3JjICYmIHNlY29uZGFyeVNzcmMpIHtcbiAgICAgICAgZW5jUGFyYW0ucnR4ID0ge3NzcmM6IHNlY29uZGFyeVNzcmN9O1xuICAgICAgfVxuICAgICAgZW5jb2RpbmdQYXJhbWV0ZXJzLnB1c2goZW5jUGFyYW0pO1xuICAgICAgaWYgKGhhc1JlZCkge1xuICAgICAgICBlbmNQYXJhbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZW5jUGFyYW0pKTtcbiAgICAgICAgZW5jUGFyYW0uZmVjID0ge1xuICAgICAgICAgIHNzcmM6IHByaW1hcnlTc3JjLFxuICAgICAgICAgIG1lY2hhbmlzbTogaGFzVWxwZmVjID8gJ3JlZCt1bHBmZWMnIDogJ3JlZCdcbiAgICAgICAgfTtcbiAgICAgICAgZW5jb2RpbmdQYXJhbWV0ZXJzLnB1c2goZW5jUGFyYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGlmIChlbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoID09PSAwICYmIHByaW1hcnlTc3JjKSB7XG4gICAgZW5jb2RpbmdQYXJhbWV0ZXJzLnB1c2goe1xuICAgICAgc3NyYzogcHJpbWFyeVNzcmNcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHdlIHN1cHBvcnQgYm90aCBiPUFTIGFuZCBiPVRJQVMgYnV0IGludGVycHJldCBBUyBhcyBUSUFTLlxuICB2YXIgYmFuZHdpZHRoID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYj0nKTtcbiAgaWYgKGJhbmR3aWR0aC5sZW5ndGgpIHtcbiAgICBpZiAoYmFuZHdpZHRoWzBdLmluZGV4T2YoJ2I9VElBUzonKSA9PT0gMCkge1xuICAgICAgYmFuZHdpZHRoID0gcGFyc2VJbnQoYmFuZHdpZHRoWzBdLnN1YnN0cig3KSwgMTApO1xuICAgIH0gZWxzZSBpZiAoYmFuZHdpZHRoWzBdLmluZGV4T2YoJ2I9QVM6JykgPT09IDApIHtcbiAgICAgIC8vIHVzZSBmb3JtdWxhIGZyb20gSlNFUCB0byBjb252ZXJ0IGI9QVMgdG8gVElBUyB2YWx1ZS5cbiAgICAgIGJhbmR3aWR0aCA9IHBhcnNlSW50KGJhbmR3aWR0aFswXS5zdWJzdHIoNSksIDEwKSAqIDEwMDAgKiAwLjk1XG4gICAgICAgICAgLSAoNTAgKiA0MCAqIDgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYW5kd2lkdGggPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVuY29kaW5nUGFyYW1ldGVycy5mb3JFYWNoKGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgcGFyYW1zLm1heEJpdHJhdGUgPSBiYW5kd2lkdGg7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGVuY29kaW5nUGFyYW1ldGVycztcbn07XG5cbi8vIHBhcnNlcyBodHRwOi8vZHJhZnQub3J0Yy5vcmcvI3J0Y3J0Y3BwYXJhbWV0ZXJzKlxuU0RQVXRpbHMucGFyc2VSdGNwUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgcnRjcFBhcmFtZXRlcnMgPSB7fTtcblxuICAvLyBHZXRzIHRoZSBmaXJzdCBTU1JDLiBOb3RlIHRoYSB3aXRoIFJUWCB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZVxuICAvLyBTU1JDcy5cbiAgdmFyIHJlbW90ZVNzcmMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JylcbiAgICAubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHJldHVybiBTRFBVdGlscy5wYXJzZVNzcmNNZWRpYShsaW5lKTtcbiAgICB9KVxuICAgIC5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqLmF0dHJpYnV0ZSA9PT0gJ2NuYW1lJztcbiAgICB9KVswXTtcbiAgaWYgKHJlbW90ZVNzcmMpIHtcbiAgICBydGNwUGFyYW1ldGVycy5jbmFtZSA9IHJlbW90ZVNzcmMudmFsdWU7XG4gICAgcnRjcFBhcmFtZXRlcnMuc3NyYyA9IHJlbW90ZVNzcmMuc3NyYztcbiAgfVxuXG4gIC8vIEVkZ2UgdXNlcyB0aGUgY29tcG91bmQgYXR0cmlidXRlIGluc3RlYWQgb2YgcmVkdWNlZFNpemVcbiAgLy8gY29tcG91bmQgaXMgIXJlZHVjZWRTaXplXG4gIHZhciByc2l6ZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9cnRjcC1yc2l6ZScpO1xuICBydGNwUGFyYW1ldGVycy5yZWR1Y2VkU2l6ZSA9IHJzaXplLmxlbmd0aCA+IDA7XG4gIHJ0Y3BQYXJhbWV0ZXJzLmNvbXBvdW5kID0gcnNpemUubGVuZ3RoID09PSAwO1xuXG4gIC8vIHBhcnNlcyB0aGUgcnRjcC1tdXggYXR0ctGWYnV0ZS5cbiAgLy8gTm90ZSB0aGF0IEVkZ2UgZG9lcyBub3Qgc3VwcG9ydCB1bm11eGVkIFJUQ1AuXG4gIHZhciBtdXggPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXJ0Y3AtbXV4Jyk7XG4gIHJ0Y3BQYXJhbWV0ZXJzLm11eCA9IG11eC5sZW5ndGggPiAwO1xuXG4gIHJldHVybiBydGNwUGFyYW1ldGVycztcbn07XG5cbi8vIHBhcnNlcyBlaXRoZXIgYT1tc2lkOiBvciBhPXNzcmM6Li4uIG1zaWQgbGluZXMgYW5kIHJldHVybnNcbi8vIHRoZSBpZCBvZiB0aGUgTWVkaWFTdHJlYW0gYW5kIE1lZGlhU3RyZWFtVHJhY2suXG5TRFBVdGlscy5wYXJzZU1zaWQgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIHBhcnRzO1xuICB2YXIgc3BlYyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9bXNpZDonKTtcbiAgaWYgKHNwZWMubGVuZ3RoID09PSAxKSB7XG4gICAgcGFydHMgPSBzcGVjWzBdLnN1YnN0cig3KS5zcGxpdCgnICcpO1xuICAgIHJldHVybiB7c3RyZWFtOiBwYXJ0c1swXSwgdHJhY2s6IHBhcnRzWzFdfTtcbiAgfVxuICB2YXIgcGxhbkIgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JylcbiAgICAubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHJldHVybiBTRFBVdGlscy5wYXJzZVNzcmNNZWRpYShsaW5lKTtcbiAgICB9KVxuICAgIC5maWx0ZXIoZnVuY3Rpb24obXNpZFBhcnRzKSB7XG4gICAgICByZXR1cm4gbXNpZFBhcnRzLmF0dHJpYnV0ZSA9PT0gJ21zaWQnO1xuICAgIH0pO1xuICBpZiAocGxhbkIubGVuZ3RoID4gMCkge1xuICAgIHBhcnRzID0gcGxhbkJbMF0udmFsdWUuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4ge3N0cmVhbTogcGFydHNbMF0sIHRyYWNrOiBwYXJ0c1sxXX07XG4gIH1cbn07XG5cbi8vIFNDVFBcbi8vIHBhcnNlcyBkcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0yNiBmaXJzdCBhbmQgZmFsbHMgYmFja1xuLy8gdG8gZHJhZnQtaWV0Zi1tbXVzaWMtc2N0cC1zZHAtMDVcblNEUFV0aWxzLnBhcnNlU2N0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBtbGluZSA9IFNEUFV0aWxzLnBhcnNlTUxpbmUobWVkaWFTZWN0aW9uKTtcbiAgdmFyIG1heFNpemVMaW5lID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1tYXgtbWVzc2FnZS1zaXplOicpO1xuICB2YXIgbWF4TWVzc2FnZVNpemU7XG4gIGlmIChtYXhTaXplTGluZS5sZW5ndGggPiAwKSB7XG4gICAgbWF4TWVzc2FnZVNpemUgPSBwYXJzZUludChtYXhTaXplTGluZVswXS5zdWJzdHIoMTkpLCAxMCk7XG4gIH1cbiAgaWYgKGlzTmFOKG1heE1lc3NhZ2VTaXplKSkge1xuICAgIG1heE1lc3NhZ2VTaXplID0gNjU1MzY7XG4gIH1cbiAgdmFyIHNjdHBQb3J0ID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zY3RwLXBvcnQ6Jyk7XG4gIGlmIChzY3RwUG9ydC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcnQ6IHBhcnNlSW50KHNjdHBQb3J0WzBdLnN1YnN0cigxMiksIDEwKSxcbiAgICAgIHByb3RvY29sOiBtbGluZS5mbXQsXG4gICAgICBtYXhNZXNzYWdlU2l6ZTogbWF4TWVzc2FnZVNpemVcbiAgICB9O1xuICB9XG4gIHZhciBzY3RwTWFwTGluZXMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNjdHBtYXA6Jyk7XG4gIGlmIChzY3RwTWFwTGluZXMubGVuZ3RoID4gMCkge1xuICAgIHZhciBwYXJ0cyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c2N0cG1hcDonKVswXVxuICAgICAgLnN1YnN0cigxMClcbiAgICAgIC5zcGxpdCgnICcpO1xuICAgIHJldHVybiB7XG4gICAgICBwb3J0OiBwYXJzZUludChwYXJ0c1swXSwgMTApLFxuICAgICAgcHJvdG9jb2w6IHBhcnRzWzFdLFxuICAgICAgbWF4TWVzc2FnZVNpemU6IG1heE1lc3NhZ2VTaXplXG4gICAgfTtcbiAgfVxufTtcblxuLy8gU0NUUFxuLy8gb3V0cHV0cyB0aGUgZHJhZnQtaWV0Zi1tbXVzaWMtc2N0cC1zZHAtMjYgdmVyc2lvbiB0aGF0IGFsbCBicm93c2Vyc1xuLy8gc3VwcG9ydCBieSBub3cgcmVjZWl2aW5nIGluIHRoaXMgZm9ybWF0LCB1bmxlc3Mgd2Ugb3JpZ2luYWxseSBwYXJzZWRcbi8vIGFzIHRoZSBkcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0wNSBmb3JtYXQgKGluZGljYXRlZCBieSB0aGUgbS1saW5lXG4vLyBwcm90b2NvbCBvZiBEVExTL1NDVFAgLS0gd2l0aG91dCBVRFAvIG9yIFRDUC8pXG5TRFBVdGlscy53cml0ZVNjdHBEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKG1lZGlhLCBzY3RwKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgaWYgKG1lZGlhLnByb3RvY29sICE9PSAnRFRMUy9TQ1RQJykge1xuICAgIG91dHB1dCA9IFtcbiAgICAgICdtPScgKyBtZWRpYS5raW5kICsgJyA5ICcgKyBtZWRpYS5wcm90b2NvbCArICcgJyArIHNjdHAucHJvdG9jb2wgKyAnXFxyXFxuJyxcbiAgICAgICdjPUlOIElQNCAwLjAuMC4wXFxyXFxuJyxcbiAgICAgICdhPXNjdHAtcG9ydDonICsgc2N0cC5wb3J0ICsgJ1xcclxcbidcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IFtcbiAgICAgICdtPScgKyBtZWRpYS5raW5kICsgJyA5ICcgKyBtZWRpYS5wcm90b2NvbCArICcgJyArIHNjdHAucG9ydCArICdcXHJcXG4nLFxuICAgICAgJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nLFxuICAgICAgJ2E9c2N0cG1hcDonICsgc2N0cC5wb3J0ICsgJyAnICsgc2N0cC5wcm90b2NvbCArICcgNjU1MzVcXHJcXG4nXG4gICAgXTtcbiAgfVxuICBpZiAoc2N0cC5tYXhNZXNzYWdlU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgb3V0cHV0LnB1c2goJ2E9bWF4LW1lc3NhZ2Utc2l6ZTonICsgc2N0cC5tYXhNZXNzYWdlU2l6ZSArICdcXHJcXG4nKTtcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufTtcblxuLy8gR2VuZXJhdGUgYSBzZXNzaW9uIElEIGZvciBTRFAuXG4vLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi1ydGN3ZWItanNlcC0yMCNzZWN0aW9uLTUuMi4xXG4vLyByZWNvbW1lbmRzIHVzaW5nIGEgY3J5cHRvZ3JhcGhpY2FsbHkgcmFuZG9tICt2ZSA2NC1iaXQgdmFsdWVcbi8vIGJ1dCByaWdodCBub3cgdGhpcyBzaG91bGQgYmUgYWNjZXB0YWJsZSBhbmQgd2l0aGluIHRoZSByaWdodCByYW5nZVxuU0RQVXRpbHMuZ2VuZXJhdGVTZXNzaW9uSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKS5zdWJzdHIoMiwgMjEpO1xufTtcblxuLy8gV3JpdGUgYm9pbGRlciBwbGF0ZSBmb3Igc3RhcnQgb2YgU0RQXG4vLyBzZXNzSWQgYXJndW1lbnQgaXMgb3B0aW9uYWwgLSBpZiBub3Qgc3VwcGxpZWQgaXQgd2lsbFxuLy8gYmUgZ2VuZXJhdGVkIHJhbmRvbWx5XG4vLyBzZXNzVmVyc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gMlxuLy8gc2Vzc1VzZXIgaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvICd0aGlzaXNhZGFwdGVyb3J0YydcblNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlID0gZnVuY3Rpb24oc2Vzc0lkLCBzZXNzVmVyLCBzZXNzVXNlcikge1xuICB2YXIgc2Vzc2lvbklkO1xuICB2YXIgdmVyc2lvbiA9IHNlc3NWZXIgIT09IHVuZGVmaW5lZCA/IHNlc3NWZXIgOiAyO1xuICBpZiAoc2Vzc0lkKSB7XG4gICAgc2Vzc2lvbklkID0gc2Vzc0lkO1xuICB9IGVsc2Uge1xuICAgIHNlc3Npb25JZCA9IFNEUFV0aWxzLmdlbmVyYXRlU2Vzc2lvbklkKCk7XG4gIH1cbiAgdmFyIHVzZXIgPSBzZXNzVXNlciB8fCAndGhpc2lzYWRhcHRlcm9ydGMnO1xuICAvLyBGSVhNRTogc2Vzcy1pZCBzaG91bGQgYmUgYW4gTlRQIHRpbWVzdGFtcC5cbiAgcmV0dXJuICd2PTBcXHJcXG4nICtcbiAgICAgICdvPScgKyB1c2VyICsgJyAnICsgc2Vzc2lvbklkICsgJyAnICsgdmVyc2lvbiArXG4gICAgICAgICcgSU4gSVA0IDEyNy4wLjAuMVxcclxcbicgK1xuICAgICAgJ3M9LVxcclxcbicgK1xuICAgICAgJ3Q9MCAwXFxyXFxuJztcbn07XG5cblNEUFV0aWxzLndyaXRlTWVkaWFTZWN0aW9uID0gZnVuY3Rpb24odHJhbnNjZWl2ZXIsIGNhcHMsIHR5cGUsIHN0cmVhbSkge1xuICB2YXIgc2RwID0gU0RQVXRpbHMud3JpdGVSdHBEZXNjcmlwdGlvbih0cmFuc2NlaXZlci5raW5kLCBjYXBzKTtcblxuICAvLyBNYXAgSUNFIHBhcmFtZXRlcnMgKHVmcmFnLCBwd2QpIHRvIFNEUC5cbiAgc2RwICs9IFNEUFV0aWxzLndyaXRlSWNlUGFyYW1ldGVycyhcbiAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5nZXRMb2NhbFBhcmFtZXRlcnMoKSk7XG5cbiAgLy8gTWFwIERUTFMgcGFyYW1ldGVycyB0byBTRFAuXG4gIHNkcCArPSBTRFBVdGlscy53cml0ZUR0bHNQYXJhbWV0ZXJzKFxuICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuZ2V0TG9jYWxQYXJhbWV0ZXJzKCksXG4gICAgdHlwZSA9PT0gJ29mZmVyJyA/ICdhY3RwYXNzJyA6ICdhY3RpdmUnKTtcblxuICBzZHAgKz0gJ2E9bWlkOicgKyB0cmFuc2NlaXZlci5taWQgKyAnXFxyXFxuJztcblxuICBpZiAodHJhbnNjZWl2ZXIuZGlyZWN0aW9uKSB7XG4gICAgc2RwICs9ICdhPScgKyB0cmFuc2NlaXZlci5kaXJlY3Rpb24gKyAnXFxyXFxuJztcbiAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiYgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHtcbiAgICBzZHAgKz0gJ2E9c2VuZHJlY3ZcXHJcXG4nO1xuICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgIHNkcCArPSAnYT1zZW5kb25seVxcclxcbic7XG4gIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHtcbiAgICBzZHAgKz0gJ2E9cmVjdm9ubHlcXHJcXG4nO1xuICB9IGVsc2Uge1xuICAgIHNkcCArPSAnYT1pbmFjdGl2ZVxcclxcbic7XG4gIH1cblxuICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgLy8gc3BlYy5cbiAgICB2YXIgbXNpZCA9ICdtc2lkOicgKyBzdHJlYW0uaWQgKyAnICcgK1xuICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIudHJhY2suaWQgKyAnXFxyXFxuJztcbiAgICBzZHAgKz0gJ2E9JyArIG1zaWQ7XG5cbiAgICAvLyBmb3IgQ2hyb21lLlxuICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgK1xuICAgICAgICAnICcgKyBtc2lkO1xuICAgIGlmICh0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMgK1xuICAgICAgICAgICcgJyArIG1zaWQ7XG4gICAgICBzZHAgKz0gJ2E9c3NyYy1ncm91cDpGSUQgJyArXG4gICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICsgJyAnICtcbiAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjICtcbiAgICAgICAgICAnXFxyXFxuJztcbiAgICB9XG4gIH1cbiAgLy8gRklYTUU6IHRoaXMgc2hvdWxkIGJlIHdyaXR0ZW4gYnkgd3JpdGVSdHBEZXNjcmlwdGlvbi5cbiAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArXG4gICAgICAnIGNuYW1lOicgKyBTRFBVdGlscy5sb2NhbENOYW1lICsgJ1xcclxcbic7XG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiYgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYyArXG4gICAgICAgICcgY25hbWU6JyArIFNEUFV0aWxzLmxvY2FsQ05hbWUgKyAnXFxyXFxuJztcbiAgfVxuICByZXR1cm4gc2RwO1xufTtcblxuLy8gR2V0cyB0aGUgZGlyZWN0aW9uIGZyb20gdGhlIG1lZGlhU2VjdGlvbiBvciB0aGUgc2Vzc2lvbnBhcnQuXG5TRFBVdGlscy5nZXREaXJlY3Rpb24gPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KSB7XG4gIC8vIExvb2sgZm9yIHNlbmRyZWN2LCBzZW5kb25seSwgcmVjdm9ubHksIGluYWN0aXZlLCBkZWZhdWx0IHRvIHNlbmRyZWN2LlxuICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBzd2l0Y2ggKGxpbmVzW2ldKSB7XG4gICAgICBjYXNlICdhPXNlbmRyZWN2JzpcbiAgICAgIGNhc2UgJ2E9c2VuZG9ubHknOlxuICAgICAgY2FzZSAnYT1yZWN2b25seSc6XG4gICAgICBjYXNlICdhPWluYWN0aXZlJzpcbiAgICAgICAgcmV0dXJuIGxpbmVzW2ldLnN1YnN0cigyKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIEZJWE1FOiBXaGF0IHNob3VsZCBoYXBwZW4gaGVyZT9cbiAgICB9XG4gIH1cbiAgaWYgKHNlc3Npb25wYXJ0KSB7XG4gICAgcmV0dXJuIFNEUFV0aWxzLmdldERpcmVjdGlvbihzZXNzaW9ucGFydCk7XG4gIH1cbiAgcmV0dXJuICdzZW5kcmVjdic7XG59O1xuXG5TRFBVdGlscy5nZXRLaW5kID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgdmFyIG1saW5lID0gbGluZXNbMF0uc3BsaXQoJyAnKTtcbiAgcmV0dXJuIG1saW5lWzBdLnN1YnN0cigyKTtcbn07XG5cblNEUFV0aWxzLmlzUmVqZWN0ZWQgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgcmV0dXJuIG1lZGlhU2VjdGlvbi5zcGxpdCgnICcsIDIpWzFdID09PSAnMCc7XG59O1xuXG5TRFBVdGlscy5wYXJzZU1MaW5lID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgdmFyIHBhcnRzID0gbGluZXNbMF0uc3Vic3RyKDIpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAga2luZDogcGFydHNbMF0sXG4gICAgcG9ydDogcGFyc2VJbnQocGFydHNbMV0sIDEwKSxcbiAgICBwcm90b2NvbDogcGFydHNbMl0sXG4gICAgZm10OiBwYXJ0cy5zbGljZSgzKS5qb2luKCcgJylcbiAgfTtcbn07XG5cblNEUFV0aWxzLnBhcnNlT0xpbmUgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIGxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdvPScpWzBdO1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cigyKS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIHVzZXJuYW1lOiBwYXJ0c1swXSxcbiAgICBzZXNzaW9uSWQ6IHBhcnRzWzFdLFxuICAgIHNlc3Npb25WZXJzaW9uOiBwYXJzZUludChwYXJ0c1syXSwgMTApLFxuICAgIG5ldFR5cGU6IHBhcnRzWzNdLFxuICAgIGFkZHJlc3NUeXBlOiBwYXJ0c1s0XSxcbiAgICBhZGRyZXNzOiBwYXJ0c1s1XVxuICB9O1xufTtcblxuLy8gYSB2ZXJ5IG5haXZlIGludGVycHJldGF0aW9uIG9mIGEgdmFsaWQgU0RQLlxuU0RQVXRpbHMuaXNWYWxpZFNEUCA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgaWYgKHR5cGVvZiBibG9iICE9PSAnc3RyaW5nJyB8fCBibG9iLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKGJsb2IpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxpbmVzW2ldLmxlbmd0aCA8IDIgfHwgbGluZXNbaV0uY2hhckF0KDEpICE9PSAnPScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gVE9ETzogY2hlY2sgdGhlIG1vZGlmaWVyIGEgYml0IG1vcmUuXG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBFeHBvc2UgcHVibGljIG1ldGhvZHMuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTRFBVdGlscztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NkcC9zZHAuanNcbi8vIG1vZHVsZSBpZCA9IDg2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKlxuVGhpcyBpcyB0aGUgcmVjeWNsZXIgcGFnZSB3aGVyZSBhIHJlY3ljbGVyIHNjYW5zIHRoZSBRUiBjb2RlcyBhbmQgdmlldyByZXdhcmRzXG5Db250YWN0IHVzZWQgaGVyZTogYW4gaW5zdGFuY2Ugb2YgdHJhY2tpbmcuc29sIFxuVG8gcnVuIHRoZSBhcHAsIHVzZSB0aGUgY29tbWFuZCBucG0gcnVuIGRldlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgbGF6eSwgU3VzcGVuc2V9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENhcmQsIFRhYmxlLCBCdXR0b24gfSBmcm9tICdzZW1hbnRpYy11aS1yZWFjdCc7XG5pbXBvcnQgUVJSZWFkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvUVJSZWFkZXJcIjtcblxuLy9pbXBvcnQgd2ViMyBmcm9tICcuLi9ldGhlcmV1bS93ZWIzJztcbi8vaW1wb3J0IHRyYWNraW5nQ29udHJhY3QgZnJvbSAnLi4vZXRoZXJldW0vdHJhY2tpbmcnOyAvLyBpbXBvcnQgU0MgaW5zdGFuY2VcblxuY2xhc3MgcmVjeWNsZXJQYWdlIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHJld2FyZHM6IDAsXG4gICAgICAgICAgICBib3R0bGVTdGF0dXM6ICcnLFxuICAgICAgICAgICAgcmVzdWx0OiAnJyxcbiAgICAgICAgICAgIHFyOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgb25TY2FuID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnFyID09PSBmYWxzZSlcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBxcjogdHJ1ZSB9KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHFyOiBmYWxzZSB9KTtcbiAgICB9O1xuXG5cbiAgICByZW5kZXJRUlJlYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPFFyUmVhZGVyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5PXszMDB9XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3I9e3RoaXMuaGFuZGxlRXJyb3J9XG4gICAgICAgICAgICAgICAgICAgIG9uU2Nhbj17dGhpcy5oYW5kbGVTY2FufVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5yZXN1bHR9PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJCb3R0bGVzVGFibGUoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUYWJsZS5Sb3c+XG4gICAgICAgICAgICAgICAgPFRhYmxlLkNlbGw+e3RoaXMuc3RhdGUucmVzdWx0fTwvVGFibGUuQ2VsbD5cbiAgICAgICAgICAgICAgICA8VGFibGUuQ2VsbD5Db21wbGV0ZWQ8L1RhYmxlLkNlbGw+XG4gICAgICAgICAgICA8L1RhYmxlLlJvdz5cblxuICAgICAgICApO1xuXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGNvbnN0IHtxcn0gPSB0aGlzLnN0YXRlXG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGgxPldlbGNvbWUgdG8gUmVjeWNsZXIncyBQYWdlPC9oMT5cbiAgICAgICAgICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cIi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vc2VtYW50aWMtdWlAMi40LjEvZGlzdC9zZW1hbnRpYy5taW4uY3NzXCJcbiAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgPENhcmQgaGVhZGVyPSdSZXdhcmRzJyBkZXNjcmlwdGlvbj17dGhpcy5zdGF0ZS5yZXdhcmRzfSBtZXRhPSdFVEgnIGNlbnRlcmVkPSd0cnVlJyAvPlxuXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlNjYW5uZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgyPkRpc3Bvc2UgYSBQbGFzdGljIEJvdHRsZSA8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cIlFyUmVhZGVyXCIgb25DbGljaz17dGhpcy5vblNjYW59ID4gU2NhbiBRUiBDb2RlPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+IHt0aGlzLnN0YXRlLnFyID09PSB0cnVlICYmIHRoaXMuc3RhdGUucmVzdWx0ID09PSAnJyA/IDxRUlJlYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk9e3RoaXMuc3RhdGUuZGVsYXl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yPXt0aGlzLmhhbmRsZUVycm9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25TY2FuPXt0aGlzLmhhbmRsZVNjYW59XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogXCIyNSVcIiB9fS8vXG4gICAgICAgICAgICAgICAgICAgIC8+IDogJyd9IDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J0JvdHRsZVRhYmxlJyBzdHlsZT17eyAnd2lkdGgnOiAnNDAlJywgJ21hcmdpbi1sZWZ0JzogJ2F1dG8nLCAnbWFyZ2luLXJpZ2h0JzogJ2F1dG8nIH19PlxuICAgICAgICAgICAgICAgICAgICA8VGFibGUgdW5zdGFja2FibGUgc2l6ZT0nc21hbGwnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlLkhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuUm93PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuSGVhZGVyQ2VsbD5QbGFzaXRjIEJvdHRsZSBBZGRyZXNzPC9UYWJsZS5IZWFkZXJDZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuSGVhZGVyQ2VsbD5TdGF0dXM8L1RhYmxlLkhlYWRlckNlbGw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZS5Sb3c+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGUuSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlLkJvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQm90dGxlc1RhYmxlKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlLkJvZHk+XG5cbiAgICAgICAgICAgICAgICAgICAgPC9UYWJsZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuXG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICApO1xuICAgIH1cblxufVxuXG4vL0F0IHRoZSBlbmQgb2YgZWFjaCBwYWdlLCBhIGNvbXBvbmVudCBpcyBleHBlY3RlZCB0byBiZSByZXR1cm5lZCBcbi8vIElmIG5vdCwgTmV4dC5qcyB0aHJvd3MgYW4gZXJyb3IgXG5leHBvcnQgZGVmYXVsdCByZWN5Y2xlclBhZ2U7IFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhZ2VzL3JlY3ljbGVyLmpzP2VudHJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3JkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3JCQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ2ZBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDOUlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDeHRCQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzdMQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ2pEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzFGQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNoMERBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzlCQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDdkJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDL1RBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNuRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ25DQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQy9WQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDclZBO0FBQ0E7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7OztBQU1BO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBS0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQWZBO0FBQ0E7QUFnQkE7QUFDQTtBQWhCQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBRUE7Ozs7O0FBaUJBO0FBQUE7O0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFHQTtBQUFBO0FBQ0E7QUFDQTs7QUFKQTtBQU1BO0FBTkE7QUFDQTs7QUFLQTtBQUFBO0FBQUE7QUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7OztBQzlDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMzUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbHpCQTtBQUNBOzs7QUFBQTtBQUNBO0FBQUE7QUFDQTs7Ozs7O0FBVEE7Ozs7OztBQVVBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFTQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFIQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQVhBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBREE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUhBO0FBS0E7Ozs7O0FBYUE7QUFDQTs7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUdBO0FBQUE7QUFDQTtBQUNBOztBQUpBO0FBTUE7QUFOQTtBQUNBOztBQUtBO0FBQUE7QUFBQTtBQUFBOzs7O0FBUUE7QUFDQTtBQUFBOztBQUFBO0FBQ0E7QUFEQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBOzs7O0FBT0E7QUFFQTtBQUNBO0FBRUE7O0FBQUE7QUFDQTtBQURBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFFQTs7QUFEQTtBQUlBO0FBSkE7QUFJQTtBQUFBO0FBRUE7QUFGQTs7O0FBRUE7QUFDQTtBQURBO0FBQUE7O0FBQ0E7QUFFQTtBQUZBO0FBQUE7QUFFQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUpBO0FBQUE7QUFBQTtBQUNBO0FBT0E7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUNBO0FBREE7QUFBQTs7QUFDQTtBQUNBO0FBREE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTs7QUFJQTtBQUNBO0FBREE7QUFBQTs7Ozs7OztBQWVBO0FBRUE7QUFDQTtBQUNBO0FBRkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QSIsInNvdXJjZVJvb3QiOiIifQ==