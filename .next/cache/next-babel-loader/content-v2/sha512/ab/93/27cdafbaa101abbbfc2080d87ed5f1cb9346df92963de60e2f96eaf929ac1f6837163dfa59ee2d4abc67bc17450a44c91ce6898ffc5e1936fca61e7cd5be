{"ast":null,"code":"var _jsxFileName = \"/Users/eimanalwahhabi/Desktop/RecycleChain/pages/registration.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\nThis is the registration page where the goverment entity registers stakeholders \nContact used here: an instance of register.sol \nTo run the app, use the command npm run dev\n*/\nimport React, { Component } from 'react';\nimport { Menu, Form, Button, Input, Message, Container, Grid } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport registerContract from '../ethereum/register'; // import SC instance\n\nimport Layout from '../components/Layout';\n\nclass registrationPage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleDismiss\", () => {\n      this.setState({\n        visible: false\n      });\n    });\n\n    _defineProperty(this, \"onRegisterManu\", async event => {\n      event.preventDefault(); // prevents the browser from submitting the form immediately\n\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        web3.eth.handleRevert = true;\n        registerContract.handleRevert = true;\n        await registerContract.methods.registerManufactuerer(this.state.manufacturerAddr, this.state.manufacturerLocation, this.state.manufacturerName).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        console.log(err);\n        this.setState({\n          errorMessage: err\n        });\n        this.setState({\n          hasError: false\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage) this.setState({\n        hasNoError: true\n      });\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"onRegisterBuyer\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        loading: true,\n        errorMessage1: ''\n      });\n\n      try {\n        await registerContract.methods.registerBuyer(this.state.buyerAddr, this.state.buyerName, this.state.buyerLocation, this.state.buyerBusiness).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage1: err.message\n        });\n        this.setState({\n          hasError1: false\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage1) this.setState({\n        hasNoError1: true\n      });\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"onRegisterSeller\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        loading: true,\n        errorMessage2: ''\n      });\n\n      try {\n        await registerContract.methods.registerSeller(this.state.sellerAddr, this.state.sellerLocation, this.state.sellerName, this.state.sortingMachines).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage2: err.message\n        });\n        this.setState({\n          hasError2: false\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage2) this.setState({\n        hasNoError2: true\n      });\n      this.setState({\n        loading: false\n      });\n    });\n\n    this.state = {\n      selectManufacturer: true,\n      selectSortingFacility: false,\n      selectBuyer: false,\n      manufacturerName: '',\n      manufacturerAddr: '',\n      manufacturerLocation: '',\n      buyerName: '',\n      buyerAddr: '',\n      buyerLocation: '',\n      buyerBusiness: '',\n      sellerName: '',\n      sellerAddr: '',\n      sellerLocation: '',\n      sortingMachines: [],\n      inputSize: 0,\n      errorMessage: '',\n      hasNoError: false,\n      errorMessage1: '',\n      hasNoError1: false,\n      errorMessage2: '',\n      hasNoError2: false,\n      loading: false,\n      visible: ''\n    };\n  } // Dynamic fields appear based on number of sorting machines \n\n\n  handleOnChange(value) {\n    this.setState({\n      inputSize: value.target.value\n    });\n  }\n\n  renderInputs(value) {\n    const inputs = [];\n\n    for (let i = 0; i < value; i++) {\n      inputs.push(__jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }\n      }, __jsx(Input, {\n        value: this.state.sortingMachines[i],\n        onChange: event => {\n          const newSortingMachines = [...this.state.sortingMachines];\n          newSortingMachines[i] = event.target.value;\n          this.setState({\n            sortingMachines: newSortingMachines\n          });\n        },\n        icon: \"ethereum\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      })));\n\n      for (let i = 0; i < value; i++) {\n        console.log(this.state.sortingMachines[i]);\n      }\n    }\n\n    return inputs;\n  } //Register a Manufactuerer & interact with the register SC\n\n\n  render() {\n    console.log(this.state.inputSize);\n    const {\n      selectManufacturer,\n      selectSortingFacility,\n      selectBuyer,\n      manufacturerName,\n      manufacturerAddr,\n      manufacturerLocation,\n      buyerName,\n      buyerAddr,\n      buyerLocation,\n      buyerBusiness,\n      sellerName,\n      sellerAddr,\n      sellerLocation,\n      sortingMachines\n    } = this.state;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"Registration \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, \"Welcome to Goverment Entity Page\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, \"Select a stakeholder to register\"), __jsx(Menu, {\n      widths: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, __jsx(Menu.Item, {\n      name: \"Manufacturer\",\n      onClick: () => this.setState({\n        selectManufacturer: true,\n        selectSortingFacility: false,\n        selectBuyer: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, \" Manufacturer\"), __jsx(Menu.Item, {\n      name: \"SortingFacility\",\n      onClick: () => this.setState({\n        selectSortingFacility: true,\n        selectManufacturer: false,\n        selectBuyer: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    }, \" Sorting Facility\"), __jsx(Menu.Item, {\n      name: \"Buyer\",\n      onClick: () => this.setState({\n        selectBuyer: true,\n        selectSortingFacility: false,\n        selectManufacturer: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }, \" Buyer \")), selectManufacturer && __jsx(\"div\", {\n      className: \"Manufactuerer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 33\n      }\n    }, __jsx(Grid.Row, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 37\n      }\n    }, __jsx(Grid.Column, {\n      width: 6,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 41\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onRegisterManu,\n      error: !!this.state.errorMessage,\n      success: this.state.hasNoError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 45\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 53\n      }\n    }, \"Manufacturer Name\"), __jsx(Input, {\n      value: this.state.manufacturerName,\n      onChange: event => this.setState({\n        manufacturerName: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 53\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 53\n      }\n    }, \"Manufacturer Address\"), __jsx(Input, {\n      value: this.state.manufacturerAddr,\n      icon: \"ethereum\",\n      onChange: event => this.setState({\n        manufacturerAddr: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 53\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 53\n      }\n    }, \"Manufacturer Location\"), __jsx(Input, {\n      value: this.state.manufacturerLocation,\n      onChange: event => this.setState({\n        manufacturerLocation: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 53\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Error!\",\n      onDismiss: this.handleDismiss,\n      content: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 49\n      }\n    }), __jsx(Message, {\n      success: true,\n      header: \"Success!\",\n      onDismiss: this.handleDismiss,\n      content: \"Manufactuerer registered successfully!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 49\n      }\n    }), __jsx(Button, {\n      loading: this.state.loading,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 49\n      }\n    }, \"Register\"))))))), selectBuyer && __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 25\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 33\n      }\n    }, __jsx(Grid.Row, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 37\n      }\n    }, __jsx(Grid.Column, {\n      width: 6,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 41\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onRegisterBuyer,\n      error: !!this.state.errorMessage1,\n      success: this.state.hasNoError1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 45\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 53\n      }\n    }, \"Buyer Name\"), __jsx(Input, {\n      value: this.state.buyerName,\n      onChange: event => this.setState({\n        buyerName: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 53\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 53\n      }\n    }, \"Buyer Address\"), __jsx(Input, {\n      value: this.state.buyerAddr,\n      icon: \"ethereum\",\n      onChange: event => this.setState({\n        buyerAddr: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 53\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 53\n      }\n    }, \"Buyer Business Type\"), __jsx(Input, {\n      value: this.state.BuyerBusiness,\n      onChange: event => this.setState({\n        buyerBusiness: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 53\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 53\n      }\n    }, \"Buyer Location\"), __jsx(Input, {\n      value: this.state.buyerLocation,\n      onChange: event => this.setState({\n        buyerLocation: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 53\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Error!\",\n      content: this.state.errorMessage1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 49\n      }\n    }), __jsx(Message, {\n      success: true,\n      header: \"Success!\",\n      content: \"Buyer registered successfully!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 49\n      }\n    }), __jsx(Button, {\n      loading: this.state.loading,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 49\n      }\n    }, \"Register\"))))))), selectSortingFacility && __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 25\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 33\n      }\n    }, __jsx(Grid.Row, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 37\n      }\n    }, __jsx(Grid.Column, {\n      width: 6,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 41\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onRegisterSeller,\n      error: !!this.state.errorMessage2,\n      success: this.state.hasNoError2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 45\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 53\n      }\n    }, \"Sorting Facility Name\"), __jsx(Input, {\n      value: this.state.sellerName,\n      onChange: event => this.setState({\n        sellerName: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 53\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 53\n      }\n    }, \"Sorting Facility Address\"), __jsx(Input, {\n      value: this.state.sellerAddr,\n      icon: \"ethereum\",\n      onChange: event => this.setState({\n        sellerAddr: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 53\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 53\n      }\n    }, \"Sorting Facility Location\"), __jsx(Input, {\n      value: this.state.sellerLocation,\n      onChange: event => this.setState({\n        sellerLocation: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 53\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 49\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 53\n      }\n    }, \"Sorting Machines Address\"), __jsx(\"input\", {\n      type: \"number\",\n      name: \"quantity\",\n      min: \"1\",\n      max: \"7\",\n      placeholder: \"Select number of machines in facility\",\n      onChange: value => this.handleOnChange(value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 53\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 53\n      }\n    }, this.renderInputs(this.state.inputSize))), __jsx(Message, {\n      error: true,\n      header: \"Error!\",\n      content: this.state.errorMessage2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 49\n      }\n    }), __jsx(Message, {\n      success: true,\n      header: \"Success!\",\n      content: \"Seller registered successfully!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 49\n      }\n    }), __jsx(Button, {\n      loading: this.state.loading,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 49\n      }\n    }, \"Register\")))))))));\n  }\n\n} //At the end of each page, a component is expected to be returned \n// If not, Next.js throws an error \n\n\nexport default registrationPage;","map":{"version":3,"sources":["/Users/eimanalwahhabi/Desktop/RecycleChain/pages/registration.js"],"names":["React","Component","Menu","Form","Button","Input","Message","Container","Grid","web3","registerContract","Layout","registrationPage","constructor","props","setState","visible","event","preventDefault","accounts","eth","getAccounts","loading","errorMessage","handleRevert","methods","registerManufactuerer","state","manufacturerAddr","manufacturerLocation","manufacturerName","send","from","err","console","log","hasError","hasNoError","errorMessage1","registerBuyer","buyerAddr","buyerName","buyerLocation","buyerBusiness","message","hasError1","hasNoError1","errorMessage2","registerSeller","sellerAddr","sellerLocation","sellerName","sortingMachines","hasError2","hasNoError2","selectManufacturer","selectSortingFacility","selectBuyer","inputSize","handleOnChange","value","target","renderInputs","inputs","i","push","newSortingMachines","render","onRegisterManu","handleDismiss","onRegisterBuyer","BuyerBusiness","onRegisterSeller"],"mappings":"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","sourcesContent":["/*\nThis is the registration page where the goverment entity registers stakeholders \nContact used here: an instance of register.sol \nTo run the app, use the command npm run dev\n*/\n\nimport React, { Component } from 'react';\nimport { Menu, Form, Button, Input, Message, Container, Grid } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport registerContract from '../ethereum/register'; // import SC instance\nimport Layout from '../components/Layout';\n\nclass registrationPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectManufacturer: true,\n            selectSortingFacility: false,\n            selectBuyer: false,\n            manufacturerName: '',\n            manufacturerAddr: '',\n            manufacturerLocation: '',\n            buyerName: '',\n            buyerAddr: '',\n            buyerLocation: '',\n            buyerBusiness: '',\n            sellerName: '',\n            sellerAddr: '',\n            sellerLocation: '',\n            sortingMachines: [],\n            inputSize: 0,\n            errorMessage: '',\n            hasNoError: false,\n            errorMessage1: '',\n            hasNoError1: false,\n            errorMessage2: '',\n            hasNoError2: false,\n            loading: false,\n            visible: ''\n        };\n    }\n\n    // Dynamic fields appear based on number of sorting machines \n    handleOnChange(value) { this.setState({ inputSize: value.target.value }); }\n    handleDismiss = () => { this.setState({ visible: false }) }\n\n    renderInputs(value) {\n        const inputs = [];\n        for (let i = 0; i < value; i++) {\n            inputs.push(<div>\n                <Input value={this.state.sortingMachines[i]}\n                    onChange={(event) => {\n                        const newSortingMachines = [...this.state.sortingMachines];\n                        newSortingMachines[i] = event.target.value;\n                        this.setState({ sortingMachines: newSortingMachines })\n                    }}\n                    icon=\"ethereum\" />\n            </div>\n            )\n\n            for (let i = 0; i < value; i++) {\n                console.log(this.state.sortingMachines[i]);\n            }\n        }\n        return inputs;\n    }\n\n    //Register a Manufactuerer & interact with the register SC\n    onRegisterManu = async (event) => {\n\n        event.preventDefault(); // prevents the browser from submitting the form immediately\n\n        const accounts = await web3.eth.getAccounts();\n\n        this.setState({ loading: true, errorMessage: '' });\n\n        try {\n            web3.eth.handleRevert = true;\n            registerContract.handleRevert = true; \n            await registerContract.methods\n                .registerManufactuerer(this.state.manufacturerAddr, this.state.manufacturerLocation, this.state.manufacturerName)\n                .send({ from: accounts[0] });\n        } catch (err) {\n            console.log(err)\n            this.setState({ errorMessage: err });\n            this.setState({ hasError: false });\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage)\n            this.setState({ hasNoError: true });\n\n        this.setState({ loading: false });\n    };\n\n\n    //Register a buyer & interact with the register SC\n    onRegisterBuyer = async (event) => {\n\n        event.preventDefault();\n\n        const accounts = await web3.eth.getAccounts();\n\n        this.setState({ loading: true, errorMessage1: '' });\n\n        try {\n            await registerContract.methods\n                .registerBuyer(this.state.buyerAddr, this.state.buyerName, this.state.buyerLocation, this.state.buyerBusiness)\n                .send({ from: accounts[0] });\n        } catch (err) {\n            this.setState({ errorMessage1: err.message });\n            this.setState({ hasError1: false });\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage1)\n            this.setState({ hasNoError1: true });\n\n        this.setState({ loading: false });\n    };\n\n    //Register a sorting facility & interact with the register SC\n    onRegisterSeller = async (event) => {\n\n        event.preventDefault();\n\n        const accounts = await web3.eth.getAccounts();\n\n        this.setState({ loading: true, errorMessage2: '' });\n\n        try {\n\n            await registerContract.methods\n                .registerSeller(this.state.sellerAddr, this.state.sellerLocation, this.state.sellerName, this.state.sortingMachines)\n                .send({ from: accounts[0] });\n        } catch (err) {\n            this.setState({ errorMessage2: err.message });\n            this.setState({ hasError2: false });\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage2)\n            this.setState({ hasNoError2: true });\n\n        this.setState({ loading: false });\n    };\n\n\n\n    render() {\n\n        console.log(this.state.inputSize);\n\n        const {\n            selectManufacturer,\n            selectSortingFacility,\n            selectBuyer,\n            manufacturerName,\n            manufacturerAddr,\n            manufacturerLocation,\n            buyerName,\n            buyerAddr,\n            buyerLocation,\n            buyerBusiness,\n            sellerName,\n            sellerAddr,\n            sellerLocation,\n            sortingMachines } = this.state\n\n        return (\n\n            <Layout>\n                <div className=\"Registration \">\n                    <h1>Welcome to Goverment Entity Page</h1>\n                    <link rel=\"stylesheet\"\n                        href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\n                    />\n                    <h2>Select a stakeholder to register</h2>\n                    <Menu widths={3}>\n                        <Menu.Item name='Manufacturer' onClick={() => this.setState({ selectManufacturer: true, selectSortingFacility: false, selectBuyer: false })} > Manufacturer</Menu.Item>\n                        <Menu.Item name='SortingFacility' onClick={() => this.setState({ selectSortingFacility: true, selectManufacturer: false, selectBuyer: false })} > Sorting Facility</Menu.Item>\n                        <Menu.Item name='Buyer' onClick={() => this.setState({ selectBuyer: true, selectSortingFacility: false, selectManufacturer: false })} > Buyer </Menu.Item>\n                    </Menu>\n\n\n\n                    {selectManufacturer && (\n\n                        <div className='Manufactuerer' >\n                            <Container>\n                                <Grid>\n                                    <Grid.Row centered>\n                                        <Grid.Column width={6} textAlign=\"center\">\n                                            <Form onSubmit={this.onRegisterManu} error={!!this.state.errorMessage} success={this.state.hasNoError}>\n                                                <Form.Field>\n                                                    <label>Manufacturer Name</label>\n                                                    <Input value={this.state.manufacturerName}\n                                                        onChange={event => this.setState({ manufacturerName: event.target.value })} />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                    <label>Manufacturer Address</label>\n                                                    <Input value={this.state.manufacturerAddr}\n                                                        icon=\"ethereum\"\n                                                        onChange={event => this.setState({ manufacturerAddr: event.target.value })} />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                    <label>Manufacturer Location</label>\n                                                    <Input value={this.state.manufacturerLocation}\n                                                        onChange={event => this.setState({ manufacturerLocation: event.target.value })} />\n                                                </Form.Field>\n\n                                                <Message error header=\"Error!\" \n                                                 onDismiss={this.handleDismiss}\n                                                content={this.state.errorMessage} />\n\n\n                                                <Message success header=\"Success!\" \n                                                 onDismiss={this.handleDismiss}\n                                                 content=\"Manufactuerer registered successfully!\" />\n\n\n                                                <Button loading={this.state.loading} type='submit'>Register</Button>\n                                            </Form>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            </Container>\n                        </div>\n\n                    )}\n\n                    {selectBuyer && (\n                        <div>\n                            <Container>\n                                <Grid>\n                                    <Grid.Row centered>\n                                        <Grid.Column width={6} textAlign=\"center\">\n                                            <Form onSubmit={this.onRegisterBuyer} error={!!this.state.errorMessage1} success={this.state.hasNoError1} >\n                                                <Form.Field>\n                                                    <label>Buyer Name</label>\n                                                    <Input value={this.state.buyerName}\n                                                        onChange={event => this.setState({ buyerName: event.target.value })} />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                    <label>Buyer Address</label>\n                                                    <Input value={this.state.buyerAddr}\n                                                        icon=\"ethereum\"\n                                                        onChange={event => this.setState({ buyerAddr: event.target.value })} />\n                                                </Form.Field>\n                                                <Form.Field >\n                                                    <label>Buyer Business Type</label>\n                                                    <Input value={this.state.BuyerBusiness}\n                                                        onChange={event => this.setState({ buyerBusiness: event.target.value })} />\n                                                </Form.Field>\n                                                <Form.Field >\n                                                    <label>Buyer Location</label>\n                                                    <Input value={this.state.buyerLocation}\n                                                        onChange={event => this.setState({ buyerLocation: event.target.value })} />\n                                                </Form.Field>\n\n                                                <Message error header=\"Error!\" content={this.state.errorMessage1} />\n\n                                                <Message success header=\"Success!\" content=\"Buyer registered successfully!\" />\n\n                                                <Button loading={this.state.loading} type='submit'>Register</Button>\n                                            </Form>\n\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            </Container>\n                        </div>\n\n                    )}\n\n                    {selectSortingFacility && (\n                        <div>\n                            <Container>\n                                <Grid>\n                                    <Grid.Row centered>\n                                        <Grid.Column width={6} textAlign=\"center\">\n                                            <Form onSubmit={this.onRegisterSeller} error={!!this.state.errorMessage2} success={this.state.hasNoError2}>\n                                                <Form.Field >\n                                                    <label>Sorting Facility Name</label>\n                                                    <Input value={this.state.sellerName}\n                                                        onChange={event => this.setState({ sellerName: event.target.value })} />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                    <label>Sorting Facility Address</label>\n                                                    <Input value={this.state.sellerAddr}\n                                                        icon=\"ethereum\"\n                                                        onChange={event => this.setState({ sellerAddr: event.target.value })} />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                    <label>Sorting Facility Location</label>\n                                                    <Input value={this.state.sellerLocation}\n                                                        onChange={event => this.setState({ sellerLocation: event.target.value })} />\n                                                </Form.Field>\n\n                                                <Form.Field >\n                                                    <label>Sorting Machines Address</label>\n                                                    <input type=\"number\" name=\"quantity\" min=\"1\" max=\"7\" placeholder=\"Select number of machines in facility\" onChange={(value) => this.handleOnChange(value)} />\n                                                    <div>\n                                                        {this.renderInputs(this.state.inputSize)}\n                                                    </div>\n                                                </Form.Field>\n\n                                                <Message error header=\"Error!\" content={this.state.errorMessage2} />\n\n                                                <Message success header=\"Success!\" content=\"Seller registered successfully!\" />\n\n                                                <Button loading={this.state.loading} type='submit'>Register</Button>\n                                            </Form>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            </Container>\n                        </div>\n\n                    )}\n\n\n                </div>\n            </Layout >\n        );\n    }\n\n}\n\n//At the end of each page, a component is expected to be returned \n// If not, Next.js throws an error \nexport default registrationPage; "]},"metadata":{},"sourceType":"module"}