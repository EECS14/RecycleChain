{"ast":null,"code":"var _jsxFileName = \"/Users/eimanalwahhabi/Desktop/RecycleChain/pages/sortingmachine.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Menu, Button, Message, Form, Input, Container, Grid } from 'semantic-ui-react';\nimport dynamic from 'next/dynamic';\nconst QRReader = dynamic(() => import('react-qr-reader'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-qr-reader')],\n    modules: ['react-qr-reader']\n  }\n});\nimport web3 from '../ethereum/web3';\nimport trackingContract from '../ethereum/tracking';\nimport Layout from '../components/Layout';\nimport ipfs from './ipfs';\n\nclass sortingmachine extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleScan\", async data => {\n      if (data) {\n        this.setState({\n          result: data\n        });\n        this.sortBottle();\n      }\n    });\n\n    _defineProperty(this, \"handleError\", err => {\n      console.error(err);\n    });\n\n    _defineProperty(this, \"onScan\", async event => {\n      event.preventDefault();\n\n      if (this.state.qr === false) {\n        this.setState({\n          qr: true\n        });\n      } else {\n        this.setState({\n          qr: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"sortBottle\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        errorMessage: ''\n      });\n\n      try {\n        await trackingContract.methods.updateStatusSorted(this.state.registerSCAddress, this.state.sellerAddress, this.state.result).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"onSetBaleLimit\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        loading: true,\n        errorMessage1: ''\n      });\n\n      try {\n        await trackingContract.methods.setBottlesSortedLimit(this.state.bottlesLimit).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage1: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"captureFile\", event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = async () => {\n        //file is converted to a buffer for upload to IPFS\n        const buffer = await Buffer.from(reader.result);\n        this.setState({\n          buffer\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    });\n\n    _defineProperty(this, \"onUpload\", async event => {\n      event.preventDefault(); // to upload image to IPFS\n\n      const result = await ipfs.add(this.state.buffer);\n      this.setState({\n        ipfsHash: result.path\n      });\n      console.log('ifpsHash', this.state.ipfsHash);\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        loadingPic: true,\n        errorMessage1: ''\n      }); //to upload image to blockcahin\n\n      try {\n        await trackingContract.methods.setBaleIPFSHash(this.state.ipfsHash).send({\n          from: accounts[0]\n        });\n        this.setState({\n          IPFSPic: true\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage1: err.message\n        });\n      }\n\n      this.setState({\n        loadingPic: false\n      });\n    });\n\n    this.state = {\n      productionMachine: false,\n      sortingMachine: false,\n      result: '',\n      buffer: '',\n      //(new)\n      ipfsHash: null,\n      //(new)\n      qr: false,\n      sellerAddress: '0x33b5dCc58986e735d7718692e36E18d00a8Ac1C7',\n      registerSCAddress: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\n      errorMessage: '',\n      hasNoError: false,\n      bottlesLimit: '',\n      errorMessage1: '',\n      loading: false,\n      loadingPic: false,\n      IPFSPic: false\n    };\n  } // QR reader functions \n\n\n  render() {\n    const {\n      qr\n    } = this.state;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"SortingMachine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, \"Welcome to Sorting Machine Page\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }), __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, __jsx(Grid.Row, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }, __jsx(Grid.Column, {\n      width: 6,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 33\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onSetBaleLimit,\n      error: !!this.state.errorMessage1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 37\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 41\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 45\n      }\n    }, \"Number of Bottles in a Plastic Bale\"), __jsx(Input, {\n      value: this.state.bottlesLimit,\n      onChange: event => this.setState({\n        bottlesLimit: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 45\n      }\n    })), __jsx(Button, {\n      loading: this.state.loading,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 41\n      }\n    }, \"Set Limit\")), __jsx(Form, {\n      onSubmit: this.onUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 41\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 45\n      }\n    }, \"Upload Plastic Bale Picture\"), __jsx(Input, {\n      type: \"file\",\n      onChange: this.captureFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 45\n      }\n    })), __jsx(Button, {\n      loading: this.state.loadingPic,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 41\n      }\n    }, \"Upload Picture\")), __jsx(Form, {\n      error: !!this.state.errorMessage,\n      success: this.state.hasNoError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 37\n      }\n    }, __jsx(\"div\", {\n      className: \"Scanner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 41\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 45\n      }\n    }), \" \", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 52\n      }\n    }), __jsx(Button, {\n      className: \"QrReader\",\n      style: {\n        'vertical-align': 'middle'\n      },\n      onClick: this.onScan,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 45\n      }\n    }, \" Scan QR Code\"), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 45\n      }\n    }, \" \", this.state.qr === true ? __jsx(QRReader, {\n      delay: 300,\n      onError: this.handleError,\n      onScan: this.handleScan,\n      style: {\n        width: \"35%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 78\n      }\n    }) : '', \" \"), __jsx(Message, {\n      error: true,\n      header: \"Error!\",\n      content: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 45\n      }\n    }), __jsx(Message, {\n      success: true,\n      header: \"Success!\",\n      content: \"Plastic bottle status is updated successfully by sorting machine!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 45\n      }\n    }))), __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 37\n      }\n    }, this.state.IPFSPic == true ? __jsx(\"img\", {\n      src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n      alt: \"\",\n      class: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 37\n      }\n    }) : '')))))));\n  }\n\n} //At the end of each page, a component is expected to be returned \n// If not, Next.js throws an error \n\n\nexport default sortingmachine;","map":{"version":3,"sources":["/Users/eimanalwahhabi/Desktop/RecycleChain/pages/sortingmachine.js"],"names":["React","Component","Menu","Button","Message","Form","Input","Container","Grid","dynamic","QRReader","ssr","web3","trackingContract","Layout","ipfs","sortingmachine","constructor","props","data","setState","result","sortBottle","err","console","error","event","preventDefault","state","qr","accounts","eth","getAccounts","errorMessage","methods","updateStatusSorted","registerSCAddress","sellerAddress","send","from","message","loading","errorMessage1","setBottlesSortedLimit","bottlesLimit","stopPropagation","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","log","add","ipfsHash","path","loadingPic","setBaleIPFSHash","IPFSPic","productionMachine","sortingMachine","hasNoError","render","onSetBaleLimit","value","onUpload","captureFile","onScan","handleError","handleScan","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Menu, Button, Message, Form, Input, Container, Grid } from 'semantic-ui-react';\n\nimport dynamic from 'next/dynamic';\nconst QRReader = dynamic(() => import('react-qr-reader'), { ssr: false });\n\nimport web3 from '../ethereum/web3';\nimport trackingContract from '../ethereum/tracking';\nimport Layout from '../components/Layout';\nimport ipfs from './ipfs';\n\nclass sortingmachine extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            productionMachine: false,\n            sortingMachine: false,\n            result: '',\n            buffer:'',  //(new)\n            ipfsHash: null, //(new)\n            qr: false,\n            sellerAddress: '0x33b5dCc58986e735d7718692e36E18d00a8Ac1C7',\n            registerSCAddress: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\n            errorMessage: '',\n            hasNoError: false,\n            bottlesLimit: '',\n            errorMessage1: '',\n            loading: false,\n            loadingPic:false,\n            IPFSPic: false\n        };\n    }\n\n\n\n    // QR reader functions \n    handleScan = async (data) => {\n        if (data) {\n            this.setState({ result: data });\n            this.sortBottle();\n\n        }\n    }\n\n    handleError = err => {\n        console.error(err)\n    }\n\n    onScan = async (event) => {\n        event.preventDefault();\n        if (this.state.qr === false) {\n            this.setState({ qr: true });\n        }\n        else {\n            this.setState({ qr: false });\n        }\n    };\n\n    // Log bottle as disposed \n    sortBottle = async () => {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({ errorMessage: '' });\n\n        try {\n            await trackingContract.methods\n                .updateStatusSorted(this.state.registerSCAddress, this.state.sellerAddress, this.state.result)\n                .send({ from: accounts[0] });\n        } catch (err) {\n            this.setState({ errorMessage: err.message });\n\n        }\n\n        this.setState({ loading: false });\n\n    };\n\n    // Controls the size of the plastic bale \n    onSetBaleLimit = async (event) => {\n\n        event.preventDefault();\n        const accounts = await web3.eth.getAccounts();\n        this.setState({ loading: true, errorMessage1: '' });\n\n\n        try {\n            await trackingContract.methods\n                .setBottlesSortedLimit(this.state.bottlesLimit)\n                .send({ from: accounts[0] });\n        } catch (err) {\n            this.setState({ errorMessage1: err.message });\n\n        }\n\n        this.setState({ loading: false });\n\n    };\n\n\n    //(new)\n    captureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault();\n        const file = event.target.files[0]\n        let reader = new window.FileReader() \n        reader.readAsArrayBuffer(file)\n        reader.onloadend = async () => { //file is converted to a buffer for upload to IPFS\n            const buffer = await Buffer.from(reader.result);\n            this.setState({buffer});\n            console.log('buffer', this.state.buffer)}   \n      };//Capture File\n\n    onUpload = async(event) =>  {\n        event.preventDefault();\n\n        // to upload image to IPFS\n        const result = await ipfs.add(this.state.buffer);\n        this.setState({ ipfsHash: result.path })\n        console.log('ifpsHash', this.state.ipfsHash)\n        \n        const accounts = await web3.eth.getAccounts();\n        this.setState({ loadingPic: true, errorMessage1: '' });\n\n        //to upload image to blockcahin\n        try {\n            await trackingContract.methods\n                .setBaleIPFSHash(this.state.ipfsHash)\n                .send({ from: accounts[0] });\n            this.setState({ IPFSPic: true });\n        } catch (err) {\n            this.setState({ errorMessage1: err.message });\n\n        }\n        \n       this.setState({ loadingPic: false });\n    }\n\n\n    render() {\n\n        const { qr } = this.state\n\n        return (\n            <Layout>\n\n                <link rel=\"stylesheet\"\n                    href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\n                />\n                <div className='SortingMachine'>\n                    <h1>Welcome to Sorting Machine Page</h1>\n                    <br/>\n                \n                    <Container>\n                        <Grid>\n                            <Grid.Row centered>\n                                <Grid.Column width={6} textAlign=\"center\">\n\n                                    <Form onSubmit={this.onSetBaleLimit} error={!!this.state.errorMessage1} >\n                                        <Form.Field>\n                                            <label>Number of Bottles in a Plastic Bale</label>\n                                            <Input value={this.state.bottlesLimit}\n                                                onChange={event => this.setState({ bottlesLimit: event.target.value })} />\n                                        </Form.Field>\n                                        <Button loading={this.state.loading} type='submit'>Set Limit</Button>\n                                    </Form>\n\n                                    <Form onSubmit={this.onUpload }>\n                                        <Form.Field>\n                                            <label>Upload Plastic Bale Picture</label>\n                                            <Input type='file'\n                                                onChange={this.captureFile}/>\n                                        </Form.Field>\n                                        <Button loading={this.state.loadingPic} type='submit'>Upload Picture</Button>\n                                    </Form>\n\n                                    <Form error={!!this.state.errorMessage} success={this.state.hasNoError} >\n                                        <div className=\"Scanner\" >\n                                            <br /> <br />\n                                          \n                                            <Button className=\"QrReader\" style={{ 'vertical-align': 'middle' }} onClick={this.onScan} > Scan QR Code</Button>\n                                            <div> {this.state.qr === true ? (<QRReader\n                                                delay={300}\n                                                onError={this.handleError}\n                                                onScan={this.handleScan}\n                                                style={{ width: \"35%\" }}\n                                            />\n                                            )\n                                                : ''} </div>\n\n                                            <Message error header=\"Error!\" content={this.state.errorMessage} />\n\n                                            <Message success header=\"Success!\" content=\"Plastic bottle status is updated successfully by sorting machine!\" />\n\n                                        </div>\n\n                                    </Form>\n\n                                    <label>{this.state.IPFSPic == true ? \n                                    <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\" class=\"center\"/> : ''} \n                                    </label>\n                                    \n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Container>\n\n                </div>\n\n\n\n\n            </Layout>\n\n        );\n    }\n\n}\n\n//At the end of each page, a component is expected to be returned \n// If not, Next.js throws an error \nexport default sortingmachine; "]},"metadata":{},"sourceType":"module"}