{"ast":null,"code":"var _jsxFileName = \"/Users/eimanalwahhabi/Desktop/RecycleChain/pages/auctions/joinAuction.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Icon, Container, Grid, Statistic } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport plasticBaleContract from '../../ethereum/plasticBale';\nimport registerContract from '../../ethereum/register';\nimport Layout from '../../components/Layout';\nimport dynamic from 'next/dynamic';\nconst DateCountdown = dynamic(() => import('react-date-countdown-timer'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-date-countdown-timer')],\n    modules: ['react-date-countdown-timer']\n  }\n});\nimport axios from 'axios';\n\nclass joinAuction extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      const plasticBaleSC = plasticBaleContract(this.props.address);\n      var biddersnumber = 0;\n      var highestbid = 0;\n      var isJoin = false;\n      var time = ''; //closing time\n\n      var firstPart = '';\n      var secondPart = '';\n      var ct = ''; // temp closing date\n\n      plasticBaleSC.getPastEvents(\"allEvents\", {\n        fromBlock: 0,\n        toBlock: 'latest'\n      }, (error, events) => {\n        const myfunction = item => {\n          if (item.event === 'bidderRegistered') {\n            biddersnumber++;\n            item.returnValues['bidderAddress'] === accounts[0] ? isJoin = true : null;\n          } else if (item.event === 'auctionStarted') {\n            highestbid = item.returnValues['startingAmount']; //1. Get closing time from event\n\n            time = new Date(item.returnValues['closingTime'] * 1000);\n            console.log(time);\n            this.initializeClock('clockdiv', time);\n            /* \n            //2. Formating the date for the date counter input\n            const options = { year: 'numeric', month: 'long', day: 'numeric' };\n            firstPart = time.toLocaleDateString('en-US', options);\n            console.log(firstPart);\n            //3. Get orginal GMT time from the var time\n            secondPart = time.toString().slice(15, 24);\n            secondPart = secondPart.concat(\" GMT+04:00\");\n            console.log(secondPart);\n            //4. concat the two strings into the desired form\n            ct = firstPart.concat(secondPart);\n            console.log(ct); \n            */\n          } else if (item.event === 'bidderExited') {\n            //console.log(item);\n            item.returnValues['bidderAddress'] === accounts[0] ? isJoin = false : null;\n            biddersnumber--;\n          } else if (item.event === 'bidPlaced') {\n            highestbid = item.returnValues['amount'];\n            this.findHighestBidder(item.returnValues['biddeAddress']);\n          }\n        };\n\n        events.forEach(myfunction);\n        this.setState({\n          totalBidders: biddersnumber,\n          highestBid: highestbid,\n          join: isJoin,\n          closingTime: time\n        });\n      });\n      axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH&tsyms=USD').then(res => {\n        const cryptos = res.data;\n        console.log(cryptos);\n        this.setState({\n          cryptos: cryptos\n        });\n      });\n    });\n\n    _defineProperty(this, \"getTimeRemaining\", endtime => {\n      const total = Date.parse(endtime) - Date.parse(new Date());\n      const seconds = Math.floor(total / 1000 % 60);\n      const minutes = Math.floor(total / 1000 / 60 % 60);\n      const hours = Math.floor(total / (1000 * 60 * 60) % 24);\n      const days = Math.floor(total / (1000 * 60 * 60 * 24));\n      return {\n        total,\n        days,\n        hours,\n        minutes,\n        seconds\n      };\n    });\n\n    _defineProperty(this, \"onJoinAuction\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n        await plasticBaleSC.methods.addBidder(this.state.registrationSCAddr, accounts[0]).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage) {\n        this.setState({\n          join: true\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"findHighestBidder\", async address => {\n      const accounts = await web3.eth.getAccounts();\n      await registerContract.methods.getBuyerDetails(address).call(function (error, result) {\n        this.setState({\n          highestBidder: result[1],\n          highestBidderAddress: result[0]\n        });\n      }.bind(this));\n    });\n\n    _defineProperty(this, \"onPlaceBid\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading2: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n        await plasticBaleSC.methods.placeBid(this.state.registrationSCAddr, this.state.bid).send({\n          from: accounts[0],\n          value: this.state.bid\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage) this.setState({\n        hasNoError: true\n      });\n      this.setState({\n        loading2: false\n      });\n    });\n\n    _defineProperty(this, \"onExitAuction\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading3: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n        await plasticBaleSC.methods.exitAuction(this.state.registrationSCAddr).send({\n          from: accounts[0]\n        });\n        this.setState({\n          join: false\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage) this.setState({\n        hasNoError: true\n      });\n      this.setState({\n        loading3: false\n      });\n    });\n\n    _defineProperty(this, \"onEndAuction\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n        await plasticBaleSC.methods.endAuction().send({\n          from: accounts[0],\n          gas: 250983\n        });\n        this.setState({\n          notOver: false\n        });\n      } catch (err) {\n        // REVERT REASON IS ALMOST SHOWN HERE\n        console.log(err);\n        this.setState({\n          errorMessage: err\n        });\n        this.setState({\n          hasError: false\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"convertToEther\", () => {\n      this.setState({\n        dollars: false,\n        eth: true\n      });\n    });\n\n    _defineProperty(this, \"convertToDollars\", () => {\n      var dollar = this.state.highestBid;\n      dollar = (dollar * this.state.cryptos.ETH.USD).toFixed(2);\n      console.log(dollar);\n      this.setState({\n        dollarValue: dollar,\n        dollars: true,\n        eth: false\n      });\n    });\n\n    this.state = {\n      join: false,\n      registrationSCAddr: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\n      errorMessage: '',\n      loading: false,\n      totalBidders: 0,\n      highestBid: 0,\n      closingTime: 0,\n      highestBidder: 'No bids placed',\n      highestBidderAddress: '',\n      bid: '',\n      loading2: false,\n      loading3: false,\n      cryptos: [],\n      dollarValue: 0,\n      dollars: false,\n      eth: true\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  static async getInitialProps(props) {\n    //fetches address of the bale from URL\n    const {\n      address\n    } = props.query;\n    return {\n      address\n    };\n  }\n\n  initializeClock(id, endtime) {\n    const clock = document.getElementById(id);\n    const timeinterval = setInterval(() => {\n      const t = getTimeRemaining(endtime);\n      clock.innerHTML = 'days: ' + t.days + '<br>' + 'hours: ' + t.hours + '<br>' + 'minutes: ' + t.minutes + '<br>' + 'seconds: ' + t.seconds;\n\n      if (t.total <= 0) {\n        clearInterval(timeinterval);\n      }\n    }, 1000);\n  }\n\n  render() {\n    const {\n      join,\n      dollars,\n      eth,\n      closingTime\n    } = this.state;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 13\n      }\n    }, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"statistic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }\n    }, \"Live Auction\"), __jsx(\"div\", {\n      id: \"clockdiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 25\n      }\n    }, __jsx(\"span\", {\n      class: \"days\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 29\n      }\n    }), __jsx(\"div\", {\n      class: \"smalltext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 29\n      }\n    }, \"Days\")), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 25\n      }\n    }, __jsx(\"span\", {\n      class: \"hours\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 29\n      }\n    }), __jsx(\"div\", {\n      class: \"smalltext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 29\n      }\n    }, \"Hours\")), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 25\n      }\n    }, __jsx(\"span\", {\n      class: \"minutes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 29\n      }\n    }), __jsx(\"div\", {\n      class: \"smalltext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 29\n      }\n    }, \"Minutes\")), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 25\n      }\n    }, __jsx(\"span\", {\n      class: \"seconds\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 29\n      }\n    }), __jsx(\"div\", {\n      class: \"smalltext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 29\n      }\n    }, \"Seconds\"))), console.log(typeof closingTime), __jsx(\"div\", {\n      className: \"countdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 21\n      }\n    }, __jsx(DateCountdown, {\n      dateTo: \"March 30, 2021 14:20:01 GMT+04:00\",\n      dateFrom: \"\",\n      callback: this.endAuction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 25\n      }\n    })), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }\n    }, \" Plastic Bale being auctioned:\", __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 18\n      }\n    }, \" \", this.props.address, \" \"), \" \"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 21\n      }\n    }), __jsx(\"div\", {\n      className: \"AuctionContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }\n    }, __jsx(Statistic.Group, {\n      widths: \"three\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 25\n      }\n    }, dollars == true && eth == false ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 65\n      }\n    }, __jsx(Statistic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 33\n      }\n    }, __jsx(Statistic.Value, {\n      text: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 37\n      }\n    }, this.state.dollarValue, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 41\n      }\n    }), \"USD\"), __jsx(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 37\n      }\n    }, \"Highest Bid\"))) : __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 36\n      }\n    }, __jsx(Statistic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 37\n      }\n    }, __jsx(Statistic.Value, {\n      text: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 41\n      }\n    }, this.state.highestBid, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 45\n      }\n    }), \"ETH\"), __jsx(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 41\n      }\n    }, \"Highest Bid\"))), __jsx(Statistic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 29\n      }\n    }, __jsx(Statistic.Value, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 33\n      }\n    }, __jsx(Icon, {\n      name: \"users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 37\n      }\n    }), \" \", this.state.totalBidders), __jsx(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 33\n      }\n    }, \"Total Bidders\")), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 29\n      }\n    }), __jsx(Statistic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 29\n      }\n    }, __jsx(Statistic.Value, {\n      text: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 33\n      }\n    }, __jsx(Icon, {\n      name: \"user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 37\n      }\n    }), \" \", this.state.highestBidder), __jsx(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 33\n      }\n    }, \"Highest Bidder\"))))), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"conversionButtons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 17\n      }\n    }, __jsx(Button.Group, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }\n    }, __jsx(Button, {\n      onClick: this.convertToEther,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 25\n      }\n    }, \" Ether \"), __jsx(Button.Or, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 25\n      }\n    }), __jsx(Button, {\n      onClick: this.convertToDollars,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 25\n      }\n    }, \"Dollars\"))), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 17\n      }\n    }), join === false ? __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 36\n      }\n    }, __jsx(Grid.Row, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 21\n      }\n    }, __jsx(Grid.Column, {\n      width: 6,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 25\n      }\n    }, __jsx(Button, {\n      loading: this.state.loading,\n      onClick: this.onJoinAuction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 29\n      }\n    }, \"Join Auction \")))) : null, join && __jsx(\"div\", {\n      className: \"auctionInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 21\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 25\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 29\n      }\n    }, __jsx(Grid.Row, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 33\n      }\n    }, __jsx(Grid.Column, {\n      width: 4,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 37\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onPlaceBid,\n      error: !!this.state.errorMessage,\n      success: this.state.hasNoError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 41\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 45\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 49\n      }\n    }, \"Amount\"), __jsx(Input, {\n      value: this.state.bid,\n      label: {\n        basic: true,\n        content: 'Ether'\n      },\n      labelPosition: \"right\",\n      onChange: event => this.setState({\n        bid: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 49\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Error!\",\n      content: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 45\n      }\n    }), __jsx(Message, {\n      success: true,\n      header: \"Success!\",\n      content: \"Bid is Placed!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 45\n      }\n    }), __jsx(Button, {\n      loading: this.state.loading2,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 45\n      }\n    }, \"Place Bid\")), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 41\n      }\n    }), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 41\n      }\n    }, \" You can only exit the auction if no bids were placed!\"), __jsx(Button, {\n      loading: this.state.loading3,\n      onClick: this.onExitAuction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 41\n      }\n    }, \"Exit Auction \")))))));\n  }\n\n}\n\nexport default joinAuction;","map":{"version":3,"sources":["/Users/eimanalwahhabi/Desktop/RecycleChain/pages/auctions/joinAuction.js"],"names":["React","Component","Form","Button","Input","Message","Icon","Container","Grid","Statistic","web3","plasticBaleContract","registerContract","Layout","dynamic","DateCountdown","ssr","axios","joinAuction","constructor","props","accounts","eth","getAccounts","plasticBaleSC","address","biddersnumber","highestbid","isJoin","time","firstPart","secondPart","ct","getPastEvents","fromBlock","toBlock","error","events","myfunction","item","event","returnValues","Date","console","log","initializeClock","findHighestBidder","forEach","setState","totalBidders","highestBid","join","closingTime","get","then","res","cryptos","data","endtime","total","parse","seconds","Math","floor","minutes","hours","days","preventDefault","loading","errorMessage","methods","addBidder","state","registrationSCAddr","send","from","err","message","getBuyerDetails","call","result","highestBidder","highestBidderAddress","bind","loading2","placeBid","bid","value","hasNoError","loading3","exitAuction","endAuction","gas","notOver","hasError","dollars","dollar","ETH","USD","toFixed","dollarValue","componentDidMount","getInitialProps","query","id","clock","document","getElementById","timeinterval","setInterval","t","getTimeRemaining","innerHTML","clearInterval","render","convertToEther","convertToDollars","onJoinAuction","onPlaceBid","basic","content","target","onExitAuction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Button, Input, Message, Icon, Container, Grid, Statistic } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport plasticBaleContract from '../../ethereum/plasticBale';\nimport registerContract from '../../ethereum/register';\nimport Layout from '../../components/Layout';\nimport dynamic from 'next/dynamic';\nconst DateCountdown = dynamic(() => import('react-date-countdown-timer'), { ssr: false })\nimport axios from 'axios';\n\nclass joinAuction extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            join: false,\n            registrationSCAddr: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\n            errorMessage: '',\n            loading: false,\n            totalBidders: 0,\n            highestBid: 0,\n            closingTime: 0,\n            highestBidder: 'No bids placed',\n            highestBidderAddress: '',\n            bid: '',\n            loading2: false,\n            loading3: false,\n            cryptos: [],\n            dollarValue: 0,\n            dollars: false,\n            eth: true,\n        };\n\n        this.componentDidMount = this.componentDidMount.bind(this);\n    }\n\n\n    static async getInitialProps(props) {\n        //fetches address of the bale from URL\n        const { address } = props.query;\n\n        return { address };\n    }\n\n    componentDidMount = async () => {\n\n        const accounts = await web3.eth.getAccounts();\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n\n        var biddersnumber = 0;\n        var highestbid = 0;\n        var isJoin = false;\n        var time = ''; //closing time\n        var firstPart = '';\n        var secondPart = '';\n        var ct = ''; // temp closing date\n\n        plasticBaleSC.getPastEvents(\"allEvents\", { fromBlock: 0, toBlock: 'latest' }, (error, events) => {\n\n            const myfunction = (item) => {\n\n                if (item.event === 'bidderRegistered') {\n                    biddersnumber++;\n                    item.returnValues['bidderAddress'] === accounts[0] ? isJoin = true : null;\n\n\n                } else if (item.event === 'auctionStarted') {\n                    highestbid = item.returnValues['startingAmount'];\n\n                    //1. Get closing time from event\n                    time = new Date(item.returnValues['closingTime'] * 1000);\n                    console.log(time);\n                    this.initializeClock('clockdiv', time);\n                    /* \n                    //2. Formating the date for the date counter input\n                    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n                    firstPart = time.toLocaleDateString('en-US', options);\n                    console.log(firstPart);\n                    //3. Get orginal GMT time from the var time\n                    secondPart = time.toString().slice(15, 24);\n                    secondPart = secondPart.concat(\" GMT+04:00\");\n                    console.log(secondPart);\n                    //4. concat the two strings into the desired form\n                    ct = firstPart.concat(secondPart);\n                    console.log(ct); \n                    */\n\n                } else if (item.event === 'bidderExited') {\n                    //console.log(item);\n                    item.returnValues['bidderAddress'] === accounts[0] ? isJoin = false : null;\n                    biddersnumber--;\n\n                } else if (item.event === 'bidPlaced') {\n                    highestbid = item.returnValues['amount'];\n                    this.findHighestBidder(item.returnValues['biddeAddress']);\n\n                }\n\n            };\n\n            events.forEach(myfunction);\n\n            this.setState({\n                totalBidders: biddersnumber,\n                highestBid: highestbid,\n                join: isJoin,\n                closingTime: time\n            });\n\n\n        });\n\n\n        axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH&tsyms=USD')\n            .then(res => {\n                const cryptos = res.data;\n                console.log(cryptos);\n                this.setState({ cryptos: cryptos });\n            })\n\n    };\n\n\n\n    // Returns a reusable object\n    getTimeRemaining = (endtime) => {\n\n        const total = Date.parse(endtime) - Date.parse(new Date());\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor((total / 1000 / 60) % 60);\n        const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n        const days = Math.floor(total / (1000 * 60 * 60 * 24));\n\n        return {\n            total,\n            days,\n            hours,\n            minutes,\n            seconds\n        };\n    };\n\n\n    initializeClock(id, endtime) {\n        const clock = document.getElementById(id);\n        const timeinterval = setInterval(() => {\n          const t = getTimeRemaining(endtime);\n          clock.innerHTML = 'days: ' + t.days + '<br>' +\n                            'hours: '+ t.hours + '<br>' +\n                            'minutes: ' + t.minutes + '<br>' +\n                            'seconds: ' + t.seconds;\n          if (t.total <= 0) {\n            clearInterval(timeinterval);\n          }\n        },1000);\n      }\n\n\n    onJoinAuction = async (event) => {\n        event.preventDefault();\n        const accounts = await web3.eth.getAccounts();\n\n        this.setState({ loading: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const plasticBaleSC = plasticBaleContract(this.props.address);\n\n            await plasticBaleSC.methods\n                .addBidder(this.state.registrationSCAddr, accounts[0])\n                .send({ from: accounts[0] });\n\n        } catch (err) {\n            this.setState({ errorMessage: err.message });\n\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage) {\n            this.setState({ join: true });\n        }\n\n        this.setState({ loading: false });\n    };\n\n\n\n    findHighestBidder = async (address) => {\n\n        const accounts = await web3.eth.getAccounts();\n        await registerContract.methods\n            .getBuyerDetails(address).call(function (error, result) {\n                this.setState({\n                    highestBidder: result[1],\n                    highestBidderAddress: result[0],\n                });\n\n            }.bind(this));\n\n    };\n\n\n    onPlaceBid = async (event) => {\n\n        event.preventDefault();\n\n        this.setState({ loading2: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const plasticBaleSC = plasticBaleContract(this.props.address);\n            await plasticBaleSC.methods\n                .placeBid(this.state.registrationSCAddr, this.state.bid)\n                .send({ from: accounts[0], value: this.state.bid });\n        }\n        catch (err) {\n            this.setState({ errorMessage: err.message });\n\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage)\n            this.setState({ hasNoError: true });\n\n\n        this.setState({ loading2: false });\n\n    };\n\n\n    onExitAuction = async (event) => {\n\n        event.preventDefault();\n\n        this.setState({ loading3: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const plasticBaleSC = plasticBaleContract(this.props.address);\n            await plasticBaleSC.methods\n                .exitAuction(this.state.registrationSCAddr)\n                .send({ from: accounts[0] });\n            this.setState({ join: false });\n        }\n        catch (err) {\n            this.setState({ errorMessage: err.message });\n\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage)\n            this.setState({ hasNoError: true });\n\n\n        this.setState({ loading3: false });\n\n    };\n\n    onEndAuction = async (event) => {\n\n        event.preventDefault();\n\n        this.setState({ loading: true });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const plasticBaleSC = plasticBaleContract(this.props.address);\n            await plasticBaleSC.methods.endAuction().send({ from: accounts[0], gas: 250983 });\n            this.setState({ notOver: false });\n\n        } catch (err) {\n            // REVERT REASON IS ALMOST SHOWN HERE\n            console.log(err);\n            this.setState({ errorMessage: err });\n            this.setState({ hasError: false });\n        }\n\n        this.setState({ loading: false });\n    };\n\n    convertToEther = () => {\n        this.setState({ dollars: false, eth: true });\n\n    };\n\n    convertToDollars = () => {\n\n        var dollar = this.state.highestBid;\n        dollar = (dollar * this.state.cryptos.ETH.USD).toFixed(2);\n        console.log(dollar);\n\n        this.setState({ dollarValue: dollar, dollars: true, eth: false });\n\n    };\n\n\n\n\n    render() {\n\n        const { join, dollars, eth, closingTime } = this.state;\n\n        return (\n            <Layout>\n                <link rel=\"stylesheet\"\n                    href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\n                />\n\n                <div className='statistic'>\n                    <h1>Live Auction</h1>\n\n                    <div id=\"clockdiv\">\n                        <div>\n                            <span class=\"days\"></span>\n                            <div class=\"smalltext\">Days</div>\n                        </div>\n                        <div>\n                            <span class=\"hours\"></span>\n                            <div class=\"smalltext\">Hours</div>\n                        </div>\n                        <div>\n                            <span class=\"minutes\"></span>\n                            <div class=\"smalltext\">Minutes</div>\n                        </div>\n                        <div>\n                            <span class=\"seconds\"></span>\n                            <div class=\"smalltext\">Seconds</div>\n                        </div>\n                    </div>\n\n\n\n\n                    {console.log(typeof (closingTime))}\n                    <div className='countdown'>\n                        <DateCountdown dateTo='March 30, 2021 14:20:01 GMT+04:00'\n                            dateFrom=''\n                            callback={this.endAuction} />\n                    </div>\n\n                    <h2> Plastic Bale being auctioned:\n                 <h3> {this.props.address} </h3> </h2>\n                    <br />\n\n                    <div className='AuctionContainer'>\n\n                        <Statistic.Group widths='three'>\n\n                            {dollars == true && eth == false ? (<div>\n                                <Statistic>\n                                    <Statistic.Value text>\n                                        {this.state.dollarValue}\n                                        <br />\n                            USD\n                            </Statistic.Value>\n                                    <Statistic.Label>Highest Bid</Statistic.Label>\n                                </Statistic>\n\n                            </div>)\n                                : (<div>\n                                    <Statistic>\n                                        <Statistic.Value text>\n                                            {this.state.highestBid}\n                                            <br />\n                                ETH\n                                </Statistic.Value>\n                                        <Statistic.Label>Highest Bid</Statistic.Label>\n                                    </Statistic>\n\n                                </div>)}\n\n\n\n\n\n                            <Statistic>\n                                <Statistic.Value>\n                                    <Icon name='users' /> {this.state.totalBidders}\n                                </Statistic.Value>\n                                <Statistic.Label>Total Bidders</Statistic.Label>\n                            </Statistic>\n\n                            <br />\n\n                            <Statistic>\n                                <Statistic.Value text>\n                                    <Icon name='user' /> {this.state.highestBidder}\n                                    {/*this.state.highestBidderAddress*/}\n                                </Statistic.Value>\n                                <Statistic.Label>Highest Bidder</Statistic.Label>\n                            </Statistic>\n\n\n                        </Statistic.Group>\n                    </div>\n                </div>\n\n                <br />\n                <br />\n\n\n                <div className='conversionButtons'>\n                    <Button.Group size='large'>\n                        <Button onClick={this.convertToEther}> Ether </Button>\n                        <Button.Or />\n                        <Button onClick={this.convertToDollars}>Dollars</Button>\n                    </Button.Group>\n                </div>\n\n                <br />\n                <br />\n\n\n                {join === false ? (<Grid>\n                    <Grid.Row centered>\n                        <Grid.Column width={6} textAlign=\"center\">\n                            <Button loading={this.state.loading} onClick={this.onJoinAuction}>Join Auction </Button>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                ) : null}\n\n\n                {join && (\n\n                    <div className='auctionInput'>\n                        <Container>\n                            <Grid>\n                                <Grid.Row centered>\n                                    <Grid.Column width={4} textAlign=\"center\">\n                                        <Form onSubmit={this.onPlaceBid} error={!!this.state.errorMessage} success={this.state.hasNoError}>\n\n                                            <Form.Field>\n                                                <label>Amount</label>\n                                                <Input value={this.state.bid}\n                                                    label={{ basic: true, content: 'Ether' }}\n                                                    labelPosition='right'\n                                                    onChange={event => this.setState({ bid: event.target.value })} />\n                                            </Form.Field>\n\n                                            <Message error header=\"Error!\" content={this.state.errorMessage} />\n\n\n                                            <Message success header=\"Success!\" content=\"Bid is Placed!\" />\n\n\n                                            <Button loading={this.state.loading2} type='submit'>Place Bid</Button>\n                                        </Form>\n\n                                        <br />\n\n                                        <p> You can only exit the auction if no bids were placed!</p>\n                                        <Button loading={this.state.loading3} onClick={this.onExitAuction}>Exit Auction </Button>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        </Container>\n\n\n                    </div>\n\n                )}\n\n            </Layout>\n        );\n    }\n\n\n\n}\n\nexport default joinAuction; \n"]},"metadata":{},"sourceType":"module"}