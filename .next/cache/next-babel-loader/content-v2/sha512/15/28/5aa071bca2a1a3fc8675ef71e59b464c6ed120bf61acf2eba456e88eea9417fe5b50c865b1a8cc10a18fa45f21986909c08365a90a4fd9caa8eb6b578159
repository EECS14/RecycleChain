{"ast":null,"code":"var _jsxFileName = \"/Users/eimanalwahhabi/Desktop/RecycleChain/pages/auctions/viewauctions.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport trackingContract from '../../ethereum/tracking';\nimport plasticBaleContract from '../../ethereum/plasticBale';\n\nclass viewauctions extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const accounts = await web3.eth.getAccounts(); //NOTE: Set the account back to account[0] - seller address is account 2\n\n      trackingContract.events.plasticBaleCompleted({\n        filter: {\n          sellerAddress: accounts[0]\n        },\n        fromBlock: 0\n      }, function (error, event) {\n        //Debugging \n        console.log(event); //1. Fetch plastic bale addresses which are contract addresses/auction addresses from plasticBaleCompleted\n\n        const plasticbaleAddr = event.returnValues['plasticbale'];\n        console.log(plasticbaleAddr); //2. Create a new instance \n\n        const plasticBaleSC = plasticBaleContract(plasticbaleAddr); //3. Check auctionStarted events \n\n        plasticBaleSC.events.auctionStarted({\n          filter: {\n            baleAddress: plasticbaleAddr\n          },\n          fromBlock: 0\n        }, function (error, event) {\n          console.log(event); //4. Extract Auction data from event\n\n          var time = new Date(event.returnValues['closingTime'] * 1000);\n          var date = time.toString();\n          this.setState({\n            auctionAddr: event.returnValues['baleAddress'],\n            clostingTime: date,\n            startingPrice: event.returnValues['startingAmount']\n          }); //5. Render card on webpage\n\n          this.renderAuctions();\n        }.bind(this)).on('error', console.error);\n      }.bind(this)).on('error', console.error);\n    });\n\n    this.state = {\n      cards: [],\n      closingTime: '',\n      startingPrice: '',\n      auctionAddr: ''\n    };\n  }\n\n  renderAuctions() {\n    this.setState(prevState => {\n      const items = {\n        header: this.state.auctionAddr,\n        description: __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 74\n          }\n        }, \"Join Auction\"),\n        fluid: true,\n        meta: this.state.startingPrice\n      };\n      return {\n        cards: [...prevState.cards, items]\n      };\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"Open Auctions\"), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default viewauctions;","map":{"version":3,"sources":["/Users/eimanalwahhabi/Desktop/RecycleChain/pages/auctions/viewauctions.js"],"names":["React","Component","Card","web3","trackingContract","plasticBaleContract","viewauctions","constructor","props","accounts","eth","getAccounts","events","plasticBaleCompleted","filter","sellerAddress","fromBlock","error","event","console","log","plasticbaleAddr","returnValues","plasticBaleSC","auctionStarted","baleAddress","time","Date","date","toString","setState","auctionAddr","clostingTime","startingPrice","renderAuctions","bind","on","state","cards","closingTime","prevState","items","header","description","fluid","meta","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport trackingContract from '../../ethereum/tracking'; \nimport plasticBaleContract from '../../ethereum/plasticBale';\n\nclass viewauctions extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cards: [],\n            closingTime:'',\n            startingPrice:'',\n            auctionAddr:''\n\n        };\n    }\n\n    \n    componentDidMount = async () => {\n\n        \n        const accounts = await web3.eth.getAccounts();\n        //NOTE: Set the account back to account[0] - seller address is account 2\n        trackingContract.events.plasticBaleCompleted({\n            filter: { sellerAddress: accounts[0] }, fromBlock: 0\n        }, function (error, event) {\n            //Debugging \n            console.log(event); \n            //1. Fetch plastic bale addresses which are contract addresses/auction addresses from plasticBaleCompleted\n            const plasticbaleAddr = event.returnValues['plasticbale']; \n            console.log(plasticbaleAddr);\n            //2. Create a new instance \n            const plasticBaleSC = plasticBaleContract(plasticbaleAddr); \n            //3. Check auctionStarted events \n\n            plasticBaleSC.events.auctionStarted({\n                filter: {baleAddress: plasticbaleAddr},\n                fromBlock: 0 }, function (error, event) {\n                console.log(event);\n                //4. Extract Auction data from event\n                var time = new Date(event.returnValues['closingTime'] * 1000);\n                var date = time.toString(); \n                this.setState({\n                    auctionAddr: event.returnValues['baleAddress'],\n                    clostingTime: date,\n                    startingPrice: event.returnValues['startingAmount']\n                });\n                \n                //5. Render card on webpage\n                this.renderAuctions(); \n\n        }.bind(this))\n        .on('error', console.error);\n\n\n        }.bind(this))\n            .on('error', console.error);\n\n        \n    };\n\n\n    renderAuctions() {\n\n        this.setState((prevState) => {\n            const items = { header: this.state.auctionAddr, description: <a>Join Auction</a>, fluid: true, meta: this.state.startingPrice };\n            return { cards: [...prevState.cards, items] };\n        });\n\n    }\n\n\n\n    render() {\n\n        return (\n            <div>\n                <link rel=\"stylesheet\"\n                    href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\n                />\n\n                <h1>Open Auctions</h1>\n                <h2></h2>\n                \n            </div>\n        );\n    }\n\n}\n\nexport default viewauctions; "]},"metadata":{},"sourceType":"module"}