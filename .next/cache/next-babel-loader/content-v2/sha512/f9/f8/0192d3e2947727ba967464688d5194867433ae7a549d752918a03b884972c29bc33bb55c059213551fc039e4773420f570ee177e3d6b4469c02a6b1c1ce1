{"ast":null,"code":"var _jsxFileName = \"/Users/maithabarsham/Desktop/RecycleChain/RecycleChain/pages/productionline.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Message, Form, Dropdown, Container, Grid } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport bottleContract from '../ethereum/bottleProduction';\nimport dynamic from 'next/dynamic';\nconst QrCode = dynamic(() => import('react.qrcode.generator'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react.qrcode.generator')],\n    modules: ['react.qrcode.generator']\n  }\n});\nimport Layout from '../components/Layout'; //Dropdownmenu selections\n\nconst bottleTypesOptions = [{\n  key: 1,\n  text: 'PET (Polyethylene Terephthalate)',\n  value: 0\n}, {\n  key: 2,\n  text: 'LDPE/HDPE (Low- and High-Density Polyethylene)',\n  value: 1\n}, {\n  key: 3,\n  text: 'PP (Polypropylene)',\n  value: 2\n}, {\n  key: 4,\n  text: 'PC (Polycarbonate)',\n  value: 3\n}];\nconst bottleColorOptions = [{\n  key: 1,\n  text: 'Clear',\n  value: 0\n}, {\n  key: 2,\n  text: 'White',\n  value: 1\n}, {\n  key: 3,\n  text: 'Red',\n  value: 2\n}, {\n  key: 4,\n  text: 'Blue',\n  value: 3\n}, {\n  key: 4,\n  text: 'Black',\n  value: 4\n}];\nconst bottleSizeOptions = [{\n  key: 1,\n  text: '100 mL',\n  value: 0\n}, {\n  key: 2,\n  text: '200 mL',\n  value: 1\n}, {\n  key: 3,\n  text: '330 mL',\n  value: 2\n}, {\n  key: 4,\n  text: '500 mL',\n  value: 3\n}, {\n  key: 4,\n  text: '1.5L',\n  value: 4\n}];\n\nclass manufacturingMachinePage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault(); // prevents the browser from submitting the form immediately\n\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        await bottleContract.methods.registerBottle(this.state.registerSCAddress, this.state.bottleType, this.state.bottleColor, this.state.bottleSize).send({\n          from: accounts[0]\n        });\n        this.state.bottleQR = await bottleContract.methods.getBottleAddress().call();\n        console.log(this.state.bottleQR);\n        this.setState({\n          QRcodePic: true\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n        this.setState({\n          hasError: false\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage) this.setState({\n        hasNoError: true\n      });\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"handleChangeType\", (e, {\n      value\n    }) => this.setState({\n      bottleType: value\n    }));\n\n    _defineProperty(this, \"handleChangeColor\", (e, {\n      value\n    }) => this.setState({\n      bottleColor: value\n    }));\n\n    _defineProperty(this, \"handleChangeSize\", (e, {\n      value\n    }) => this.setState({\n      bottleSize: value\n    }));\n\n    this.state = {\n      registerSCAddress: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\n      bottleType: '',\n      bottleColor: '',\n      bottleSize: '',\n      bottleQR: '',\n      errorMessage: '',\n      hasNoError: false,\n      loading: false,\n      QRcodePic: false\n    };\n  } //produce bottle QR code\n\n\n  render() {\n    const {\n      value\n    } = this.state;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"ProductionLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, \" Weclome to Manufactuerer's Production Line Machine Page\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }), __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, __jsx(Grid.Row, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }\n    }, __jsx(Grid.Column, {\n      width: 6,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 33\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: !!this.state.errorMessage,\n      success: this.state.hasNoError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 37\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 41\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 53\n      }\n    }, \"Bottle Material:   \"), __jsx(Dropdown, {\n      placeholder: \"Choose Bottle Material\",\n      clearable: true,\n      options: bottleTypesOptions,\n      selection: true,\n      onChange: this.handleChangeType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 45\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 41\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 53\n      }\n    }, \"Bottle Color:   \"), __jsx(Dropdown, {\n      placeholder: \"Choose Bottle Color\",\n      clearable: true,\n      options: bottleColorOptions,\n      selection: true,\n      onChange: this.handleChangeColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 45\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 41\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 53\n      }\n    }, \"Bottle Size:   \"), __jsx(Dropdown, {\n      placeholder: \"Choose Bottle Size\",\n      clearable: true,\n      options: bottleSizeOptions,\n      selection: true,\n      onChange: this.handleChangeSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 45\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Error!\",\n      content: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 41\n      }\n    }), __jsx(Message, {\n      success: true,\n      header: \"Success!\",\n      content: \"QR code generated successfully!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 41\n      }\n    }), __jsx(Button, {\n      loading: this.state.loading,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, \"Submit\")), __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 37\n      }\n    }, this.state.bottleQR), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 37\n      }\n    }, this.state.QRcodePic == true ? __jsx(QrCode, {\n      value: this.state.bottleQR,\n      QrCode: true,\n      size: '400',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 37\n      }\n    }) : '', \" \")))))));\n  }\n\n}\n\nexport default manufacturingMachinePage;\n/*\r\n//<Button type='submit'>Submit</Button> \r\n    onGenerate = async (event) => {\r\n        this.state.bottleQR = await bottleContract.methods.getBottleAddress().call();\r\n        console.log(this.state.bottleQR);\r\n        this.setState({ QRcodePic: true });\r\n\r\n    }\r\n                                        <Form onSubmit={this.onGenerate}>\r\n                                        <Button type='submit'>Generate QR Code</Button>\r\n                                    </Form>\r\n    */\n//(old)","map":{"version":3,"sources":["/Users/maithabarsham/Desktop/RecycleChain/RecycleChain/pages/productionline.js"],"names":["React","Component","Button","Message","Form","Dropdown","Container","Grid","web3","bottleContract","dynamic","QrCode","ssr","Layout","bottleTypesOptions","key","text","value","bottleColorOptions","bottleSizeOptions","manufacturingMachinePage","constructor","props","event","preventDefault","accounts","eth","getAccounts","setState","loading","errorMessage","methods","registerBottle","state","registerSCAddress","bottleType","bottleColor","bottleSize","send","from","bottleQR","getBottleAddress","call","console","log","QRcodePic","err","message","hasError","hasNoError","e","render","onSubmit","handleChangeType","handleChangeColor","handleChangeSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Message, Form, Dropdown, Container, Grid } from 'semantic-ui-react';\r\nimport web3 from '../ethereum/web3';\r\nimport bottleContract from '../ethereum/bottleProduction';\r\nimport dynamic from 'next/dynamic';\r\nconst QrCode = dynamic(() => import('react.qrcode.generator'), { ssr: false });\r\nimport Layout from '../components/Layout';\r\n\r\n//Dropdownmenu selections\r\nconst bottleTypesOptions = [\r\n    { key: 1, text: 'PET (Polyethylene Terephthalate)', value: 0 },\r\n    { key: 2, text: 'LDPE/HDPE (Low- and High-Density Polyethylene)', value: 1 },\r\n    { key: 3, text: 'PP (Polypropylene)', value: 2 },\r\n    { key: 4, text: 'PC (Polycarbonate)', value: 3 },\r\n]\r\n\r\nconst bottleColorOptions = [\r\n    { key: 1, text: 'Clear', value: 0 },\r\n    { key: 2, text: 'White', value: 1 },\r\n    { key: 3, text: 'Red', value: 2 },\r\n    { key: 4, text: 'Blue', value: 3 },\r\n    { key: 4, text: 'Black', value: 4 },\r\n]\r\n\r\nconst bottleSizeOptions = [\r\n    { key: 1, text: '100 mL', value: 0 },\r\n    { key: 2, text: '200 mL', value: 1 },\r\n    { key: 3, text: '330 mL', value: 2 },\r\n    { key: 4, text: '500 mL', value: 3 },\r\n    { key: 4, text: '1.5L', value: 4 },\r\n]\r\n\r\nclass manufacturingMachinePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            registerSCAddress: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\r\n            bottleType: '',\r\n            bottleColor: '',\r\n            bottleSize: '',\r\n            bottleQR: '',\r\n            errorMessage: '',\r\n            hasNoError: false,\r\n            loading: false, \r\n            QRcodePic: false\r\n        };\r\n    }\r\n\r\n\r\n    //produce bottle QR code\r\n\r\n    onSubmit = async (event) => {\r\n\r\n        event.preventDefault(); // prevents the browser from submitting the form immediately\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n        \r\n        this.setState({ loading: true, errorMessage: '' });\r\n\r\n        try {\r\n\r\n            await bottleContract.methods\r\n                .registerBottle(this.state.registerSCAddress, this.state.bottleType, this.state.bottleColor, this.state.bottleSize)\r\n                .send({ from: accounts[0] });\r\n\r\n            this.state.bottleQR = await bottleContract.methods.getBottleAddress().call(); \r\n            console.log(this.state.bottleQR);\r\n            this.setState({ QRcodePic: true });\r\n\r\n        } catch (err) {\r\n\r\n            this.setState({ errorMessage: err.message });\r\n            this.setState({ hasError: false });\r\n\r\n        }\r\n\r\n        // if errorMsg is empty, registration is successful\r\n        if (!this.state.errorMessage)\r\n            this.setState({ hasNoError: true });\r\n        this.setState({ loading: false });\r\n\r\n    };\r\n\r\n    handleChangeType = (e, { value }) => this.setState({ bottleType: value })\r\n    handleChangeColor = (e, { value }) => this.setState({ bottleColor: value })\r\n    handleChangeSize = (e, { value }) => this.setState({ bottleSize: value })\r\n\r\n    render() {\r\n        const { value } = this.state\r\n\r\n        return (\r\n            <Layout>\r\n                <div className='ProductionLine'>\r\n                    <h1> Weclome to Manufactuerer's Production Line Machine Page</h1>\r\n                    <br />\r\n                    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\" />\r\n                    <Container>\r\n                        <Grid>\r\n                            <Grid.Row centered>\r\n                                <Grid.Column width={6} textAlign=\"center\">\r\n                                    <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} success={this.state.hasNoError}>\r\n                                        <Form.Field><label>Bottle Material:   </label>\r\n                                            <Dropdown\r\n                                                placeholder='Choose Bottle Material'\r\n                                                clearable\r\n                                                options={bottleTypesOptions}\r\n                                                selection\r\n                                                onChange={this.handleChangeType} />\r\n                                        </Form.Field>\r\n\r\n                                        <Form.Field><label>Bottle Color:   </label>\r\n                                            <Dropdown\r\n                                                placeholder='Choose Bottle Color'\r\n                                                clearable\r\n                                                options={bottleColorOptions}\r\n                                                selection\r\n                                                onChange={this.handleChangeColor} />\r\n                                        </Form.Field>\r\n\r\n                                        <Form.Field><label>Bottle Size:   </label>\r\n                                            <Dropdown\r\n                                                placeholder='Choose Bottle Size'\r\n                                                clearable\r\n                                                options={bottleSizeOptions}\r\n                                                selection\r\n                                                onChange={this.handleChangeSize} />\r\n                                        </Form.Field>\r\n\r\n                                        <Message error header=\"Error!\" content={this.state.errorMessage} />\r\n\r\n\r\n                                        <Message success header=\"Success!\" content=\"QR code generated successfully!\" />\r\n\r\n                                        <Button loading={this.state.loading} type='submit'>Submit</Button>\r\n                                    </Form>\r\n\r\n                                    <label>{this.state.bottleQR}</label>\r\n                                    <h1>{this.state.QRcodePic == true ? \r\n                                    <QrCode value={this.state.bottleQR} QrCode size={'400'} /> : ''} </h1>\r\n\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Container>\r\n                </div>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default manufacturingMachinePage; \r\n\r\n/*\r\n//<Button type='submit'>Submit</Button> \r\n    onGenerate = async (event) => {\r\n        this.state.bottleQR = await bottleContract.methods.getBottleAddress().call();\r\n        console.log(this.state.bottleQR);\r\n        this.setState({ QRcodePic: true });\r\n\r\n    }\r\n                                        <Form onSubmit={this.onGenerate}>\r\n                                        <Button type='submit'>Generate QR Code</Button>\r\n                                    </Form>\r\n    */ //(old)\r\n"]},"metadata":{},"sourceType":"module"}