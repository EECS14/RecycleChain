{"ast":null,"code":"var _jsxFileName = \"/Users/eimanalwahhabi/Desktop/RecycleChain/pages/recycler.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\nThis is the recycler page where a recycler scans the QR codes and view rewards\nContact used here: an instance of tracking.sol \nTo run the app, use the command npm run dev\n*/\nimport React, { Component } from 'react';\nimport { Card, Table, Button, Grid, Container } from 'semantic-ui-react';\nimport dynamic from 'next/dynamic';\nconst QRReader = dynamic(() => import('react-qr-reader'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-qr-reader')],\n    modules: ['react-qr-reader']\n  }\n});\nimport web3 from '../ethereum/web3';\nimport trackingContract from '../ethereum/tracking';\nimport { Link } from '../routes';\nimport Layout from '../components/Layout';\n\nclass recyclerPage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      trackingContract.getPastEvents(\"allEvents\", {\n        from: 0,\n        toBlock: 'lastest'\n      }, (error, events) => {\n        console.log(events);\n\n        const myfunction = item => {\n          if (item.event === 'auctionStarted' && this.props.address === item.returnValues['baleAddress']) {\n            isOpen = true;\n            highestbid = item.returnValues['startingAmount'];\n            closingTime = item.returnValues['closingTime'];\n            console.log(closingTime);\n          } else if (item.event === 'bidderRegistered') {\n            biddersnumber++;\n          } else if (item.event === 'bidderExited') {\n            biddersnumber--;\n          } else if (item.event === 'bidPlaced') {\n            highestbid = item.returnValues['amount'];\n            this.findHighestBidder(item.returnValues['biddeAddress']);\n          }\n        };\n\n        events.forEach(myfunction);\n        this.setState({});\n      });\n      trackingContract.events.updateStatusRecycler({\n        filter: {\n          recycler: accounts[0]\n        },\n        fromBlock: 0\n      }, function (error, event) {\n        /* Debugging \n        console.log(event);\n        console.log(event.returnValues['plasticBottleAddress']); */\n        this.setState({\n          result: event.returnValues['plasticBottleAddress'],\n          status: event.returnValues['status']\n        });\n        this.setState(prevState => ({\n          bottlesLogged: [...prevState.bottlesLogged, this.state.result]\n        }));\n        this.addRow();\n      }.bind(this)).on('error', console.error);\n      trackingContract.events.updateStatusMachine({\n        filter: {\n          plasticBottleAddress: this.state.bottlesLogged\n        },\n        fromBlock: 0\n      }, function (error, event) {\n        /*For debugging purposes \n        console.log(event);\n        console.log(this.state.bottlesLogged.indexOf(event.returnValues['plasticBottleAddress'] ));\n        console.log(this.state.rows);\n        console.log(event.returnValues['plasticBottleAddress']);\n        */\n        let index = this.state.bottlesLogged.indexOf(event.returnValues['plasticBottleAddress']);\n        this.updateRow(index, event.returnValues['status']);\n      }.bind(this)).on('error', console.error);\n    });\n\n    _defineProperty(this, \"handleScan\", async data => {\n      if (data) {\n        this.setState({\n          result: data\n        });\n        this.disposeBottle();\n      }\n    });\n\n    _defineProperty(this, \"handleError\", err => {\n      console.error(err);\n    });\n\n    _defineProperty(this, \"onScan\", async event => {\n      event.preventDefault();\n\n      if (this.state.qr === false) {\n        this.setState({\n          qr: true\n        });\n      } else {\n        this.setState({\n          qr: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"addRow\", () => {\n      this.setState(prevState => {\n        let bottle = {\n          addr: this.state.result,\n          status: this.state.status\n        };\n        return {\n          rows: [...prevState.rows, bottle]\n        };\n      });\n    });\n\n    _defineProperty(this, \"disposeBottle\", async () => {\n      const accounts = await web3.eth.getAccounts(); //Add try and catch block here \n\n      await trackingContract.methods.updateStatusDisposed(this.state.result).send({\n        from: accounts[0]\n      });\n    });\n\n    this.state = {\n      rewards: 0,\n      result: '',\n      status: '',\n      qr: false,\n      rows: [],\n      bottlesLogged: []\n    };\n  } // retrieve all bottled logged by user from ropsten network \n  // IMPROVE IT: use getPastEvents \n\n\n  updateRow(index, status) {\n    // 1. Make a shallow copy of rows\n    let rows = [...this.state.rows]; // 2. Make a shallow copy of the row you want to mutate\n\n    let row = _objectSpread({}, rows[index]); // 3. Replace the property you're intested in\n\n\n    row.status = status; // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n\n    rows[index] = row; // 5. Set the state to our new copy\n\n    this.setState({\n      rows\n    });\n  }\n\n  render() {\n    const {\n      qr,\n      rows\n    } = this.state;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"Recycler\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }, \"Welcome to Recycler Page\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }), __jsx(Card, {\n      header: \"Rewards\",\n      description: this.state.rewards,\n      meta: \"ETH\",\n      centered: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }), __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, __jsx(Grid.Row, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }, __jsx(Grid.Column, {\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: \"Scanner\",\n      style: {\n        'width': '25%',\n        'margin-left': 'auto',\n        'margin-right': 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 33\n      }\n    }, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 37\n      }\n    }, \"Dispose a Plastic Bottle  \"), __jsx(Button, {\n      className: \"QrReader\",\n      onClick: this.onScan,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 37\n      }\n    }, \" Scan QR Code\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 37\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 37\n      }\n    }, \" \", this.state.qr === true ? __jsx(QRReader, {\n      delay: 300,\n      onError: this.handleError,\n      onScan: this.handleScan,\n      style: {\n        width: \"60%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 37\n      }\n    }) : '', \" \"))))), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }), __jsx(\"div\", {\n      className: \"BottleTable\",\n      style: {\n        'width': '40%',\n        'margin-left': 'auto',\n        'margin-right': 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, __jsx(Table, {\n      unstackable: true,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 25\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 29\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 33\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 37\n      }\n    }, \"Plasitc Bottle Address\"), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 37\n      }\n    }, \"Status\"))), __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 29\n      }\n    }, this.state.rows.map(bottle => __jsx(Link, {\n      route: `/track/${bottle.addr}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 37\n      }\n    }, __jsx(Table.Row, {\n      id: this.state.rows.length,\n      key: this.state.rows.lengt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 41\n      }\n    }, __jsx(Table.Cell, {\n      selectable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 45\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 49\n      }\n    }, bottle.addr)), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 45\n      }\n    }, bottle.status)))))))));\n  }\n\n} //At the end of each page, a component is expected to be returned \n// If not, Next.js throws an error \n\n\nexport default recyclerPage;","map":{"version":3,"sources":["/Users/eimanalwahhabi/Desktop/RecycleChain/pages/recycler.js"],"names":["React","Component","Card","Table","Button","Grid","Container","dynamic","QRReader","ssr","web3","trackingContract","Link","Layout","recyclerPage","constructor","props","accounts","eth","getAccounts","getPastEvents","from","toBlock","error","events","console","log","myfunction","item","event","address","returnValues","isOpen","highestbid","closingTime","biddersnumber","findHighestBidder","forEach","setState","updateStatusRecycler","filter","recycler","fromBlock","result","status","prevState","bottlesLogged","state","addRow","bind","on","updateStatusMachine","plasticBottleAddress","index","indexOf","updateRow","data","disposeBottle","err","preventDefault","qr","bottle","addr","rows","methods","updateStatusDisposed","send","rewards","row","render","onScan","handleError","handleScan","width","map","length","lengt"],"mappings":"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","sourcesContent":["/*\nThis is the recycler page where a recycler scans the QR codes and view rewards\nContact used here: an instance of tracking.sol \nTo run the app, use the command npm run dev\n*/\n\nimport React, { Component } from 'react';\nimport { Card, Table, Button, Grid, Container } from 'semantic-ui-react';\nimport dynamic from 'next/dynamic';\nconst QRReader = dynamic(() => import('react-qr-reader'), { ssr: false });\nimport web3 from '../ethereum/web3';\nimport trackingContract from '../ethereum/tracking';\nimport { Link } from '../routes';\nimport Layout from '../components/Layout';\n\nclass recyclerPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            rewards: 0,\n            result: '',\n            status: '',\n            qr: false,\n            rows: [],\n            bottlesLogged: []\n        };\n    }\n\n    // retrieve all bottled logged by user from ropsten network \n    // IMPROVE IT: use getPastEvents \n    componentDidMount = async () => {\n        const accounts = await web3.eth.getAccounts();\n\n        trackingContract.getPastEvents(\"allEvents\", {from: 0, toBlock:'lastest'}, (error,events) => {\n            console.log(events); \n\n            const myfunction = (item) => {\n\n                if (item.event === 'auctionStarted' && this.props.address === item.returnValues['baleAddress']) {\n                    isOpen = true;\n                    highestbid = item.returnValues['startingAmount'];\n                    closingTime = item.returnValues['closingTime'];\n                    console.log(closingTime);\n\n                } else if (item.event === 'bidderRegistered') {\n                    biddersnumber++;\n\n                } else if (item.event === 'bidderExited') {\n                    biddersnumber--;\n\n                } else if (item.event === 'bidPlaced') {\n                    highestbid = item.returnValues['amount'];\n                    this.findHighestBidder(item.returnValues['biddeAddress']);\n\n                }\n\n            };\n\n            events.forEach(myfunction);\n\n            this.setState({\n                \n            });\n\n\n        });\n\n\n\n        trackingContract.events.updateStatusRecycler({\n            filter: { recycler: accounts[0] }, fromBlock: 0\n        }, function (error, event) {\n            /* Debugging \n            console.log(event);\n            console.log(event.returnValues['plasticBottleAddress']); */\n\n            this.setState({ result: event.returnValues['plasticBottleAddress'], status: event.returnValues['status'] });\n            this.setState(prevState => ({ bottlesLogged: [...prevState.bottlesLogged, this.state.result] }));\n            this.addRow();\n        }.bind(this))\n            .on('error', console.error);\n\n        trackingContract.events.updateStatusMachine({\n            filter: { plasticBottleAddress: this.state.bottlesLogged }, fromBlock: 0\n        }, function (error, event) {\n            /*For debugging purposes \n            console.log(event);\n            console.log(this.state.bottlesLogged.indexOf(event.returnValues['plasticBottleAddress'] ));\n            console.log(this.state.rows);\n            console.log(event.returnValues['plasticBottleAddress']);\n            */\n            let index = this.state.bottlesLogged.indexOf(event.returnValues['plasticBottleAddress']);\n            this.updateRow(index, event.returnValues['status']);\n        }.bind(this))\n            .on('error', console.error);\n\n\n    };\n\n    // QR reader functions \n    handleScan = async (data) => {\n        if (data) {\n            this.setState({ result: data });\n            this.disposeBottle();\n\n        }\n    }\n\n    handleError = err => {\n        console.error(err)\n    }\n\n    onScan = async (event) => {\n        event.preventDefault();\n        if (this.state.qr === false) {\n            this.setState({ qr: true });\n        }\n        else {\n            this.setState({ qr: false });\n        }\n    };\n\n    // Adds a new row dynamically to the table \n    addRow = () => {\n        this.setState((prevState) => {\n            let bottle = { addr: this.state.result, status: this.state.status };\n            return { rows: [...prevState.rows, bottle] };\n        });\n\n    };\n\n    // Log bottle as disposed \n    disposeBottle = async () => {\n        const accounts = await web3.eth.getAccounts();\n\n        //Add try and catch block here \n        await trackingContract.methods\n            .updateStatusDisposed(this.state.result)\n            .send({ from: accounts[0] });\n\n    };\n\n    updateRow(index, status) {\n        // 1. Make a shallow copy of rows\n        let rows = [...this.state.rows];\n        // 2. Make a shallow copy of the row you want to mutate\n        let row = { ...rows[index] };\n        // 3. Replace the property you're intested in\n        row.status = status;\n        // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n        rows[index] = row;\n        // 5. Set the state to our new copy\n        this.setState({ rows });\n    }\n\n\n    render() {\n\n        const { qr, rows } = this.state\n\n        return (\n            <Layout>\n                <div className='Recycler'>\n                    <h1>Welcome to Recycler Page</h1>\n                    <link rel=\"stylesheet\"\n                        href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\n                    />\n\n                    <Card header='Rewards' description={this.state.rewards} meta='ETH' centered='true' />\n\n                    <br />\n\n\n                    <Grid>\n                        <Grid.Row centered>\n                            <Grid.Column textAlign=\"center\">\n                                <div className=\"Scanner\" style={{ 'width': '25%', 'margin-left': 'auto', 'margin-right': 'auto' }}>\n                                    <h2>Dispose a Plastic Bottle  </h2>\n                                    <Button className=\"QrReader\" onClick={this.onScan} > Scan QR Code</Button>\n                                    <br/>\n                                    <div> {this.state.qr === true ? (\n                                    <QRReader\n                                        delay={300}\n                                        onError={this.handleError}\n                                        onScan={this.handleScan}\n                                        style={{ width: \"60%\" }}\n                                    />\n                                    )\n                                        : ''} </div>\n\n                                </div>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n\n\n                    <br />\n\n                    <div className='BottleTable' style={{ 'width': '40%', 'margin-left': 'auto', 'margin-right': 'auto' }}>\n                        <Table unstackable size='small'>\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell>Plasitc Bottle Address</Table.HeaderCell>\n                                    <Table.HeaderCell>Status</Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {this.state.rows.map(bottle => (\n                                    <Link route={`/track/${bottle.addr}`}>\n                                        <Table.Row id={this.state.rows.length} key={this.state.rows.lengt}>\n                                            <Table.Cell selectable>\n                                                <a>\n                                                    {bottle.addr}\n                                                </a>\n                                            </Table.Cell>\n                                            <Table.Cell>{bottle.status}</Table.Cell>\n                                        </Table.Row>\n                                    </Link>\n                                ))}\n                            </Table.Body>\n\n                        </Table>\n                    </div>\n\n                </div>\n\n            </Layout>\n\n        );\n    }\n\n}\n\n//At the end of each page, a component is expected to be returned \n// If not, Next.js throws an error \nexport default recyclerPage; "]},"metadata":{},"sourceType":"module"}