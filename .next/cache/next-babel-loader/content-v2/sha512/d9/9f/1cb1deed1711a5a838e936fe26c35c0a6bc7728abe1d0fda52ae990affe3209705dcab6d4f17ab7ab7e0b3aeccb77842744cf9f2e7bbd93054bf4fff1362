{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/maithabarsham/Desktop/RecycleChain/RecycleChain/pages/productionline.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Button, Message, Form, Dropdown, Container, Grid } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport bottleContract from '../ethereum/bottleProduction';\nimport dynamic from 'next/dynamic';\nvar QrCode = dynamic(_c = function _c() {\n  return import('react.qrcode.generator');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('react.qrcode.generator')];\n    },\n    modules: ['react.qrcode.generator']\n  }\n});\n_c2 = QrCode;\nimport Layout from '../components/Layout'; //Dropdownmenu selections\n\nvar bottleTypesOptions = [{\n  key: 1,\n  text: 'PET (Polyethylene Terephthalate)',\n  value: 0\n}, {\n  key: 2,\n  text: 'LDPE/HDPE (Low- and High-Density Polyethylene)',\n  value: 1\n}, {\n  key: 3,\n  text: 'PP (Polypropylene)',\n  value: 2\n}, {\n  key: 4,\n  text: 'PC (Polycarbonate)',\n  value: 3\n}];\nvar bottleColorOptions = [{\n  key: 1,\n  text: 'Clear',\n  value: 0\n}, {\n  key: 2,\n  text: 'White',\n  value: 1\n}, {\n  key: 3,\n  text: 'Red',\n  value: 2\n}, {\n  key: 4,\n  text: 'Blue',\n  value: 3\n}, {\n  key: 4,\n  text: 'Black',\n  value: 4\n}];\nvar bottleSizeOptions = [{\n  key: 1,\n  text: '100 mL',\n  value: 0\n}, {\n  key: 2,\n  text: '200 mL',\n  value: 1\n}, {\n  key: 3,\n  text: '330 mL',\n  value: 2\n}, {\n  key: 4,\n  text: '500 mL',\n  value: 3\n}, {\n  key: 4,\n  text: '1.5L',\n  value: 4\n}];\n\nvar manufacturingMachinePage = /*#__PURE__*/function (_Component) {\n  _inherits(manufacturingMachinePage, _Component);\n\n  var _super = _createSuper(manufacturingMachinePage);\n\n  function manufacturingMachinePage(props) {\n    var _this;\n\n    _classCallCheck(this, manufacturingMachinePage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault(); // prevents the browser from submitting the form immediately\n\n                _context.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context.sent;\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context.prev = 5;\n                _context.next = 8;\n                return bottleContract.methods.registerBottle(_this.state.registerSCAddress, _this.state.bottleType, _this.state.bottleColor, _this.state.bottleSize).send({\n                  from: accounts[0]\n                });\n\n              case 8:\n                _context.next = 10;\n                return bottleContract.methods.getBottleAddress().call();\n\n              case 10:\n                _this.state.bottleQR = _context.sent;\n                console.log(_this.state.bottleQR);\n\n                _this.setState({\n                  QRcodePic: true\n                });\n\n                _context.next = 19;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](5);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n                _this.setState({\n                  hasError: false\n                });\n\n              case 19:\n                // if errorMsg is empty, registration is successful\n                if (!_this.state.errorMessage) _this.setState({\n                  hasNoError: true\n                });\n\n                _this.setState({\n                  loading: false\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[5, 15]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChangeType\", function (e, _ref2) {\n      var value = _ref2.value;\n      return _this.setState({\n        bottleType: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChangeColor\", function (e, _ref3) {\n      var value = _ref3.value;\n      return _this.setState({\n        bottleColor: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChangeSize\", function (e, _ref4) {\n      var value = _ref4.value;\n      return _this.setState({\n        bottleSize: value\n      });\n    });\n\n    _this.state = {\n      registerSCAddress: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\n      bottleType: '',\n      bottleColor: '',\n      bottleSize: '',\n      bottleQR: '',\n      errorMessage: '',\n      hasNoError: false,\n      loading: false,\n      QRcodePic: false\n    };\n    return _this;\n  } //produce bottle QR code\n\n\n  _createClass(manufacturingMachinePage, [{\n    key: \"render\",\n    value: function render() {\n      var value = this.state.value;\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, __jsx(\"div\", {\n        className: \"ProductionLine\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, \"Production Line\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      }), __jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }), __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }\n      }, __jsx(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }\n      }, __jsx(Grid.Row, {\n        centered: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }\n      }, __jsx(Grid.Column, {\n        width: 6,\n        textAlign: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 33\n        }\n      }, __jsx(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage,\n        success: this.state.hasNoError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 37\n        }\n      }, __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 41\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 53\n        }\n      }, \"Bottle Material:   \"), __jsx(Dropdown, {\n        placeholder: \"Choose Bottle Material\",\n        clearable: true,\n        options: bottleTypesOptions,\n        selection: true,\n        onChange: this.handleChangeType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 45\n        }\n      })), __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 41\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 53\n        }\n      }, \"Bottle Color:   \"), __jsx(Dropdown, {\n        placeholder: \"Choose Bottle Color\",\n        clearable: true,\n        options: bottleColorOptions,\n        selection: true,\n        onChange: this.handleChangeColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 45\n        }\n      })), __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 41\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 53\n        }\n      }, \"Bottle Size:   \"), __jsx(Dropdown, {\n        placeholder: \"Choose Bottle Size\",\n        clearable: true,\n        options: bottleSizeOptions,\n        selection: true,\n        onChange: this.handleChangeSize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 45\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Error!\",\n        content: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 41\n        }\n      }), __jsx(Message, {\n        success: true,\n        header: \"Success!\",\n        content: \"QR code generated successfully!\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 41\n        }\n      }), __jsx(Button, {\n        loading: this.state.loading,\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 41\n        }\n      }, \"Submit\")), __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 37\n        }\n      }, this.state.bottleQR), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 37\n        }\n      }, this.state.QRcodePic == true ? __jsx(QrCode, {\n        value: this.state.bottleQR,\n        QrCode: true,\n        size: '400',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 37\n        }\n      }) : '', \" \")))))));\n    }\n  }]);\n\n  return manufacturingMachinePage;\n}(Component);\n\nexport default manufacturingMachinePage;\n/*\r\n//<Button type='submit'>Submit</Button> \r\n    onGenerate = async (event) => {\r\n        this.state.bottleQR = await bottleContract.methods.getBottleAddress().call();\r\n        console.log(this.state.bottleQR);\r\n        this.setState({ QRcodePic: true });\r\n\r\n    }\r\n                                        <Form onSubmit={this.onGenerate}>\r\n                                        <Button type='submit'>Generate QR Code</Button>\r\n                                    </Form>\r\n    */\n//(old)\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QrCode$dynamic\");\n$RefreshReg$(_c2, \"QrCode\");","map":{"version":3,"sources":["/Users/maithabarsham/Desktop/RecycleChain/RecycleChain/pages/productionline.js"],"names":["React","Component","Button","Message","Form","Dropdown","Container","Grid","web3","bottleContract","dynamic","QrCode","ssr","Layout","bottleTypesOptions","key","text","value","bottleColorOptions","bottleSizeOptions","manufacturingMachinePage","props","event","preventDefault","eth","getAccounts","accounts","setState","loading","errorMessage","methods","registerBottle","state","registerSCAddress","bottleType","bottleColor","bottleSize","send","from","getBottleAddress","call","bottleQR","console","log","QRcodePic","message","hasError","hasNoError","e","onSubmit","handleChangeType","handleChangeColor","handleChangeSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Message, Form, Dropdown, Container, Grid } from 'semantic-ui-react';\r\nimport web3 from '../ethereum/web3';\r\nimport bottleContract from '../ethereum/bottleProduction';\r\nimport dynamic from 'next/dynamic';\r\nconst QrCode = dynamic(() => import('react.qrcode.generator'), { ssr: false });\r\nimport Layout from '../components/Layout';\r\n\r\n//Dropdownmenu selections\r\nconst bottleTypesOptions = [\r\n    { key: 1, text: 'PET (Polyethylene Terephthalate)', value: 0 },\r\n    { key: 2, text: 'LDPE/HDPE (Low- and High-Density Polyethylene)', value: 1 },\r\n    { key: 3, text: 'PP (Polypropylene)', value: 2 },\r\n    { key: 4, text: 'PC (Polycarbonate)', value: 3 },\r\n]\r\n\r\nconst bottleColorOptions = [\r\n    { key: 1, text: 'Clear', value: 0 },\r\n    { key: 2, text: 'White', value: 1 },\r\n    { key: 3, text: 'Red', value: 2 },\r\n    { key: 4, text: 'Blue', value: 3 },\r\n    { key: 4, text: 'Black', value: 4 },\r\n]\r\n\r\nconst bottleSizeOptions = [\r\n    { key: 1, text: '100 mL', value: 0 },\r\n    { key: 2, text: '200 mL', value: 1 },\r\n    { key: 3, text: '330 mL', value: 2 },\r\n    { key: 4, text: '500 mL', value: 3 },\r\n    { key: 4, text: '1.5L', value: 4 },\r\n]\r\n\r\nclass manufacturingMachinePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            registerSCAddress: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\r\n            bottleType: '',\r\n            bottleColor: '',\r\n            bottleSize: '',\r\n            bottleQR: '',\r\n            errorMessage: '',\r\n            hasNoError: false,\r\n            loading: false, \r\n            QRcodePic: false\r\n        };\r\n    }\r\n\r\n\r\n    //produce bottle QR code\r\n\r\n    onSubmit = async (event) => {\r\n\r\n        event.preventDefault(); // prevents the browser from submitting the form immediately\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n        \r\n        this.setState({ loading: true, errorMessage: '' });\r\n\r\n        try {\r\n\r\n            await bottleContract.methods\r\n                .registerBottle(this.state.registerSCAddress, this.state.bottleType, this.state.bottleColor, this.state.bottleSize)\r\n                .send({ from: accounts[0] });\r\n\r\n            this.state.bottleQR = await bottleContract.methods.getBottleAddress().call(); \r\n            console.log(this.state.bottleQR);\r\n            this.setState({ QRcodePic: true });\r\n\r\n        } catch (err) {\r\n\r\n            this.setState({ errorMessage: err.message });\r\n            this.setState({ hasError: false });\r\n\r\n        }\r\n\r\n        // if errorMsg is empty, registration is successful\r\n        if (!this.state.errorMessage)\r\n            this.setState({ hasNoError: true });\r\n        this.setState({ loading: false });\r\n\r\n    };\r\n\r\n    handleChangeType = (e, { value }) => this.setState({ bottleType: value })\r\n    handleChangeColor = (e, { value }) => this.setState({ bottleColor: value })\r\n    handleChangeSize = (e, { value }) => this.setState({ bottleSize: value })\r\n\r\n    render() {\r\n        const { value } = this.state\r\n\r\n        return (\r\n            <Layout>\r\n                <div className='ProductionLine'>\r\n                    <h2>Production Line</h2>\r\n                    <br />\r\n                    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\" />\r\n                    <Container>\r\n                        <Grid>\r\n                            <Grid.Row centered>\r\n                                <Grid.Column width={6} textAlign=\"center\">\r\n                                    <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} success={this.state.hasNoError}>\r\n                                        <Form.Field><label>Bottle Material:   </label>\r\n                                            <Dropdown\r\n                                                placeholder='Choose Bottle Material'\r\n                                                clearable\r\n                                                options={bottleTypesOptions}\r\n                                                selection\r\n                                                onChange={this.handleChangeType} />\r\n                                        </Form.Field>\r\n\r\n                                        <Form.Field><label>Bottle Color:   </label>\r\n                                            <Dropdown\r\n                                                placeholder='Choose Bottle Color'\r\n                                                clearable\r\n                                                options={bottleColorOptions}\r\n                                                selection\r\n                                                onChange={this.handleChangeColor} />\r\n                                        </Form.Field>\r\n\r\n                                        <Form.Field><label>Bottle Size:   </label>\r\n                                            <Dropdown\r\n                                                placeholder='Choose Bottle Size'\r\n                                                clearable\r\n                                                options={bottleSizeOptions}\r\n                                                selection\r\n                                                onChange={this.handleChangeSize} />\r\n                                        </Form.Field>\r\n\r\n                                        <Message error header=\"Error!\" content={this.state.errorMessage} />\r\n\r\n\r\n                                        <Message success header=\"Success!\" content=\"QR code generated successfully!\" />\r\n\r\n                                        <Button loading={this.state.loading} type='submit'>Submit</Button>\r\n                                    </Form>\r\n\r\n                                    <label>{this.state.bottleQR}</label>\r\n                                    <h1>{this.state.QRcodePic == true ? \r\n                                    <QrCode value={this.state.bottleQR} QrCode size={'400'} /> : ''} </h1>\r\n\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Container>\r\n                </div>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default manufacturingMachinePage; \r\n\r\n/*\r\n//<Button type='submit'>Submit</Button> \r\n    onGenerate = async (event) => {\r\n        this.state.bottleQR = await bottleContract.methods.getBottleAddress().call();\r\n        console.log(this.state.bottleQR);\r\n        this.setState({ QRcodePic: true });\r\n\r\n    }\r\n                                        <Form onSubmit={this.onGenerate}>\r\n                                        <Button type='submit'>Generate QR Code</Button>\r\n                                    </Form>\r\n    */ //(old)\r\n"]},"metadata":{},"sourceType":"module"}