{"ast":null,"code":"var _jsxFileName = \"/Users/maithabarsham/Desktop/RecycleChain/RecycleChain/pages/auctions/viewauctions.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport trackingContract from '../../ethereum/tracking';\nimport plasticBaleContract from '../../ethereum/plasticBale';\nimport { Link } from '../../routes';\nimport Layout from '../../components/Layout';\n\nclass viewauctions extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const accounts = await web3.eth.getAccounts(); //NOTE: Set the account back to account[0] - seller address is account 2\n\n      trackingContract.events.plasticBaleCompleted({\n        filter: {\n          sellerAddress: accounts[0]\n        },\n        fromBlock: 0\n      }, function (error, event) {\n        //Debugging \n        console.log(event); //1. Fetch plastic bale addresses which are contract addresses/auction addresses from plasticBaleCompleted\n\n        const plasticbaleAddr = event.returnValues['plasticbale'];\n        console.log(plasticbaleAddr); //2. Create a new instance \n\n        const plasticBaleSC = plasticBaleContract(plasticbaleAddr); //3. Check auctionStarted events \n\n        plasticBaleSC.events.auctionStarted({\n          filter: {\n            baleAddress: plasticbaleAddr\n          },\n          fromBlock: 0\n        }, function (error, event) {\n          console.log(event); //4. Extract Auction data from event\n\n          var time = new Date(event.returnValues['closingTime'] * 1000);\n          var date = time.toString();\n          this.setState({\n            auctionAddr: event.returnValues['baleAddress'],\n            closingTime: date,\n            startingPrice: event.returnValues['startingAmount'],\n            auctionIPFS: event.returnValues['baleHash']\n          }); //5. Render card on webpage\n\n          this.renderAuctions();\n        }.bind(this)).on('error', console.error);\n      }.bind(this)).on('error', console.error);\n    });\n\n    _defineProperty(this, \"renderAuctions\", () => {\n      // Add more information here like the seller name \n      this.setState(prevState => {\n        let items = {\n          image: this.state.auctionIPFS,\n          header: this.state.auctionAddr,\n          description: __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 103\n            }\n          }, \"Auction Details\"),\n          fluid: true,\n          meta: `Closing Time: ` + this.state.closingTime,\n          extra: `Starting Price: ` + this.state.startingPrice + ` Ether`\n        };\n        return {\n          cards: [...prevState.cards, items]\n        };\n      });\n    });\n\n    this.state = {\n      cards: [],\n      closingTime: '',\n      startingPrice: '',\n      auctionAddr: '',\n      auctionIPFS: ''\n    };\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1.0, maximum-scale=1.0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"Buyer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, \"Welcome to Buyer Page\"), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, \"Open Auctions\"), __jsx(Card.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, this.state.cards.map(items => __jsx(Link, {\n      route: `/auctions/viewauctions/${items.header}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }, __jsx(Card, {\n      image: `https://ipfs.io/ipfs/${items.image}`,\n      header: items.header,\n      stackable: \"true\",\n      meta: items.meta,\n      extra: items.extra,\n      description: items.description,\n      fluid: items.fluid,\n      style: {\n        'overflow': 'hidden'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n}\n\nexport default viewauctions;","map":{"version":3,"sources":["/Users/maithabarsham/Desktop/RecycleChain/RecycleChain/pages/auctions/viewauctions.js"],"names":["React","Component","Card","Button","web3","trackingContract","plasticBaleContract","Link","Layout","viewauctions","constructor","props","accounts","eth","getAccounts","events","plasticBaleCompleted","filter","sellerAddress","fromBlock","error","event","console","log","plasticbaleAddr","returnValues","plasticBaleSC","auctionStarted","baleAddress","time","Date","date","toString","setState","auctionAddr","closingTime","startingPrice","auctionIPFS","renderAuctions","bind","on","prevState","items","image","state","header","description","fluid","meta","extra","cards","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport trackingContract from '../../ethereum/tracking';\nimport plasticBaleContract from '../../ethereum/plasticBale';\nimport { Link } from '../../routes';\nimport Layout from '../../components/Layout';\n\nclass viewauctions extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cards: [],\n            closingTime: '',\n            startingPrice: '',\n            auctionAddr: '',\n            auctionIPFS:''\n        };\n    }\n\n\n    componentDidMount = async () => {\n\n        const accounts = await web3.eth.getAccounts();\n        //NOTE: Set the account back to account[0] - seller address is account 2\n        trackingContract.events.plasticBaleCompleted({\n            filter: { sellerAddress: accounts[0] }, fromBlock: 0\n        }, function (error, event) {\n            //Debugging \n            console.log(event);\n            //1. Fetch plastic bale addresses which are contract addresses/auction addresses from plasticBaleCompleted\n            const plasticbaleAddr = event.returnValues['plasticbale'];\n            console.log(plasticbaleAddr);\n\n            //2. Create a new instance \n            const plasticBaleSC = plasticBaleContract(plasticbaleAddr);\n            //3. Check auctionStarted events \n\n            plasticBaleSC.events.auctionStarted({\n                filter: { baleAddress: plasticbaleAddr },\n                fromBlock: 0\n            }, function (error, event) {\n                console.log(event);\n                //4. Extract Auction data from event\n                var time = new Date(event.returnValues['closingTime'] * 1000);\n                var date = time.toString();\n                this.setState({\n                    auctionAddr: event.returnValues['baleAddress'],\n                    closingTime: date,\n                    startingPrice: event.returnValues['startingAmount'],\n                    auctionIPFS: event.returnValues['baleHash']\n                });\n\n                //5. Render card on webpage\n                this.renderAuctions();\n\n            }.bind(this))\n                .on('error', console.error);\n\n        }.bind(this))\n            .on('error', console.error);\n\n\n    };\n\n\n    renderAuctions = () => {\n        // Add more information here like the seller name \n        this.setState((prevState) => {\n            let items = { image: this.state.auctionIPFS, header: this.state.auctionAddr, description: <a>Auction Details</a>, fluid: true, meta: `Closing Time: ` + this.state.closingTime , extra: `Starting Price: ` +this.state.startingPrice + ` Ether` };\n            return { cards: [...prevState.cards, items] };\n\n        });\n\n    };\n\n\n\n    render() {\n\n        return (\n            <Layout>\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\"/>\n                <link rel=\"stylesheet\"\n                    href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\n                />\n\n                <div className='Buyer'>\n                    <h1>Welcome to Buyer Page</h1>\n                    <h2>Open Auctions</h2>\n                    <Card.Group>\n                        {this.state.cards.map(items => (\n                            <Link route={`/auctions/viewauctions/${items.header}`}>\n                        \n                                <Card \n                                image={`https://ipfs.io/ipfs/${items.image}`}\n                                header={items.header}\n                                stackable='true'\n                                meta={items.meta}\n                                extra = { items.extra }\n                                description = { items.description }\n                                fluid = {items.fluid }\n                                \n                                style={{\n                                    'overflow': 'hidden'\n                                }}/>\n\n                            </Link>\n                        )) }\n                    </Card.Group>\n                 </div>\n            </Layout>\n        );\n    }\n\n}\n\nexport default viewauctions; "]},"metadata":{},"sourceType":"module"}