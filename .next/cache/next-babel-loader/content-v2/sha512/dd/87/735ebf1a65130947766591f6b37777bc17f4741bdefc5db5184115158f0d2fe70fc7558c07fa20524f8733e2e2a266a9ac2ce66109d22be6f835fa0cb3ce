{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\nPurpose: import this file to get access to web3\nPrimary provider is MetaMask \n*/\nimport Web3 from 'web3'; //current provider is the provider injected by MetaMask \n\nvar web3; //typeof is used to check if window is defined \n\nfunction MetamaskConnect() {\n  return _MetamaskConnect.apply(this, arguments);\n}\n\n_c2 = MetamaskConnect;\n\nfunction _MetamaskConnect() {\n  _MetamaskConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(true && typeof window.web3 !== 'undefined')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return window.ethereum.send('eth_requestAccounts');\n\n          case 3:\n            window.web3 = new Web3(window.ethereum); //window.ethereum.enable(); \n            //web3 = new Web3(window.web3.currentProvider);\n\n            _context.next = 8;\n            break;\n\n          case 6:\n            // We are on the server *OR* the user is not running metamask\n            provider = new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/a5dc022ed8df4754b509e1f289d10b05');\n            web3 = new Web3(provider);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _MetamaskConnect.apply(this, arguments);\n}\n\n_c = MetamaskConnect;\nexport default web3;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MetamaskConnect\");\n$RefreshReg$(_c2, \"MetamaskConnect\");","map":{"version":3,"sources":["/Users/eimanalwahhabi/Desktop/RecycleChain/ethereum/web3.js"],"names":["Web3","web3","MetamaskConnect","window","ethereum","send","provider","providers","HttpProvider"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,MAAjB,C,CAGA;;AACA,IAAIC,IAAJ,C,CAEA;;SACeC,e;;;;MAAAA,e;;;8EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,QAAiC,OAAOC,MAAM,CAACF,IAAd,KAAuB,WAD5D;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIQE,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqB,qBAArB,CAJR;;AAAA;AAKEF,YAAAA,MAAM,CAACF,IAAP,GAAc,IAAID,IAAJ,CAASG,MAAM,CAACC,QAAhB,CAAd,CALF,CAME;AACA;;AAPF;AAAA;;AAAA;AASE;AACME,YAAAA,QAVR,GAUmB,IAAIN,IAAI,CAACO,SAAL,CAAeC,YAAnB,CAAiC,+DAAjC,CAVnB;AAWEP,YAAAA,IAAI,GAAG,IAAID,IAAJ,CAASM,QAAT,CAAP;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAeJ,e;AAgBf,eAAeD,IAAf","sourcesContent":["/*\nPurpose: import this file to get access to web3\nPrimary provider is MetaMask \n*/\nimport Web3 from 'web3'; \n\n\n//current provider is the provider injected by MetaMask \nlet web3;\n\n//typeof is used to check if window is defined \nasync function MetamaskConnect() {\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n  // We are in the browser and metamask is running.\n  //Connect metamask to the webapp \n  await window.ethereum.send('eth_requestAccounts');\n  window.web3 = new Web3(window.ethereum);\n  //window.ethereum.enable(); \n  //web3 = new Web3(window.web3.currentProvider);\n} else {\n  // We are on the server *OR* the user is not running metamask\n  const provider = new Web3.providers.HttpProvider( 'https://ropsten.infura.io/v3/a5dc022ed8df4754b509e1f289d10b05');\n  web3 = new Web3(provider);\n}   \n\n}\n\nexport default web3;\n"]},"metadata":{},"sourceType":"module"}