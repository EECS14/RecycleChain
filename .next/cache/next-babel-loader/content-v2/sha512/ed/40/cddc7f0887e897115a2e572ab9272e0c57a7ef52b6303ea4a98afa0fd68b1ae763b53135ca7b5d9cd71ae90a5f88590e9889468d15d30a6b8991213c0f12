{"ast":null,"code":"/*\nPurpose: import this file to get access to web3\nPrimary provider is MetaMask \n*/\nimport Web3 from 'web3'; //current provider is the provider injected by MetaMask \n\nvar web3; //typeof is used to check if window is defined \n\nif (true && typeof window.web3 !== 'undefined') {\n  // We are in the browser and metamask is running.\n  //Connect metamask to the webapp \n  await window.ethereum.send('eth_requestAccounts');\n  window.web3 = new Web3(window.ethereum); //window.ethereum.enable(); \n  //web3 = new Web3(window.web3.currentProvider);\n} else {\n  // We are on the server *OR* the user is not running metamask\n  var provider = new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/a5dc022ed8df4754b509e1f289d10b05');\n  web3 = new Web3(provider);\n}\n\nexport default web3;","map":{"version":3,"sources":["/Users/eimanalwahhabi/Desktop/RecycleChain/ethereum/web3.js"],"names":["Web3","web3","window","ethereum","send","provider","providers","HttpProvider"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,MAAjB,C,CAGA;;AACA,IAAIC,IAAJ,C,CAEA;;AAEA,IAAI,QAAiC,OAAOC,MAAM,CAACD,IAAd,KAAuB,WAA5D,EAAyE;AACvE;AACA;AACA,QAAMC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqB,qBAArB,CAAN;AACAF,EAAAA,MAAM,CAACD,IAAP,GAAc,IAAID,IAAJ,CAASE,MAAM,CAACC,QAAhB,CAAd,CAJuE,CAKvE;AACA;AACD,CAPD,MAOO;AACL;AACA,MAAME,QAAQ,GAAG,IAAIL,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAiC,+DAAjC,CAAjB;AACAN,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASK,QAAT,CAAP;AACD;;AAED,eAAeJ,IAAf","sourcesContent":["/*\nPurpose: import this file to get access to web3\nPrimary provider is MetaMask \n*/\nimport Web3 from 'web3'; \n\n\n//current provider is the provider injected by MetaMask \nlet web3;\n\n//typeof is used to check if window is defined \n\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n  // We are in the browser and metamask is running.\n  //Connect metamask to the webapp \n  await window.ethereum.send('eth_requestAccounts');\n  window.web3 = new Web3(window.ethereum);\n  //window.ethereum.enable(); \n  //web3 = new Web3(window.web3.currentProvider);\n} else {\n  // We are on the server *OR* the user is not running metamask\n  const provider = new Web3.providers.HttpProvider( 'https://ropsten.infura.io/v3/a5dc022ed8df4754b509e1f289d10b05');\n  web3 = new Web3(provider);\n} \n\nexport default web3;\n"]},"metadata":{},"sourceType":"module"}