{"ast":null,"code":"var _jsxFileName = \"/Users/eimanalwahhabi/Desktop/RecycleChain/pages/auctions/joinAuction.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Icon, Image, Statistic } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport plasticBaleContract from '../../ethereum/plasticBale';\nimport registerContract from '../../ethereum/register';\nimport Layout from '../../components/Layout';\n\nclass joinAuction extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      const plasticBaleSC = plasticBaleContract(this.props.address);\n      var biddersnumber = 0;\n      var highestbid = 0;\n      plasticBaleSC.getPastEvents(\"allEvents\", {\n        fromBlock: 0,\n        toBlock: 'latest'\n      }, (error, events) => {\n        console.log(events);\n\n        const myfunction = item => {\n          if (item.event === 'bidderRegistered') {\n            biddersnumber++;\n          } else if (item.event === 'auctionStarted') {\n            highestbid = item.returnValues['startingAmount'];\n          } else if (item.event === 'bidderExited') {\n            //console.log(item);\n            biddersnumber--;\n          } else if (item.event === 'bidPlaced') {\n            highestbid = item.returnValues['amount'];\n            this.findHighestBidder(item.returnValues['biddeAddress']); //highestbidder = item.returnValues['bidderAddress'];\n          }\n        };\n\n        events.forEach(myfunction);\n        this.setState({\n          totalBidders: biddersnumber,\n          highestBid: highestbid\n        });\n      });\n    });\n\n    _defineProperty(this, \"onJoinAuction\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n        await plasticBaleSC.methods.addBidder(this.state.registrationSCAddr, accounts[0]).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage) {\n        this.setState({\n          join: true\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"findHighestBidder\", async address => {\n      const accounts = await web3.eth.getAccounts();\n      await registerContract.methods.getBuyerDetails(address).call(function (error, result) {\n        this.setState({\n          highestBidder: result[1],\n          highestBidderAddress: result[0]\n        });\n      }.bind(this));\n    });\n\n    _defineProperty(this, \"onPlaceBid\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading2: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n        await plasticBaleSC.methods.placeBid(this.state.registrationSCAddr, this.state.bid).send({\n          from: accounts[0],\n          value: this.state.bid\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage) this.setState({\n        hasNoError: true\n      });\n      this.setState({\n        loading2: false\n      });\n    });\n\n    _defineProperty(this, \"onExitAuction\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading3: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n        await plasticBaleSC.methods.exitAuction(this.state.registrationSCAddr).send({\n          from: accounts[0]\n        });\n        this.setState({\n          join: false\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } // if errorMsg is empty, registration is successful\n\n\n      if (!this.state.errorMessage) this.setState({\n        hasNoError: true\n      });\n      this.setState({\n        loading3: false\n      });\n    });\n\n    this.state = {\n      join: false,\n      registrationSCAddr: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\n      errorMessage: '',\n      loading: false,\n      totalBidders: 0,\n      highestBid: 0,\n      highestBidder: 'No bids placed',\n      highestBidderAddress: '',\n      bid: '',\n      loading2: false,\n      loading3: false\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  static async getInitialProps(props) {\n    //fetches address of the bale from URL\n    const {\n      address\n    } = props.query;\n    return {\n      address\n    };\n  }\n\n  render() {\n    const {\n      join\n    } = this.state;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }), console.log(this.props.address), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }\n    }, \"Live Auction\"), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    }, \" Plastic Bale being auctioned: \", this.props.address, \" \"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"AuctionContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }, __jsx(Statistic.Group, {\n      widths: \"three\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, __jsx(Statistic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, __jsx(Statistic.Value, {\n      text: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    }, this.state.highestBid, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 33\n      }\n    }), \"Wei\"), __jsx(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 29\n      }\n    }, \"Highest Bid\")), __jsx(Statistic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, __jsx(Statistic.Value, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }\n    }, __jsx(Icon, {\n      name: \"users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 33\n      }\n    }), \" \", this.state.totalBidders), __jsx(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    }, \"Total Bidders\")), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 25\n      }\n    }), __jsx(Statistic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 25\n      }\n    }, __jsx(Statistic.Value, {\n      text: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 29\n      }\n    }, __jsx(Icon, {\n      name: \"user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 33\n      }\n    }), \" \", this.state.highestBidder), __jsx(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 29\n      }\n    }, \"Highest Bidder\")))), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }), __jsx(Button, {\n      loading: this.state.loading,\n      onClick: this.onJoinAuction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }, \"Join Auction \"), join && __jsx(\"div\", {\n      className: \"auctionInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onPlaceBid,\n      error: !!this.state.errorMessage,\n      success: this.state.hasNoError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    }, __jsx(Form.Field, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 29\n      }\n    }, \"Amount\"), __jsx(Input, {\n      value: this.state.bid,\n      label: {\n        basic: true,\n        content: 'Wei'\n      },\n      labelPosition: \"right\",\n      onChange: event => this.setState({\n        bid: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 29\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Error!\",\n      content: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 25\n      }\n    }), __jsx(Message, {\n      success: true,\n      header: \"Success!\",\n      content: \"Bid is Placed!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 25\n      }\n    }), __jsx(Button, {\n      loading: this.state.loading2,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 25\n      }\n    }, \"Place Bid\")), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }\n    }), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }\n    }, \" You can only exit the auction if no bids were placed!\"), __jsx(Button, {\n      loading: this.state.loading3,\n      onClick: this.onExitAuction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }\n    }, \"Exit Auction \")));\n  }\n\n}\n\nexport default joinAuction;","map":{"version":3,"sources":["/Users/eimanalwahhabi/Desktop/RecycleChain/pages/auctions/joinAuction.js"],"names":["React","Component","Form","Button","Input","Message","Icon","Image","Statistic","web3","plasticBaleContract","registerContract","Layout","joinAuction","constructor","props","accounts","eth","getAccounts","plasticBaleSC","address","biddersnumber","highestbid","getPastEvents","fromBlock","toBlock","error","events","console","log","myfunction","item","event","returnValues","findHighestBidder","forEach","setState","totalBidders","highestBid","preventDefault","loading","errorMessage","methods","addBidder","state","registrationSCAddr","send","from","err","message","join","getBuyerDetails","call","result","highestBidder","highestBidderAddress","bind","loading2","placeBid","bid","value","hasNoError","loading3","exitAuction","componentDidMount","getInitialProps","query","render","onJoinAuction","onPlaceBid","basic","content","target","onExitAuction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Button, Input, Message, Icon, Image, Statistic } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport plasticBaleContract from '../../ethereum/plasticBale';\nimport registerContract from '../../ethereum/register';\nimport Layout from '../../components/Layout';\n\nclass joinAuction extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            join: false,\n            registrationSCAddr: '0x7126ec4f68added009015a1f5ac718c4896faa2e',\n            errorMessage: '',\n            loading: false,\n            totalBidders: 0,\n            highestBid: 0,\n            highestBidder: 'No bids placed',\n            highestBidderAddress: '',\n            bid: '',\n            loading2: false,\n            loading3: false\n        };\n\n        this.componentDidMount = this.componentDidMount.bind(this);\n    }\n\n\n    static async getInitialProps(props) {\n        //fetches address of the bale from URL\n        const { address } = props.query;\n\n        return { address };\n    }\n\n    componentDidMount = async () => {\n\n        const accounts = await web3.eth.getAccounts();\n        const plasticBaleSC = plasticBaleContract(this.props.address);\n\n        var biddersnumber = 0;\n        var highestbid = 0;\n       \n\n        plasticBaleSC.getPastEvents(\"allEvents\", { fromBlock: 0, toBlock: 'latest' }, (error, events) => {\n            console.log(events);\n\n            const myfunction = (item) => {\n\n                if (item.event === 'bidderRegistered') {\n                    \n                    biddersnumber++;\n                   \n\n                } else if (item.event === 'auctionStarted') {\n                    highestbid = item.returnValues['startingAmount'];\n\n                } else if (item.event === 'bidderExited') {\n                    //console.log(item);\n                    biddersnumber--;\n\n                } else if (item.event === 'bidPlaced') {\n                    highestbid = item.returnValues['amount'];\n                    this.findHighestBidder(item.returnValues['biddeAddress']);\n                    //highestbidder = item.returnValues['bidderAddress'];\n\n                }\n\n            };\n\n            events.forEach(myfunction);\n\n            this.setState({\n                totalBidders: biddersnumber,\n                highestBid: highestbid\n            });\n\n\n        });\n\n\n    };\n\n    onJoinAuction = async (event) => {\n        event.preventDefault();\n        const accounts = await web3.eth.getAccounts();\n\n        this.setState({ loading: true, errorMessage: '' });\n\n        try {\n            const plasticBaleSC = plasticBaleContract(this.props.address);\n\n            await plasticBaleSC.methods\n                .addBidder(this.state.registrationSCAddr, accounts[0])\n                .send({ from: accounts[0] });\n\n        } catch (err) {\n            this.setState({ errorMessage: err.message });\n\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage) {\n            this.setState({ join: true });\n        }\n\n        this.setState({ loading: false });\n    };\n\n\n\n    findHighestBidder = async (address) => {\n\n        const accounts = await web3.eth.getAccounts();\n        await registerContract.methods\n            .getBuyerDetails(address).call(function (error, result) {\n                this.setState({\n                    highestBidder: result[1],\n                    highestBidderAddress: result[0],\n                });\n\n            }.bind(this));\n\n    };\n\n\n    onPlaceBid = async (event) => {\n\n        event.preventDefault();\n\n        this.setState({ loading2: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const plasticBaleSC = plasticBaleContract(this.props.address);\n            await plasticBaleSC.methods\n                .placeBid(this.state.registrationSCAddr, this.state.bid)\n                .send({ from: accounts[0], value: this.state.bid });\n        }\n        catch (err) {\n            this.setState({ errorMessage: err.message });\n\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage) \n            this.setState({ hasNoError: true });\n        \n\n        this.setState({ loading2: false });\n\n    };\n\n\n    onExitAuction = async (event) => {\n\n        event.preventDefault();\n\n        this.setState({ loading3: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const plasticBaleSC = plasticBaleContract(this.props.address);\n            await plasticBaleSC.methods\n                .exitAuction(this.state.registrationSCAddr)\n                .send({ from: accounts[0]});\n\n                this.setState({join: false});\n        }\n        catch (err) {\n            this.setState({ errorMessage: err.message });\n\n        }\n\n        // if errorMsg is empty, registration is successful\n        if (!this.state.errorMessage) \n            this.setState({ hasNoError: true });\n        \n\n        this.setState({ loading3: false });\n\n\n    };\n\n\n    render() {\n\n        const { join } = this.state;\n\n        return (\n            <Layout>\n                <link rel=\"stylesheet\"\n                    href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\n                />\n                {console.log(this.props.address)}\n\n                <h1>Live Auction</h1>\n                <h2> Plastic Bale being auctioned: {this.props.address} </h2>\n                <br/>\n\n                <div className='AuctionContainer'>\n\n                    <Statistic.Group widths='three'>\n                        <Statistic>\n                            <Statistic.Value text>\n                                {this.state.highestBid}\n                                <br />\n                            Wei\n                            </Statistic.Value>\n                            <Statistic.Label>Highest Bid</Statistic.Label>\n                        </Statistic>\n\n                        <Statistic>\n                            <Statistic.Value>\n                                <Icon name='users' /> {this.state.totalBidders}\n                            </Statistic.Value>\n                            <Statistic.Label>Total Bidders</Statistic.Label>\n                        </Statistic>\n\n                        <br />\n\n                        <Statistic>\n                            <Statistic.Value text>\n                                <Icon name='user' /> {this.state.highestBidder}\n                                {/*this.state.highestBidderAddress*/}\n                            </Statistic.Value>\n                            <Statistic.Label>Highest Bidder</Statistic.Label>\n                        </Statistic>\n\n\n                    </Statistic.Group>\n\n                </div>\n\n                <br />\n                <br />\n\n                <Button loading={this.state.loading} onClick={this.onJoinAuction}>Join Auction </Button>\n\n                {join && ( \n\n                <div className='auctionInput'>\n                    <Form onSubmit={this.onPlaceBid} error={!!this.state.errorMessage} success={this.state.hasNoError}>\n\n                        <Form.Field width={4}>\n                            <label>Amount</label>\n                            <Input value={this.state.bid}\n                                label={{ basic: true, content: 'Wei' }}\n                                labelPosition='right'\n                                onChange={event => this.setState({ bid: event.target.value })} />\n                        </Form.Field>\n\n                        <Message error header=\"Error!\" content={this.state.errorMessage} />\n\n\n                        <Message success header=\"Success!\" content=\"Bid is Placed!\" />\n\n\n                        <Button loading={this.state.loading2} type='submit'>Place Bid</Button>\n                    </Form>\n\n                    <br />\n\n                    <p> You can only exit the auction if no bids were placed!</p>\n                    <Button loading={this.state.loading3} onClick={this.onExitAuction}>Exit Auction </Button>\n                </div>\n                )}\n\n             </Layout>\n        );\n    }\n\n\n\n}\n\nexport default joinAuction; \n"]},"metadata":{},"sourceType":"module"}